(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={
  "Connected to": "Connected to",
  "Learn More" : "Learn More",
  "CLOSED CAPTION PREVIEW": "CLOSED CAPTION PREVIEW",
  "Sample Text": "Sample Text",
  "Ad": "Ad",
  "Skip Ad": "Skip Ad",
  "LIVE": "LIVE",
  "GO LIVE": "GO LIVE",
  "CC Options": "Caption options",
  "On": "On",
  "Off": "Off",
  "Discovery": "Discovery",
  "Facebook Unavailable": "Facebook Unavailable",
  "Facebook Success": "Check out this video on Facebook",
  "Twitter Unavailable": "Twitter Unavailable",
  "Twitter Success": "Check out this video on Twitter",
  "Post Title": "Post Successfully",
  "Account Configure": "Please set up your account on device",
  "Discover": "Discover",
  "Up next": "Up next",
  "Video Quality": "Video Quality",
  "Share": "Share",
  "Start at": "Start at",
  "Embed": "Embed",
  "Email": "Email",
  "Check out this video": "I found a video you might be interested in! Check it out: ",
  "To": "To",
  "Subject": "Subject",
  "Message": "Message",
  "name@email.com": "name@email.com",
  "Optional Message": "Optional Message",
  "Send": "Send",
  "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO": "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO",
  "THIS IS NOT WORKING! :(": "THIS IS NOT WORKING! :(",
  "NETWORK ERROR": "NETWORK ERROR",
  "Cannot Contact Server": "Cannot Contact Server",
  "SAS ERROR": "SAS ERROR",
  "Invalid Authorization Response": "Invalid Authorization Response",
  "SAS GEO ERROR": "SAS GEO ERROR",
  "This video is not authorized in your location": "This video is not authorized in your location",
  "SAS DOMAIN ERROR": "SAS DOMAIN ERROR",
  "This video is not authorized for your domain": "This video is not authorized for your domain",
  "VIDEO NOT AVAILABLE YET": "VIDEO NOT AVAILABLE YET",
  "This video will be available soon": "This video will be available soon",
  "VIDEO COMING SOON!": "VIDEO COMING SOON!",
  "This video is not available yet": "This video is not available yet",
  "You may need to refresh the page to access the video after it becomes available" : "You may need to refresh the page to access the video after it becomes available",
  "VIDEO NO LONGER AVAILABLE": "VIDEO NO LONGER AVAILABLE",
  "This video is no longer available": "This video is no longer available",
  "SAS DEVICE ERROR": "SAS DEVICE ERROR",
  "This video is not authorized for playback on this device": "This video is not authorized for playback on this device",
  "SAS PROXY ERROR": "SAS PROXY ERROR",
  "An anonymous proxy was detected. Please disable the proxy and retry.": "An anonymous proxy was detected. Please disable the proxy and retry.",
  "CONCURRENT STREAMS NUMBER EXCEEDED": "CONCURRENT STREAMS NUMBER EXCEEDED",
  "You have exceeded the maximum number of concurrent streams": "You have exceeded the maximum number of concurrent streams",
  "DEVICE BINDING ERROR": "DEVICE BINDING ERROR",
  "Device binding failed": "Device binding failed",
  "DEVICE ID TOO LONG": "DEVICE ID TOO LONG",
  "Device ID is too long": "Device ID is too long",
  "INVALID PLAYER TOKEN": "INVALID PLAYER TOKEN",
  "Invalid Ooyala Player token": "Invalid Ooyala Player token",
  "AUTHORIZATION ERROR": "AUTHORIZATION ERROR",
  "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22": "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22",
  "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29": "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29",
  "Please remove one of your authorized devices to enable this device.": "Please remove one of your authorized devices to enable this device.",
  "LICENSE ERROR": "LICENSE ERROR",
  "General error acquiring license": "General error acquiring license",
  "DRM SERVER ERROR": "DRM SERVER ERROR",
  "DRM server error": "DRM server error",
  "INVALID ENTITLEMENTS ERROR": "INVALID ENTITLEMENTS ERROR",
  "User Entitlement Terminated - Stream No Longer Active for the User": "User Entitlement Terminated - Stream No Longer Active for the User",
  "INVALID HEARTBEAT": "INVALID HEARTBEAT",
  "Invalid heartbeat response": "Invalid heartbeat response",
  "INVALID CONTENT": "INVALID CONTENT",
  "INVALID METADATA": "INVALID METADATA",
  "Invalid Metadata": "Invalid Metadata",
  "PLAYBACK ERROR": "PLAYBACK ERROR",
  "Could not play the content": "Could not play the content",
  "PLAYBACK STREAM ERROR": "PLAYBACK STREAM ERROR",
  "This video isn't encoded for your device": "This video isn't encoded for your device",
  "PLAYBACK LIVESTREAM ERROR": "PLAYBACK LIVESTREAM ERROR",
  "Live stream is off air": "Live stream is off air",
  "PLAYBACK NETWORK ERROR": "PLAYBACK NETWORK ERROR",
  "Network connection temporarily lost": "Network connection temporarily lost",
  "UNPLAYABLE CONTENT ERROR": "UNPLAYABLE CONTENT ERROR",
  "This video is not playable on this player": "This video is not playable on this player",
  "INVALID EXTERNAL ID": "INVALID EXTERNAL ID",
  "Invalid External ID": "Invalid External ID",
  "EMPTY CHANNEL ERROR": "EMPTY CHANNEL ERROR",
  "This channel is empty": "This channel is empty",
  "EMPTY CHANNEL SET ERROR": "EMPTY CHANNEL SET ERROR",
  "This channel set is empty": "This channel set is empty",
  "CHANNEL CONTENT ERROR": "CHANNEL CONTENT ERROR",
  "This channel is not playable at this time": "This channel is not playable at this time",
  "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.": "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.",
  "(Try Clicking The Discover Button Again On Reload Your Page)": "(Try Clicking The Discover Button Again On Reload Your Page)",
  "Something happened while we were trying to play your video! Click replay or simply reload your page.": "Something happened while we were trying to play your video! Click replay or simply reload your page.",
  "Language": "Language",
  "Color Selection": "Color Selection",
  "Caption Opacity": "Caption Opacity",
  "Font Type": "Font Type",
  "Font Size": "Font Size",
  "Text Enhancements": "Text Enhancements",
  "Text color": "Text color",
  "Background color": "Background color",
  "Window color": "Window color",
  "Transparent": "Transparent",
  "White": "White",
  "Blue": "Blue",
  "Magenta": "Magenta",
  "Green": "Green",
  "Yellow": "Yellow",
  "Red": "Red",
  "Cyan": "Cyan",
  "Black": "Black",
  "Text opacity": "Text opacity",
  "Background opacity": "Background opacity",
  "Window opacity": "Window opacity",
  "Font size": "Font size",
  "Small": "Small",
  "Medium": "Medium",
  "Large": "Large",
  "Extra Large": "Extra Large",
  "Text enhancement": "Text enhancement",
  "Uniform": "Uniform",
  "Depressed": "Depressed",
  "Raised": "Raised",
  "Shadow": "Shadow",
  "Play": "Play",
  "Replay": "Replay",
  "Pause": "Pause",
  "Mute": "Mute",
  "Unmute": "Unmute",
  "Closed Captions":"Closed Captions",
  "Full Screen": "Full Screen",
  "Exit Full Screen": "Exit Full Screen",
  "More Options": "More Options",
  "Audio": "Audio",
  "Subtitles": "Subtitles",
  "Undefined language": "Undefined language",
  "No linguistic content": "No linguistic content",
  "Speed": "Speed",
  "Normal": "Normal"
}

},{}],2:[function(require,module,exports){
module.exports={
  "Connected to": "Conectado a",
  "Learn More" : "Más información",
  "CLOSED CAPTION PREVIEW": "VISTA PRELIMINAR DE SUBTÍTULOS",
  "Sample Text": "Texto de muestra",
  "Ad": "Anuncio",
  "Skip Ad": "Omitir anuncio",
  "LIVE": "EN VIVO",
  "GO LIVE": "TRANSMITIR EN VIVO",
  "CC Options": "Opciones de los subtítulos",
  "On": "Sí",
  "Off": "No",
  "Discovery": "Discovery",
  "Facebook Unavailable": "Facebook no está disponible.",
  "Facebook Success": "Mirar este video en Facebook",
  "Twitter Unavailable": "Twitter no está disponible.",
  "Twitter Success": "Mirar este video en Facebook",
  "Post Title": "Publicó el contenido correctamente.",
  "Account Configure": "Configure su cuenta en el dispositivo.",
  "Discover": "Descubrir",
  "Up next": "Siguiente",
  "Video Quality": "Calidad de video",
  "Share": "Compartir",
  "Start at": "Comenzar en",
  "Embed": "Insertar",
  "Email": "Correo electrónico",
  "Check out this video": "¡Encontré este video que puede interesarle! Mírelo: ",
  "To": "Para",
  "Subject": "Asunto",
  "Message": "Mensaje",
  "name@email.com": "nombre@correoelectrónico.com",
  "Optional Message": "Mensaje opcional",
  "Send": "Enviar",
  "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO": "ACTUALICE LA PANTALLA O SELECCIONE UN VIDEO DIFERENTE.",
  "THIS IS NOT WORKING! :(": "ESTO NO FUNCIONA. :(",
  "NETWORK ERROR": "SE PRODUJO UN ERROR EN LA RED.",
  "Cannot Contact Server": "No se puede contactar al servidor.",
  "SAS ERROR": "SE PRODUJO UN ERROR EN SAS.",
  "Invalid Authorization Response": "La respuesta de autorización no es válida.",
  "SAS GEO ERROR": "SE PRODUJO UN ERROR EN LA UBICACIÓN DE SAS.",
  "This video is not authorized in your location": "Este video no está autorizado en su ubicación.",
  "SAS DOMAIN ERROR": "SE PRODUJO UN ERROR EN EL DOMINIO DE SAS.",
  "This video is not authorized for your domain": "Este video no está autorizado en su dominio.",
  "VIDEO NOT AVAILABLE YET": "EL VIDEO TODAVÍA NO ESTÁ DISPONIBLE.",
  "This video will be available soon": "El video estará disponible próximamente.",
  "VIDEO COMING SOON!": "¡PRÓXIMAMENTE UN VIDEO!",
  "This video is not available yet": "El video todavía no está disponible.",
  "You may need to refresh the page to access the video after it becomes available" : "Es posible que deba actualizar la página para acceder al video una vez que esté disponible.",
  "VIDEO NO LONGER AVAILABLE": "EL VIDEO YA NO ESTÁ DISPONIBLE.",
  "This video is no longer available": "El video ya no está disponible.",
  "SAS DEVICE ERROR": "SE PRODUJO UN ERROR EN EL DISPOSITIVO DE SAS.",
  "This video is not authorized for playback on this device": "La reproducción de este video no está autorizada en este dispositivo.",
  "SAS PROXY ERROR": "SE PRODUJO UN ERROR EN EL PROXY DE SAS.",
  "An anonymous proxy was detected. Please disable the proxy and retry.": "Se detectó un proxy anónimo. Deshabilite el proxy e inténtelo nuevamente.",
  "CONCURRENT STREAMS NUMBER EXCEEDED": "SE SUPERÓ LA CANTIDAD DE EMISIONES SIMULTÁNEAS.",
  "You have exceeded the maximum number of concurrent streams": "Superó la cantidad máxima de emisiones simultáneas.",
  "DEVICE BINDING ERROR": "SE PRODUJO UN ERROR EN EL ENLACE DE LOS DISPOSITIVOS.",
  "Device binding failed": "Se produjo un error en el enlace de dispositivos.",
  "DEVICE ID TOO LONG": "LA ID DEL DISPOSITIVO ES DEMASIADO LARGA.",
  "Device ID is too long": "La ID del dispositivo es demasiado larga.",
  "INVALID PLAYER TOKEN": "EL TOKEN DEL REPRODUCTOR NO ES VÁLIDO.",
  "Invalid Ooyala Player token": "El token del reproductor de Ooyala no es válido.",
  "AUTHORIZATION ERROR": "SE PRODUJO UN ERROR EN LA AUTORIZACIÓN.",
  "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22": "No se pudo registrar este dispositivo en esta cuenta, dado que se alcanzó el número máximo de dispositivos autorizados. Código de error: 22",
  "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29": "No se pudo acceder a este contenido, dado que se alcanzó el número máximo de dispositivos autorizados. Código de error: 29",
  "Please remove one of your authorized devices to enable this device.": "Quite uno de los dispositivos autorizados para permitir este dispositivo.",
  "LICENSE ERROR": "SE PRODUJO UN ERROR EN LA LICENCIA.",
  "General error acquiring license": "Se produjo un error general al adquirir la licencia.",
  "DRM SERVER ERROR": "SE PRODUJO UN ERROR EN EL SERVIDOR DE DRM.",
  "DRM server error": "Se produjo un error en el servidor de DRM.",
  "INVALID ENTITLEMENTS ERROR": "SE PRODUJO UN ERROR CON ASIGNACIONES NO VÁLIDAS.",
  "User Entitlement Terminated - Stream No Longer Active for the User": "Finalizó la asignación del usuario. La emisión ya no estará activa para el usuario.",
  "INVALID HEARTBEAT": "LA PULSACIÓN NO ES VÁLIDA.",
  "Invalid heartbeat response": "La respuesta de pulsación no es válida.",
  "INVALID CONTENT": "EL CONTENIDO NO ES VÁLIDO.",
  "INVALID METADATA": "LOS METADATOS NO SON VÁLIDOS.",
  "Invalid Metadata": "Los metadatos no son válidos.",
  "PLAYBACK ERROR": "SE PRODUJO UN ERROR EN LA REPRODUCCIÓN.",
  "Could not play the content": "No se pudo reproducir el contenido.",
  "PLAYBACK STREAM ERROR": "SE PRODUJO UN ERROR EN LA EMISIÓN DE LA REPRODUCCIÓN.",
  "This video isn't encoded for your device": "Este video no está codificado para su dispositivo.",
  "PLAYBACK LIVESTREAM ERROR": "SE PRODUJO UN ERROR EN LA EMISIÓN EN VIVO DE LA REPRODUCCIÓN.",
  "Live stream is off air": "La emisión en vivo está desconectada.",
  "PLAYBACK NETWORK ERROR": "SE PRODUJO UN ERROR EN LA RED DE LA REPRODUCCIÓN.",
  "Network connection temporarily lost": "Se perdió temporalmente la conexión con la red.",
  "UNPLAYABLE CONTENT ERROR": "SE PRODUJO UN ERROR CON EL CONTENIDO, NO SE PUEDE REPRODUCIR.",
  "This video is not playable on this player": "Este video no se puede reproducir en este dispositivo.",
  "INVALID EXTERNAL ID": "LA ID EXTERNA NO ES VÁLIDA.",
  "Invalid External ID": "La ID externa no es válida.",
  "EMPTY CHANNEL ERROR": "SE PRODUJO UN ERROR, EL CANAL ESTÁ VACÍO.",
  "This channel is empty": "Este canal está vacío.",
  "EMPTY CHANNEL SET ERROR": "SE PRODUJO UN ERROR, EL CONJUNTO DE CANALES ESTÁ VACÍO.",
  "This channel set is empty": "Este conjunto de canales está vacío.",
  "CHANNEL CONTENT ERROR": "SE PRODUJO UN ERROR CON EL CONTENIDO DEL CANAL.",
  "This channel is not playable at this time": "Este canal no se puede reproducir en este momento.",
  "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.": "¡SE PRODUJO UN ERROR! DEBERÍA HABER VIDEOS AQUÍ.",
  "(Try Clicking The Discover Button Again On Reload Your Page)": "(Intente hacer clic en el botón Descubrir de nuevo al cargar la página).",
  "Something happened while we were trying to play your video! Click replay or simply reload your page.": "Se produjo un error cuando intentamos reproducir tu video. Seleccione la opción para repetir el video o vuelva a cargar la página.",
  "Language": "Idioma",
  "Color Selection": "Selección de color",
  "Caption Opacity": "Opacidad de los subtítulos",
  "Font Type": "Tipo de fuente",
  "Font Size": "Tamaño de fuente",
  "Text Enhancements": "Mejoras en el texto",
  "Text color": "Color del texto",
  "Background color": "Color del fondo",
  "Window color": "Color de la ventana",
  "Transparent": "Transparente",
  "White": "Blanco",
  "Blue": "Azul",
  "Magenta": "Magenta",
  "Green": "Verde",
  "Yellow": "Amarillo",
  "Red": "Rojo",
  "Cyan": "Cian",
  "Black": "Negro",
  "Text opacity": "Opacidad del texto",
  "Background opacity": "Opacidad del fondo",
  "Window opacity": "Opacidad de la ventana",
  "Font size": "Tamaño de fuente",
  "Small": "Pequeña",
  "Medium": "Mediana",
  "Large": "Grande",
  "Extra Large": "Extra grande",
  "Text enhancement": "Mejora en el texto",
  "Uniform": "Uniforme",
  "Depressed": "Aplastada",
  "Raised": "Elevada",
  "Shadow": "Sombra",
  "Play": "Reproducir",
  "Replay": "Repetir video",
  "Pause": "Pausar",
  "Mute": "Silenciar",
  "Unmute": "Sonido",
  "Closed Captions":"Subtítulos",
  "Full Screen": "Pantalla completa",
  "Exit Full Screen": "Salir pantalla completa",
  "More Options": "Más Opciones",
  "Audio": "Audio",
  "Subtitles": "Subtítulos",
  "Undefined language": "Idioma no definido",
  "No linguistic content": "Sin contenido lingüístico",
  "Speed": "Velocidad",
  "Normal": "Normal"
}

},{}],3:[function(require,module,exports){
module.exports={
  "Connected to": "接続先",
  "Learn More" : "詳細",
  "CLOSED CAPTION PREVIEW": "字幕プレビューを閉じる",
  "Sample Text": "サンプルテキスト",
  "Ad": "広告",
  "Skip Ad": "広告表示をスキップ",
  "LIVE": "ライブ",
  "GO LIVE": "公開開始",
  "CC Options": "字幕オプション",
  "On": "オン",
  "Off": "オフ",
  "Discovery": "検出",
  "Facebook Unavailable": "Facebook を利用できません",
  "Facebook Success": "Facebook でこのビデオを確認してください",
  "Twitter Unavailable": "Twitter を利用できません",
  "Twitter Success": "Twitter でこのビデオを確認してください",
  "Post Title": "投稿成功",
  "Account Configure": "デバイスでアカウントを設定してください",
  "Discover": "検出",
  "Up next": "次回",
  "Video Quality": "ビデオ品質",
  "Share": "共有",
  "Start at": "開始ポイント",
  "Embed": "埋め込み",
  "Email": "メール",
  "Check out this video": "関心があると思われるビデオがあります。確認: ",
  "To": "発行先",
  "Subject": "件名",
  "Message": "メッセージ",
  "name@email.com": "name@email.com",
  "Optional Message": "オプションメッセージ",
  "Send": "送信",
  "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO": "画面をリロードするか、別のビデオを選んでください",
  "THIS IS NOT WORKING! :(": "現在これは動作していません! :(",
  "NETWORK ERROR": "ネットワークエラー",
  "Cannot Contact Server": "サーバーと通信できません",
  "SAS ERROR": "SAS エラー",
  "Invalid Authorization Response": "無効な認証応答",
  "SAS GEO ERROR": "SAS GEO エラー",
  "This video is not authorized in your location": "このビデオはユーザーの場所では許可されていません",
  "SAS DOMAIN ERROR": "SAS ドメインエラー",
  "This video is not authorized for your domain": "このビデオはユーザーのドメインでは許可されていません",
  "VIDEO NOT AVAILABLE YET": "ビデオはまだご視聴いただけません",
  "This video will be available soon": "このビデオはすぐに視聴可能になります",
  "VIDEO COMING SOON!": "ビデオ近日公開!",
  "This video is not available yet": "このビデオはまだご視聴いただけません",
  "You may need to refresh the page to access the video after it becomes available" : "ビデオが視聴可能になったら、ページを更新してご視聴ください",
  "VIDEO NO LONGER AVAILABLE": "ビデオはもう視聴いただけません",
  "This video is no longer available": "このビデオはもう視聴いただけません",
  "SAS DEVICE ERROR": "SAS デバイスエラー",
  "This video is not authorized for playback on this device": "このビデオをこのデバイスで再生することは許可されていません",
  "SAS PROXY ERROR": "SAS プロキシエラー",
  "An anonymous proxy was detected. Please disable the proxy and retry.": "匿名プロキシが検出されました。プロキシを無効にして再試行してください。",
  "CONCURRENT STREAMS NUMBER EXCEEDED": "同時アクセスストリームの最大数を超過しました",
  "You have exceeded the maximum number of concurrent streams": "同時アクセスストリームの最大数を超過しました",
  "DEVICE BINDING ERROR": "デバイスバインドエラー",
  "Device binding failed": "デバイスのバインドに失敗しました",
  "DEVICE ID TOO LONG": "デバイス ID が長すぎます",
  "Device ID is too long": "デバイス ID が長すぎます",
  "INVALID PLAYER TOKEN": "無効な Player トークン",
  "Invalid Ooyala Player token": "無効な Ooyaka Player トークン。",
  "AUTHORIZATION ERROR": "認証エラー",
  "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22": "このデバイスをアカウントに登録できません。認証されたデバイスの数が上限に達しています。エラーコード22",
  "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29": "このコンテンツにアクセスできません。認証されたデバイスの数が上限に達しています。エラーコード29",
  "Please remove one of your authorized devices to enable this device.": "このデバイスを有効にするには、認証されたデバイスのうち1つを削除してください。",
  "LICENSE ERROR": "ライセンスエラー",
  "General error acquiring license": "ライセンス取得での一般的なエラー",
  "DRM SERVER ERROR": "DRMサーバーエラー",
  "DRM server error": "DRMサーバーエラー",
  "INVALID ENTITLEMENTS ERROR": "無効な権利エラー",
  "User Entitlement Terminated - Stream No Longer Active for the User": "ユーザー権利が終了しました - このユーザーのストリームはもう有効ではありません",
  "INVALID HEARTBEAT": "無効なハートビート",
  "Invalid heartbeat response": "無効なハートビート応答",
  "INVALID CONTENT": "無効なコンテンツ",
  "INVALID METADATA": "無効なメタデータ",
  "Invalid Metadata": "無効なメタデータ",
  "PLAYBACK ERROR": "再生エラー",
  "Could not play the content": "コンテンツを再生できませんでした",
  "PLAYBACK STREAM ERROR": "ストリーム再生エラー",
  "This video isn't encoded for your device": "このビデオはお使いのデバイスで再生できるようにエンコードされていません",
  "PLAYBACK LIVESTREAM ERROR": "ライブストリーム再生エラー",
  "Live stream is off air": "ライブストリームはオフになっています",
  "PLAYBACK NETWORK ERROR": "再生ネットワークエラー",
  "Network connection temporarily lost": "ネットワークに一時的に接続できませんでした",
  "UNPLAYABLE CONTENT ERROR": "コンテンツ再生不能エラー",
  "This video is not playable on this player": "このビデオはこのプレイヤーでは再生できません",
  "INVALID EXTERNAL ID": "無効な外部 ID",
  "Invalid External ID": "無効な外部 ID",
  "EMPTY CHANNEL ERROR": "空のチャンネルエラー",
  "This channel is empty": "このチャンネルは空です",
  "EMPTY CHANNEL SET ERROR": "空のチャンネルセットエラー",
  "This channel set is empty": "このチャンネルセットは空です",
  "CHANNEL CONTENT ERROR": "チャンネルコンテンツエラー",
  "This channel is not playable at this time": "このチャンネルは現在再生できません",
  "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.": "エラーがあります!ビデオがあるはずです。",
  "(Try Clicking The Discover Button Again On Reload Your Page)": "(ページをリロードして、[検出] ボタンを再度クリックしてください)",
  "Something happened while we were trying to play your video! Click replay or simply reload your page.": "ビデオを再生するときに何らかのエラーが発生しました![リプレイ] をクリックするか、ページを単にリロードしてください。",
  "Language": "言語",
  "Color Selection": "カラーの選択",
  "Caption Opacity": "字幕の不透明度",
  "Font Type": "フォントタイプ",
  "Font Size": "フォントサイズ",
  "Text Enhancements": "テキストの拡張",
  "Text color": "文字の色",
  "Background color": "背景色",
  "Window color": "ウィンドウの色",
  "Transparent": "透明",
  "White": "白",
  "Blue": "青",
  "Magenta": "マゼンタ",
  "Green": "緑",
  "Yellow": "黄",
  "Red": "赤",
  "Cyan": "シアン",
  "Black": "黒",
  "Text opacity": "テキストの不透明度",
  "Background opacity": "背景の不透明度",
  "Window opacity": "ウィンドウの不透明度",
  "Font size": "フォントサイズ",
  "Small": "小",
  "Medium": "普通",
  "Large": "大",
  "Extra Large": "最大",
  "Text enhancement": "テキストの拡張",
  "Uniform": "均一",
  "Depressed": "くぼみ",
  "Raised": "浮かし",
  "Shadow": "影付き",
  "Play": "再生",
  "Replay": "リプレイ",
  "Pause": "一時停止",
  "Mute": "ミュート",
  "Unmute": "ミュート解除",
  "Closed Captions":"クローズドキャプション",
  "Full Screen": "全画面",
  "Exit Full Screen": "全画面表示を終了",
  "More Options": "その他のオプション",
  "Audio": "オーディオ",
  "Subtitles": "サブタイトル",
  "Undefined language": "未定義の言語",
  "No linguistic content": "言語コンテンツなし",
  "Speed": "速度",
  "Normal": "標準"
}

},{}],4:[function(require,module,exports){
module.exports={
  "Connected to": "연결 대상",
  "Learn More" : "자세한 정보",
  "CLOSED CAPTION PREVIEW": "선택 자막 미리보기",
  "Sample Text": "샘플 텍스트",
  "Ad": "광고",
  "Skip Ad": "광고 건너뛰기",
  "LIVE": "라이브",
  "GO LIVE": "라이브 방송 시작하기",
  "CC Options": "자막 옵션",
  "On": "켜기",
  "Off": "끄기",
  "Discovery": "디스커버리",
  "Facebook Unavailable": "Facebook 사용 불가",
  "Facebook Success": "Facebook에서 비디오 시청하기",
  "Twitter Unavailable": "Twitter 사용 불가",
  "Twitter Success": "Twitter에서 비디오 시청하기",
  "Post Title": "게시하기",
  "Account Configure": "장치에 계정을 설정해 주십시오",
  "Discover": "디스커버",
  "Up next": "다음 콘텐츠",
  "Video Quality": "비디오 품질",
  "Share": "공유",
  "Start at": "시작 지점:",
  "Embed": "임베드",
  "Email": "이메일",
  "Check out this video": "당신이 흥미로워할 비디오를 찾았어요! 한 번 보세요: ",
  "To": "받는 사람",
  "Subject": "제목",
  "Message": "메시지",
  "name@email.com": "name@email.com",
  "Optional Message": "옵션 메시지",
  "Send": "보내기",
  "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO": "화면을 다시 불러오거나 다른 비디오를 선택해 보십시오",
  "THIS IS NOT WORKING! :(": "오류가 있어요! :(",
  "NETWORK ERROR": "네트워크 오류",
  "Cannot Contact Server": "서버 연결 불가",
  "SAS ERROR": "SAS 오류",
  "Invalid Authorization Response": "유효하지 않은 권한 응답",
  "SAS GEO ERROR": "SAS 위치 오류",
  "This video is not authorized in your location": "사용자 위치에서 해당 비디오 접근이 허가되지 않습니다",
  "SAS DOMAIN ERROR": "SAS 도메인 오류",
  "This video is not authorized for your domain": "사용자 도메인에서 해당 비디오 접근이 허가되지 않습니다",
  "VIDEO NOT AVAILABLE YET": "아직 비디오 미출시",
  "This video will be available soon": "비디오가 곧 출시됩니다",
  "VIDEO COMING SOON!": "비디오 출시 임박!",
  "This video is not available yet": "아직 비디오가 출시되지 않았습니다",
  "You may need to refresh the page to access the video after it becomes available" : "비디오 출시 후 페이지를 새로 고쳐야 할 수 있습니다",
  "VIDEO NO LONGER AVAILABLE": "비디오 제공 중단",
  "This video is no longer available": "해당 비디오는 더 이상 제공되지 않습니다",
  "SAS DEVICE ERROR": "SAS 장치 오류",
  "This video is not authorized for playback on this device": "해당 장비에서 해당 비디오 재생이 허가되지 않습니다",
  "SAS PROXY ERROR": "SAS 프록시 오류",
  "An anonymous proxy was detected. Please disable the proxy and retry.": "익명 프록시가 감지되었습니다. 프록시를 비활성화하고 재시도하십시오.",
  "CONCURRENT STREAMS NUMBER EXCEEDED": "동시 스트림 제한 초과",
  "You have exceeded the maximum number of concurrent streams": "최대 허용 동시 스트림 수를 초과했습니다",
  "DEVICE BINDING ERROR": "장치 바인딩 오류",
  "Device binding failed": "장치 바인딩에 실패했습니다",
  "DEVICE ID TOO LONG": "장치 ID 너무 김",
  "Device ID is too long": "장치 ID가 너무 깁니다",
  "INVALID PLAYER TOKEN": "유효하지 않은 플레이어 토큰",
  "Invalid Ooyala Player token": "Ooyala Player Token이 유효하지 않습니다",
  "AUTHORIZATION ERROR": "권한 부여 오류",
  "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22": "권한이 부여된 장치 최대 수에 이미 도달하여 이 장치를 이 계정에 등록할 수 없습니다. 오류 코드 22",
  "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29": "이미 최대 수의 장치에 권한이 부여되서 이 콘텐츠에 액세스할 수 없습니다.",
  "Please remove one of your authorized devices to enable this device.": "이 장치를 활성화하려면 권한이 부여된 장치 하나를 제거하세요.",
  "LICENSE ERROR": "라이센스 오류",
  "General error acquiring license": "라이센스 획득 관련 일반 오류입니다",
  "DRM SERVER ERROR": "DRM 서버 오류",
  "DRM server error": "DRM 서버 오류입니다",
  "INVALID ENTITLEMENTS ERROR": "유효하지 않은 자격 오류",
  "User Entitlement Terminated - Stream No Longer Active for the User": "사용자 자격 종료 - 사용자의 스트림이 비활성화되었습니다",
  "INVALID HEARTBEAT": "유효하지 않은 심박동",
  "Invalid heartbeat response": "유효하지 않은 심박동 응답입니다",
  "INVALID CONTENT": "유효하지 않은 콘텐츠",
  "INVALID METADATA": "유효하지 않은 메타데이터",
  "Invalid Metadata": "유효하지 않은 메타데이터입니다",
  "PLAYBACK ERROR": "재생 오류",
  "Could not play the content": "콘텐츠를 재생할 수 없었습니다",
  "PLAYBACK STREAM ERROR": "스트림 재생 오류",
  "This video isn't encoded for your device": "해당 비디오는 장치에 맞게 인코딩되지 않았습니다",
  "PLAYBACK LIVESTREAM ERROR": "라이브스트림 재생 오류",
  "Live stream is off air": "라이브 스트림이 중단되었습니다",
  "PLAYBACK NETWORK ERROR": "네트워크 재생 오류",
  "Network connection temporarily lost": "네트워크 연결이 잠시 끊겼습니다",
  "UNPLAYABLE CONTENT ERROR": "재생 불가 콘텐츠 오류",
  "This video is not playable on this player": "해당 장비에서 해당 비디오가 재생되지 않습니다",
  "INVALID EXTERNAL ID": "유효하지 않은 외부 ID",
  "Invalid External ID": "유효하지 않은 외부 ID입니다",
  "EMPTY CHANNEL ERROR": "빈 채널 오류",
  "This channel is empty": "채널이 비었습니다",
  "EMPTY CHANNEL SET ERROR": "빈 채널 세트 오류",
  "This channel set is empty": "해당 채널 세트가 비었습니다",
  "CHANNEL CONTENT ERROR": "채널 콘텐츠 오류",
  "This channel is not playable at this time": "지금 해당 채널을 재생할 수 없습니다",
  "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.": "뭔가 이상해요! 여기 비디오가 있어야 하는데...",
  "(Try Clicking The Discover Button Again On Reload Your Page)": "(디스커버 버튼을 다시 눌러보거나 페이지를 다시 불러오십시오)",
  "Something happened while we were trying to play your video! Click replay or simply reload your page.": "비디오 재생 중에 오류가 발생했습니다! 리플레이를 클릭하거나 그냥 페이지를 다시 불러오십시오",
  "Language": "언어",
  "Color Selection": "색상 선택",
  "Caption Opacity": "자막 불투명도",
  "Font Type": "글꼴 유형",
  "Font Size": "글꼴 크기",
  "Text Enhancements": "텍스트 향상",
  "Text color": "텍스트 색상",
  "Background color": "배경 색상",
  "Window color": "창 색상",
  "Transparent": "투명",
  "White": "흰색",
  "Blue": "파란색",
  "Magenta": "자홍색",
  "Green": "녹색",
  "Yellow": "노란색",
  "Red": "빨간색",
  "Cyan": "청록색",
  "Black": "검은색",
  "Text opacity": "텍스트 불투명도",
  "Background opacity": "배경 불투명도",
  "Window opacity": "창 불투명도",
  "Font size": "글꼴 크기",
  "Small": "소",
  "Medium": "중",
  "Large": "대",
  "Extra Large": "특대",
  "Text enhancement": "텍스트 향상",
  "Uniform": "균일",
  "Depressed": "음각",
  "Raised": "양각",
  "Shadow": "그림자",
  "Play": "재생",
  "Replay": "리플레이",
  "Pause": "일시 중지",
  "Mute": "음소거",
  "Unmute": "음소거 취소",
  "Closed Captions":"선택 자막",
  "Full Screen": "전체 화면",
  "Exit Full Screen": "전체 화면 나가기",
  "More Options": "추가 옵션",
  "Audio": "오디오",
  "Subtitles": "자막",
  "Undefined language": "정의되지 않은 언어",
  "No linguistic content": "언어 콘텐츠 없음",
  "Speed": "속도",
  "Normal": "보통"
}

},{}],5:[function(require,module,exports){
module.exports={
  "Connected to": "连接到",
  "Learn More" : "了解更多",
  "CLOSED CAPTION PREVIEW": "隐藏式字幕预览",
  "Sample Text": "示例文本",
  "Ad": "广告",
  "Skip Ad": "跳过广告",
  "LIVE": "直播",
  "GO LIVE": "现场直播",
  "CC Options": "字幕选项",
  "On": "开",
  "Off": "关",
  "Discovery": "发现",
  "Facebook Unavailable": "Facebook 不可用",
  "Facebook Success": "在 Facebook 上观看此视频",
  "Twitter Unavailable": "Twitter 不可用",
  "Twitter Success": "在 Twitter 上观看此视频",
  "Post Title": "发布成功",
  "Account Configure": "请在设备上设置您的帐号",
  "Discover": "发现",
  "Up next": "下一个",
  "Video Quality": "视频质量",
  "Share": "分享",
  "Start at": "开始于",
  "Embed": "嵌入的",
  "Email": "电子邮件",
  "Check out this video": "我发现一个您可能会感兴趣的视频！点开看看： ",
  "To": "收件人",
  "Subject": "主题",
  "Message": "消息",
  "name@email.com": "name@email.com",
  "Optional Message": "可选消息",
  "Send": "发送",
  "RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO": "重新加载屏幕或尝试选择其他视频",
  "THIS IS NOT WORKING! :(": "无法正常运作！:(",
  "NETWORK ERROR": "网络错误",
  "Cannot Contact Server": "无法联系服务器",
  "SAS ERROR": "SAS 错误",
  "Invalid Authorization Response": "授权响应无效",
  "SAS GEO ERROR": "SAS 地区错误",
  "This video is not authorized in your location": "此视频未获得您所在地区的授权",
  "SAS DOMAIN ERROR": "SAS 域错误",
  "This video is not authorized for your domain": "此视频未获得您的域授权",
  "VIDEO NOT AVAILABLE YET": "视频尚不能播放",
  "This video will be available soon": "此视频很快即可播放",
  "VIDEO COMING SOON!": "即将推出视频！",
  "This video is not available yet": "此视频尚不能播放",
  "You may need to refresh the page to access the video after it becomes available" : "视频变成可播放后，您可能需要刷新页面以观看该视频",
  "VIDEO NO LONGER AVAILABLE": "视频不再有效",
  "This video is no longer available": "此视频不再有效",
  "SAS DEVICE ERROR": "SAS 设备错误",
  "This video is not authorized for playback on this device": "此视频未获得在此设备上回放的授权",
  "SAS PROXY ERROR": "SAS 代理错误",
  "An anonymous proxy was detected. Please disable the proxy and retry.": "检测到匿名代理。请禁用该代理并重试。",
  "CONCURRENT STREAMS NUMBER EXCEEDED": "超过并发流数",
  "You have exceeded the maximum number of concurrent streams": "您已超过最大并发流数",
  "DEVICE BINDING ERROR": "设备绑定错误",
  "Device binding failed": "设备绑定失败",
  "DEVICE ID TOO LONG": "设备 ID 太长",
  "Device ID is too long": "设备 ID 太长",
  "INVALID PLAYER TOKEN": "播放器标记无效",
  "Invalid Ooyala Player token": "Ooyala 播放器标记无效",
  "AUTHORIZATION ERROR": "授权错误",
  "Unable to register this device to this account, as the maximum number of authorized devices has already been reached. Error Code 22": "无法将此设备注册到该帐号，因为已达到授权设备的最大数量。错误代码 22",
  "Unable to access this content, as the maximum number of devices has already been authorized. Error Code 29": "无法访问此内容，因为授权设备数量已达到最大值。错误代码 29",
  "Please remove one of your authorized devices to enable this device.": "请删除其中一个已授权设备以启用此设备。",
  "LICENSE ERROR": "许可证错误",
  "General error acquiring license": "获得许可证一般错误",
  "DRM SERVER ERROR": "DRM 服务器错误",
  "DRM server error": "DRM 服务器错误",
  "INVALID ENTITLEMENTS ERROR": "无效权限错误",
  "User Entitlement Terminated - Stream No Longer Active for the User": "用户权限已终止 - 流对该用户不再有效",
  "INVALID HEARTBEAT": "心跳无效",
  "Invalid heartbeat response": "心跳响应无效",
  "INVALID CONTENT": "内容无效",
  "INVALID METADATA": "元数据无效",
  "Invalid Metadata": "元数据无效",
  "PLAYBACK ERROR": "回放错误",
  "Could not play the content": "无法播放内容",
  "PLAYBACK STREAM ERROR": "回放流错误",
  "This video isn't encoded for your device": "此视频未针对您的设备进行编码",
  "PLAYBACK LIVESTREAM ERROR": "回放直播流错误",
  "Live stream is off air": "直播流已停播",
  "PLAYBACK NETWORK ERROR": "回放网络错误",
  "Network connection temporarily lost": "网络连接暂时中断",
  "UNPLAYABLE CONTENT ERROR": "不可播放的内容错误",
  "This video is not playable on this player": "此视频不能在此播放器上播放",
  "INVALID EXTERNAL ID": "外部 ID 无效",
  "Invalid External ID": "外部 ID 无效",
  "EMPTY CHANNEL ERROR": "空白通道错误",
  "This channel is empty": "此通道为空",
  "EMPTY CHANNEL SET ERROR": "空白通道集错误",
  "This channel set is empty": "此通道集为空",
  "CHANNEL CONTENT ERROR": "通道内容错误",
  "This channel is not playable at this time": "当前此通道不可播放",
  "SOMETHING NOT RIGHT! THERE SHOULD BE VIDEOS HERE.": "出错了！此处应有视频。",
  "(Try Clicking The Discover Button Again On Reload Your Page)": "（尝试再次单击“发现”按钮或重新加载页面）",
  "Something happened while we were trying to play your video! Click replay or simply reload your page.": "尝试播放您的视频时发生问题！单击重新播放或只是重新加载页面。",
  "Language": "语言",
  "Color Selection": "颜色选择",
  "Caption Opacity": "字幕不透明度",
  "Font Type": "字体类型",
  "Font Size": "字体大小",
  "Text Enhancements": "文本增强",
  "Text color": "文本颜色",
  "Background color": "背景颜色",
  "Window color": "窗口颜色",
  "Transparent": "透明",
  "White": "白色",
  "Blue": "蓝色",
  "Magenta": "品红",
  "Green": "绿色",
  "Yellow": "黄色",
  "Red": "红色",
  "Cyan": "青色",
  "Black": "黑色",
  "Text opacity": "文本不透明度",
  "Background opacity": "背景不透明度",
  "Window opacity": "窗口不透明度",
  "Font size": "字体大小",
  "Small": "小",
  "Medium": "中",
  "Large": "大",
  "Extra Large": "超大",
  "Text enhancement": "文本增强",
  "Uniform": "均匀",
  "Depressed": "凹陷",
  "Raised": "凸起",
  "Shadow": "阴影",
  "Play": "播放",
  "Replay": "重播",
  "Pause": "暂停",
  "Mute": "静音",
  "Unmute": "取消静音",
  "Closed Captions":"隐藏式字幕",
  "Full Screen": "全屏",
  "Exit Full Screen": "退出全屏",
  "More Options": "更多选项",
  "Audio": "音频",
  "Subtitles": "字幕",
  "Undefined language": "未定义语言",
  "No linguistic content": "没有语言内容",
  "Speed": "速度",
  "Normal": "正常"
}

},{}],6:[function(require,module,exports){
module.exports={
  "general": {
    "watermark": {"imageResource": {"url": "","androidResource" : "logo","iosResource" : "logo"  },
                  "position": "bottomRight",
                  "clickUrl": "",
                  "target": "_blank",
                  "transparency": 1,
                  "scalingOption": "default",
                  "scalingPercentage": 20
    },
    "bufferingSpinnerDelay": 750,
    "loadingImage": {"imageResource": {"url": "//player.ooyala.com/static/v4/candidate/latest/skin-plugin/assets/images/loader_svg.svg" } },
    "accentColor":"#448aff"
  },
  "localization": {
    "defaultLanguage": "en",
    "availableLanguageFile": [
      {
        "language": "en",
        "languageFile": "",
        "androidResource": "skin-config/languageFiles/en.json",
        "iosResource": "en"
      },
      {
        "language": "es",
        "languageFile": "",
        "androidResource": "skin-config/languageFiles/es.json",
        "iosResource": "es"
      },
      {
        "language": "zh",
        "languageFile": "",
        "androidResource": "skin-config/languageFiles/zh.json",
        "iosResource": "zh"
      },
      {
        "language": "ja",
        "languageFile": "",
        "androidResource": "skin-config/languageFiles/ja.json",
        "iosResource": "ja"
      },
      {
        "language": "ko",
        "languageFile": "",
        "androidResource": "skin-config/languageFiles/ko.json",
        "iosResource": "ko"
      }
    ]
  },
  "languageDirections": {
    "ar": "rtl",
    "dv": "rtl",
    "he": "rtl",
    "fa": "rtl",
    "ks": "rtl",
    "ku": "rtl",
    "pa": "rtl",
    "ps": "rtl",
    "sd": "rtl",
    "tk": "rtl",
    "ug": "rtl",
    "ur": "rtl",
    "yi": "rtl"
  },
  "responsive": {
    "breakpoints": {
      "audio-only-xs": {"id": "audio-only-xs", "name": "oo-xsmall", "multiplier": 0.7},
      "xs": {"id": "xs", "name": "oo-xsmall", "maxWidth": 559, "multiplier": 0.7},
      "sm": {"id": "sm", "name": "oo-small", "minWidth": 560, "maxWidth": 839, "multiplier": 1},
      "md": {"id": "md", "name": "oo-medium", "minWidth": 840, "maxWidth": 1279, "multiplier": 1},
      "lg": {"id": "lg", "name": "oo-large", "minWidth": 1280, "multiplier": 1.2}
    },
    "aspectRatio": "auto"
  },
  "startScreen": {
    "promoImageSize": "default",
    "showPlayButton": true,
    "playButtonPosition": "center",
    "playIconStyle": {
      "color": "white",
      "opacity": 1
    },
    "showTitle": false,
    "showDescription": false,
    "titleFont": {
      "color": "white"
    },
    "descriptionFont": {
      "color": "white"
    },
    "infoPanelPosition": "topLeft",
    "showPromo": false
  },
  "pauseScreen": {
    "showPauseIcon": true,
    "pauseIconPosition": "center",
    "PauseIconStyle": {
      "color": "white",
      "opacity": 1
    },
    "showTitle": false,
    "showDescription": false,
    "infoPanelPosition": "topLeft",
    "screenToShowOnPause": "default"
  },
  "endScreen": {
    "screenToShowOnEnd": "discovery",
    "showReplayButton": true,
    "replayIconStyle": {
      "color": "white",
      "opacity": 1
    },
    "showTitle": false,
    "showDescription": false,
    "infoPanelPosition": "topLeft"
  },
  "adScreen": {
    "showAdMarquee": true,
    "showAdCountDown": true,
    "showControlBar": false
  },
  "discoveryScreen": {
    "panelTitle": {
      "titleFont": {
        "fontFamily": "Roboto Condensed",
        "color": "white"
      }
    },
    "contentTitle": {
      "show": false,
      "font": {
        "fontFamily": "Roboto Condensed",
        "color": "white"
      }
    },
    "showCountDownTimerOnEndScreen": true,
    "countDownTime": 10
  },
  "moreOptionsScreen": {
    "brightOpacity": 1.0,
    "darkOpacity": 0.4,
    "iconSize": 30,
    "color": "white",
    "iconStyle": {
      "active": {
        "color": "#FFFFFF",
        "opacity": 1.0
      },
      "inactive": {
        "color": "#FFFFFF",
        "opacity": 0.95
      }
    }
  },
  "closedCaptionOptions": {
    "enabled": false,
    "language": "en",
    "textColor": "White",
    "windowColor": "Transparent",
    "backgroundColor": "Black",
    "textOpacity": 1,
    "backgroundOpacity": 0.6,
    "windowOpacity": 0,
    "fontType": "Proportional Sans-Serif",
    "fontSize": "Medium",
    "textEnhancement": "Uniform"
  },
  "upNext": {
    "showUpNext": false,
    "timeToShow": 10
  },
  "playbackSpeed": {
    "options": [ 0.5, 0.75, 1, 1.25, 1.5, 2 ]
  },
  "skipControls": {
    "enabled": false,
    "skipBackwardTime": 10,
    "skipForwardTime": 10,
    "buttons": {
      "previousVideo": {
        "enabled": true,
        "index": 1
      },
      "skipBackward": {
        "enabled": true,
        "index": 2
      },
      "skipForward": {
        "enabled": true,
        "index": 3
      },
      "nextVideo": {
        "enabled": true,
        "index": 4
      }
    },
    "controlBarSkipControls": {
      "previousVideo": {
        "enabled": true,
        "index": 1
      },
      "skipBackward": {
        "enabled": true,
        "index": 2
      },
      "playPause": {
        "enabled": true,
        "index": 3
      },
      "skipForward": {
        "enabled": true,
        "index": 4
      },
      "nextVideo": {
        "enabled": true,
        "index": 5
      }
    }
  },
  "controlBar": {
    "enabled": true,
    "volumeControl": {
      "color": ""
    },
    "iconStyle": {
      "active": {
        "color": "#FFFFFF",
        "opacity": 1.0
      },
      "inactive": {
        "color": "#FFFFFF",
        "opacity": 0.95
      }
    },
    "autoHide": true,
    "height": 90,
    "logo": {
      "imageResource": {"url": "","androidResource": "logo","iosResource": "logo"},
      "clickUrl": "http://www.ooyala.com",
      "target": "_blank",
      "width": 96,
      "height": 24
    },
    "adScrubberBar": {
      "backgroundColor": "rgba(175,175,175,1)",
      "bufferedColor": "rgba(127,127,127,1)",
      "playedColor": "rgba(255,63,128,1)",
      "scrubberHandleColor": "rgba(67,137,255,1)",
      "scrubberHandleBorderColor": "rgba(255,255,255,1)"
    },
    "scrubberBar": {
      "backgroundColor": "rgba(175,175,175,0.5)",
      "bufferedColor": "rgba(175,175,175,0.7)",
      "playedColor": "",
      "scrubberHandleColor": "rgba(67,137,255,1)",
      "scrubberHandleBorderColor": "rgba(255,255,255,1)",
      "thumbnailPreview": true
    },
    "tooltips":{
      "enabled":false
    },
    "qualitySelection":{
      "format": "bitrate"
    }
  },
  "live": {
    "forceDvrDisabled": false
  },
  "isVrAnimationEnabled": {
    "vrNotification": true,
    "vrIcon": false
  },
  "audio": {
    "audioLanguage": "none"
  },
  "animationDurations": {
    "vrNotification": 5,
    "vrIcon": 4
  },
  "buttons": {
    "desktopContent": [
      {"name":"playPause", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 },
      {"name":"playbackSpeed", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 },
      {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":240 },
      {"name":"timeDuration", "location":"controlBar", "whenDoesNotFit":"drop", "minWidth":145 },
      {"name":"flexibleSpace", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":1 },
      {"name":"closedCaption", "location":"controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":45 },
      {"name":"fullscreen", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 },
    ],
    "desktopAd": [
      {"name":"playPause", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 },
      {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":240 },
      {"name":"flexibleSpace", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":1 },
      {"name":"logo", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":125 },
      {"name":"fullscreen", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 },
      {"name":"moreOptions", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45 }
    ],
    "mobileContent": [
      {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":28 },
      {"name":"live", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":45},
      {"name":"timeDuration", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":60 },
      {"name":"flexibleSpace", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":1 },
      {"name":"chromecast", "location": "controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"airPlay", "location": "controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"share", "location":"moreOptions" },
      {"name":"discovery", "location":"moreOptions" },
      {"name":"closedCaption", "location":"moreOptions" },
      {"name":"stereoscopic", "location":"controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"audioAndCC", "location": "controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"fullscreen", "location":"controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"moreOptions", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":28 }
    ],
    "mobileAd": [
      {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":28 },
      {"name":"flexibleSpace", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":1 },
      {"name":"fullscreen", "location":"controlBar", "whenDoesNotFit":"moveToMoreOptions", "minWidth":28 },
      {"name":"moreOptions", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":28 }
    ],
    "audioOnly": {
      "desktop": [
        {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":200 },
        {"name":"skipControls", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":200 },
        {"name":"moreOptions", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":50 },
        {"name":"share", "location":"moreOptions" },
        {"name":"playbackSpeed", "location":"moreOptions" }
      ],
      "mobile": [
        {"name":"volume", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":60 },
        {"name":"seekBackwards", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":60 },
        {"name":"playPause", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":60 },
        {"name":"seekForward", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":60 },
        {"name":"moreOptions", "location":"controlBar", "whenDoesNotFit":"keep", "minWidth":50 },
        {"name":"share", "location":"moreOptions" },
        {"name":"playbackSpeed", "location":"moreOptions" }
      ]
    }
  },
  "icons": {
    "play": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u003e", "fontStyleClass": "oo-icon oo-icon-play-slick"},
    "pause": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0067", "fontStyleClass": "oo-icon oo-icon-pause-slick"},
    "volume": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0062", "fontStyleClass": "oo-icon oo-icon-volume-on-ooyala-default"},
    "volumeOff": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0070", "fontStyleClass": "oo-icon oo-icon-volume-mute-ooyala-default"},
    "expand": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0069", "fontStyleClass": "oo-icon oo-icon-system-fullscreen"},
    "compress": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006a", "fontStyleClass": "oo-icon oo-icon-system-minimizescreen"},
    "ellipsis": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0066", "fontStyleClass": "oo-icon oo-icon-system-menu"},
    "replay": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0063", "fontStyleClass": "oo-icon oo-icon-system-replay"},
    "next": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0044", "fontStyleClass": "oo-icon oo-icon-next"},
    "previous": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u003c", "fontStyleClass": "oo-icon oo-icon-previous"},
    "forward": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0028", "fontStyleClass": "oo-icon oo-icon-forward"},
    "share": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006f", "fontStyleClass": "oo-icon oo-icon-share"},
    "cc": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006B", "fontStyleClass": "oo-icon oo-icon-cc"},
    "stereoscopic": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0057", "fontStyleClass": "oo-icon"},
    "discovery": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006C", "fontStyleClass": "oo-icon oo-icon-discovery-binoculars"},
    "quality": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006D", "fontStyleClass": "oo-icon oo-icon-bitrate"},
    "setting": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u006E", "fontStyleClass": "oo-icon oo-icon-system-settings"},
    "dismiss": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0065", "fontStyleClass": "oo-icon oo-icon-system-close"},
    "toggleOn": {"fontFamilyName": "fontawesome", "fontString": "\uf205", "fontStyleClass": ""},
    "toggleOff": {"fontFamilyName": "fontawesome", "fontString": "\uf204", "fontStyleClass": ""},
    "left": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0072", "fontStyleClass": "oo-icon oo-icon-system-left-arrow"},
    "right": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0073", "fontStyleClass": "oo-icon oo-icon-system-right-arrow"},
    "learn": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0074", "fontStyleClass": "oo-icon oo-icon-system-more-information"},
    "skip": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0075", "fontStyleClass": "oo-icon oo-icon-skip-slick"},
    "warning": {"fontFamilyName": "fontawesome", "fontString": "\uf06a", "fontStyleClass": ""},
    "auto": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0064", "fontStyleClass": "oo-icon oo-icon-system-auto"},
    "arrowsBlack": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0052", "fontStyleClass": "oo-icon"},
    "arrowsWhite": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0052", "fontStyleClass": "oo-icon"},
    "circleArrowsBlack": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u005D", "fontStyleClass": "oo-icon"},
    "circleArrowsWhite": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u005D", "fontStyleClass": "oo-icon"},
    "stereoOn": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0057", "fontStyleClass": "oo-icon oo-icon-system-auto"},
    "stereoOff": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0057", "fontStyleClass": "oo-icon oo-icon-system-auto"},
    "vrIcon": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0059", "fontStyleClass": "oo-icon"},
    "audioAndCC": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u005F", "fontStyleClass": "oo-icon oo-icon-audio-and-cc"},
    "selected": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u0040", "fontStyleClass": "oo-icon oo-icon-selected"},
    "chromecast-connected": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u003B", "fontStyleClass": "oo-icon"},
    "chromecast-disconnected": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u003A", "fontStyleClass": "oo-icon"},
    "airPlay-connected": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u007C", "fontStyleClass": "oo-icon"},
    "airPlay-disconnected": {"fontFamilyName": "ooyala-slick-type", "fontString": "\u007B", "fontStyleClass": "oo-icon"}
  }
}

},{}],7:[function(require,module,exports){
"use strict";

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrapper that adds accessibility controls tracking
 * @param {Object} controller - the global state controller
 */
function AccessibilityControls(controller) {
  this.controller = controller;
  this.vrRotationAllowed = true; // flag for checking repeat of keyDown

  this.keyDirectionMap = {};
  this.keyDirectionMap[_constants.default.KEYCODES.A] = _constants.default.DIRECTIONS.LEFT;
  this.keyDirectionMap[_constants.default.KEYCODES.D] = _constants.default.DIRECTIONS.RIGHT;
  this.keyDirectionMap[_constants.default.KEYCODES.W] = _constants.default.DIRECTIONS.UP;
  this.keyDirectionMap[_constants.default.KEYCODES.S] = _constants.default.DIRECTIONS.DOWN;
  this.state = {
    seekRate: 1,
    lastKeyDownTime: 0
  };
  this.prevKeyPressedArr = []; // list of codes of pressed buttons

  this.keyEventDown = this.keyEventDown.bind(this);
  this.keyEventUp = this.keyEventUp.bind(this);
  this.moveVrToDirection = this.moveVrToDirection.bind(this);
  this.getTargetTagName = this.getTargetTagName.bind(this);
  document.addEventListener('keydown', this.keyEventDown);
  document.addEventListener('keyup', this.keyEventUp);
}

AccessibilityControls.prototype = {
  SEEK_RATE: {
    // Factor by which the seeking rate is increased
    INCREASE: 1.1,
    // Maximum allowed value of seeking rate
    MAXIMUM: 300,
    // Calling getSeekRate() with a frequency below this threshold
    // will result in a seek rate increase
    TIME_THRESHOLD: 500
  },
  cleanUp: function cleanUp() {
    document.removeEventListener('keydown', this.keyEventDown);
    document.removeEventListener('keyup', this.keyEventUp);
  },
  keyEventDown: function keyEventDown(event) {
    if (!this.controller.state.accessibilityControlsEnabled) {
      return;
    }

    var targetTagName = this.getTargetTagName(event);
    var charCode = event.which || event.keyCode;

    if (this.controller.videoVr) {
      this.moveVrToDirection(event, charCode, true, targetTagName); // start rotate 360
    }

    switch (charCode) {
      case _constants.default.KEYCODES.SPACE_KEY:
        // We override the default behavior when the target element is a button (pressing
        // the spacebar on a button should activate it).
        // Note that this is not a comprehensive fix for all clickable elements, this is
        // mostly meant to enable keyboard navigation on control bar elements.
        if (targetTagName !== 'button') {
          event.preventDefault();
          this.controller.togglePlayPause(event);
        }

        break;

      case _constants.default.KEYCODES.UP_ARROW_KEY:
      case _constants.default.KEYCODES.DOWN_ARROW_KEY:
        if (this.areArrowKeysAllowed()) {
          event.preventDefault();
          var increase = charCode === _constants.default.KEYCODES.UP_ARROW_KEY;
          this.changeVolumeBy(_constants.default.A11Y_CTRLS.VOLUME_CHANGE_DELTA, increase);
        }

        break;

      case _constants.default.KEYCODES.LEFT_ARROW_KEY:
      case _constants.default.KEYCODES.RIGHT_ARROW_KEY:
        if (this.areArrowKeysAllowed()) {
          event.preventDefault();
          var forward = event.keyCode === _constants.default.KEYCODES.RIGHT_ARROW_KEY;

          var skinConfig = _utils.default.getPropertyValue(this.controller, 'skin.props.skinConfig');

          var skipTimes = _utils.default.getSkipTimes(skinConfig);

          var delta = forward ? skipTimes.forward : skipTimes.backward;
          this.seekBy(delta, forward, true);
        }

        break;

      default:
        break;
    }
  },

  /**
   * Determines whether arrow key shortcuts should be active. Arrow key shortcuts
   * should be disabled whenever an element that allows arrow key interaction has focus.
   * Please note that this doesn't cover all possible cases at the moment, only
   * roles that are in use in this project have been added so far.
   * @private
   * @returns {Boolean} True if arrow key shortcuts are allowed, false otherwise.
   */
  areArrowKeysAllowed: function areArrowKeysAllowed() {
    var activeElementRole = '';

    if (document.activeElement) {
      activeElementRole = document.activeElement.getAttribute('role');
    }

    switch (activeElementRole) {
      case _constants.default.ARIA_ROLES.SLIDER:
      case _constants.default.ARIA_ROLES.MENU_ITEM:
      case _constants.default.ARIA_ROLES.MENU_ITEM_RADIO:
      case _constants.default.ARIA_ROLES.MENU_ITEM_CHECKBOX:
        return false;

      default:
        return true;
    }
  },

  /**
   * @description handlers for keyup event
   * @private
   * @param {Event} event - event
   */
  keyEventUp: function keyEventUp(event) {
    if (!(this.controller.state.accessibilityControlsEnabled || this.controller.state.isClickedOutside)) {
      return;
    }

    if (this.controller.videoVr) {
      var targetTagName = this.getTargetTagName(event);
      var charCode = event.which || event.keyCode;
      this.moveVrToDirection(event, charCode, false, targetTagName); // stop rotate 360
    }
  },

  /**
   * @description get name of target tag, for example "button" etc
   * @private
   * @param {Event} event - event
   * @returns {string} name of the target tag
   */
  getTargetTagName: function getTargetTagName(event) {
    var targetTagName = '';

    if (event.target && typeof event.target.tagName === 'string') {
      targetTagName = event.target.tagName.toLowerCase();
    }

    return targetTagName;
  },

  /**
   * @description call moveVrToDirection from controller for rotation a vr video
   * @private
   * @param {Event} event - event
   * @param {number} charCode - char code;
   * @param {boolean} isKeyDown - true if key is pressed
   * @param {string} targetTagName - name of the clicked tag
   * @returns {boolean} true if moved
   */
  moveVrToDirection: function moveVrToDirection(event, charCode, isKeyDown, targetTagName) {
    var keyDirectionMap = this.keyDirectionMap;

    if (!(this.controller.videoVr || keyDirectionMap[charCode] || targetTagName !== 'button')) {
      return false;
    }

    if (event.repeat !== undefined) {
      this.vrRotationAllowed = !event.repeat;
    }

    if (!this.vrRotationAllowed) {
      return false;
    }

    this.vrRotationAllowed = !isKeyDown; // prevent repeat of keyDown

    this.controller.moveVrToDirection(false, keyDirectionMap[charCode]); // stop rotation if isKeyDown === false or prevent prev rotation if press a button (isKeyDown === true)

    if (isKeyDown === true) {
      var newBtn = this.prevKeyPressedArr.some(function (address) {
        return address === charCode;
      });

      if (newBtn) {
        this.prevKeyPressedArr.push(charCode);
      }
    } else {
      var inPrevKeyPressedArrIndex = this.prevKeyPressedArr.findIndex(function (address) {
        return address === charCode;
      });

      if (inPrevKeyPressedArrIndex > -1) {
        this.prevKeyPressedArr.splice(inPrevKeyPressedArrIndex, 1);
      }
    }

    if (this.prevKeyPressedArr.length) {
      isKeyDown = true; // eslint-disable-line

      charCode = this.prevKeyPressedArr[this.prevKeyPressedArr.length - 1]; // eslint-disable-line
    } // rotate if a button is pressed, stop rotate if other case


    this.controller.moveVrToDirection(isKeyDown, keyDirectionMap[charCode]);
    return isKeyDown;
  },

  /**
   * Increases or decreases the player volume by the specified percentage. Values beyond
   * the minimum or maximum will be constrained to appropriate values.
   * @public
   * @param {Number} percent A value from 0 to 100 that indicates how much to increase or decrease the volume.
   * @param {Boolean} increase True for volume increase, false for descrease.
   */
  changeVolumeBy: function changeVolumeBy(percent, increase) {
    var percentsMax = 100;

    var delta = _utils.default.constrainToRange(percent, 0, percentsMax);

    if (delta) {
      var volume = 0;

      var currentVolume = _utils.default.ensureNumber(this.controller.state.volumeState.volume, 0);

      var currentVolumePercent = currentVolume * percentsMax;

      if (increase) {
        volume = _utils.default.constrainToRange(currentVolumePercent + delta, 0, percentsMax) / percentsMax;
      } else {
        volume = _utils.default.constrainToRange(currentVolumePercent - delta, 0, percentsMax) / percentsMax;
      }

      if (volume !== currentVolume) {
        this.controller.setVolume(volume);
      }
    }
  },

  /**
   * Determines whether or not the controller is in a state that allows seeking the video.
   * @private
   * @returns {Boolean} True if seeking is possible, false otherwise.
   */
  canSeek: function canSeek() {
    var seekingEnabled;

    switch (this.controller.state.screenToShow) {
      case _constants.default.SCREEN.PLAYING_SCREEN:
      case _constants.default.SCREEN.PAUSE_SCREEN:
      case _constants.default.SCREEN.END_SCREEN:
        seekingEnabled = !this.controller.state.isPlayingAd;
        break;

      default:
        seekingEnabled = false;
        break;
    }

    return seekingEnabled;
  },

  /**
   * Seeks the video by the specified number of seconds. The direction of the playhead
   * can be specified with the forward parameter. If a value exceeds the minimum or maximum
   * seekable range it will be constrained to appropriate values. By default, the seeking rate
   * (i.e. amount of seconds) will increase automatically when this function is called repeatedly
   * (e.g. when the user holds down the arrow key).
   * @public
   * @param {Number} seconds The number of seconds to increase or decrease relative to the current playhead.
   * @param {Boolean} forward True to seek forward, false to seek backward.
   * @param {Boolean} useConstantRate Determines whether or not the seeking rate is kept constant when the method is called repeatedly.
   */
  seekBy: function seekBy(seconds, forward, useConstantRate) {
    if (!this.canSeek()) {
      return;
    }

    var shiftSeconds = _utils.default.ensureNumber(seconds, 1);

    var shiftSign = forward ? 1 : -1; // Positive 1 for fast forward, negative for rewind

    var seekRate = 1;

    if (!useConstantRate) {
      seekRate = this.getSeekRate();
    } // Calculate the new playhead


    var delta = shiftSeconds * shiftSign * seekRate;
    var seekTo = _utils.default.ensureNumber(this.controller.skin.state.currentPlayhead, 0) + delta;
    seekTo = _utils.default.constrainToRange(seekTo, 0, this.controller.skin.state.duration); // Refresh UI and then instruct the player to seek

    this.controller.updateSeekingPlayhead(seekTo);
    this.controller.seek(seekTo);
  },

  /**
   * Linearly increases the seeking rate every time that the function is called
   * within a certain time threshold. The seeking rate is reset when the last time
   * the function was called exceeds the time threshold.
   * @public
   * @returns {Number} A number between 1 and this.SEEK_RATE.MAXIMUM which represents the current seeking rate.
   */
  getSeekRate: function getSeekRate() {
    var currentTime = Date.now();
    var timeSinceLastSeek = currentTime - this.state.lastKeyDownTime;

    if (timeSinceLastSeek < this.SEEK_RATE.TIME_THRESHOLD) {
      // Increasing seek rate to go faster if key is pressed often
      if (this.state.seekRate < this.SEEK_RATE.MAXIMUM) {
        this.state.seekRate *= this.SEEK_RATE.INCREASE;
      }
    } else {
      this.state.seekRate = 1;
    }

    this.state.lastKeyDownTime = currentTime;
    return this.state.seekRate;
  }
};
module.exports = AccessibilityControls;

},{"../constants/constants":69,"./utils":63}],8:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The button that satisfies to accessibility requirements
 */
var AccessibleButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AccessibleButton, _React$Component);

  function AccessibleButton(props) {
    var _this;

    _classCallCheck(this, AccessibleButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccessibleButton).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
      switch (event.key) {
        case _constants.default.KEY_VALUES.SPACE:
        case _constants.default.KEY_VALUES.ENTER: // Ctrl and Alt are needed as a workaround for VoiceOver, which uses the
        // CTRL + OPTION + SPACE combination to activate buttons. VoiceOver actually
        // suppresses the spacebar keyboard event when this combination is used, so we
        // can only detect either CTRL or OPTION. This can obviously fail if the user
        // presses a different key after CTRL + OPTION, but a false positive is preferred.

        case _constants.default.KEY_VALUES.CONTROL: // eslint-disable-line

        case _constants.default.KEY_VALUES.ALT:
          _this.triggeredWithKeyboard = true;
          break;

        default:
          break;
      }

      var onKeyDown = _this.props.onKeyDown;

      if (typeof onKeyDown === 'function') {
        onKeyDown(event);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseUp", function (event) {
      _utils.default.blurOnMouseUp(event);

      var onMouseUp = _this.props.onMouseUp;

      if (typeof onMouseUp === 'function') {
        onMouseUp(event);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "wasTriggeredWithKeyboard", function (triggeredWithKeyboard) {
      if (typeof triggeredWithKeyboard !== 'undefined') {
        _this.triggeredWithKeyboard = !!triggeredWithKeyboard;
      }

      return _this.triggeredWithKeyboard;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focus", function () {
      if (_this.domElement && typeof _this.domElement.focus === 'function') {
        _this.domElement.focus();
      }
    });

    _this.triggeredWithKeyboard = false;
    return _this;
  }

  _createClass(AccessibleButton, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;

      if (autoFocus) {
        this.focus();
      }
    }
    /**
     * Focus on element in case of new props
     * @param {Object} prevProps – prevProps
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var autoFocus = this.props.autoFocus;
      var prevAutoFocus = prevProps ? prevProps.autoFocus : false;

      if (!prevAutoFocus && autoFocus) {
        this.focus();
      }
    }
    /**
     * Fires when a key is pressed on the button.
     * @private
     * @param {type} event The keydown event object.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          children = _this$props.children,
          style = _this$props.style,
          className = _this$props.className,
          focusId = _this$props.focusId,
          ariaLabel = _this$props.ariaLabel,
          ariaChecked = _this$props.ariaChecked,
          ariaSelected = _this$props.ariaSelected,
          ariaHasPopup = _this$props.ariaHasPopup,
          ariaExpanded = _this$props.ariaExpanded,
          role = _this$props.role,
          disabled = _this$props.disabled,
          onKeyUp = _this$props.onKeyUp,
          onMouseDown = _this$props.onMouseDown,
          onMouseOver = _this$props.onMouseOver,
          onMouseOut = _this$props.onMouseOut,
          onMouseEnter = _this$props.onMouseEnter,
          onMouseLeave = _this$props.onMouseLeave,
          onFocus = _this$props.onFocus,
          onClick = _this$props.onClick,
          onTouchStart = _this$props.onTouchStart,
          onTouchEnd = _this$props.onTouchEnd;
      return _react.default.createElement("button", {
        // eslint-disable-line
        ref: function ref(event) {
          _this2.domElement = event;
        },
        type: "button",
        autoFocus: autoFocus // eslint-disable-line
        ,
        style: style,
        className: (0, _classnames.default)(className, 'oo-focusable-btn'),
        tabIndex: "0",
        "data-focus-id": focusId,
        "aria-label": ariaLabel,
        "aria-checked": ariaChecked,
        "aria-selected": ariaSelected,
        "aria-haspopup": ariaHasPopup,
        "aria-expanded": ariaExpanded,
        role: role,
        disabled: disabled,
        onKeyDown: this.onKeyDown,
        onKeyUp: onKeyUp,
        onMouseDown: onMouseDown,
        onMouseUp: this.onMouseUp,
        onMouseOver: onMouseOver,
        onMouseOut: onMouseOut,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onTouchStart: onTouchStart,
        onTouchEnd: onTouchEnd,
        onFocus: onFocus,
        onClick: onClick
      }, children);
    }
  }]);

  return AccessibleButton;
}(_react.default.Component);

AccessibleButton.propTypes = {
  autoFocus: _propTypes.default.bool,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),
  style: _propTypes.default.shape({}),
  className: _propTypes.default.string,
  focusId: _propTypes.default.string,
  ariaLabel: _propTypes.default.string.isRequired,
  ariaChecked: _propTypes.default.bool,
  ariaSelected: _propTypes.default.bool,
  ariaHasPopup: _propTypes.default.bool,
  ariaExpanded: _propTypes.default.bool,
  role: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  onKeyDown: _propTypes.default.func,
  onKeyUp: _propTypes.default.func,
  onMouseDown: _propTypes.default.func,
  onMouseUp: _propTypes.default.func,
  onMouseOver: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  onClick: _propTypes.default.func,
  onTouchStart: _propTypes.default.func,
  onTouchEnd: _propTypes.default.func
}; // Define focusId as a getter so that it returns a different value
// for each instance of AccessibleButton (defaultProps is static)

var hashLength = 36;
var sliceStart = 2;
var sliceEnd = 10;
AccessibleButton.defaultProps = Object.create({}, {
  focusId: {
    enumerable: true,
    get: function get() {
      return Math.random().toString(hashLength).substr(sliceStart, sliceEnd);
    }
  }
});
AccessibleButton.defaultProps.children = [];
AccessibleButton.defaultProps.autoFocus = false;
AccessibleButton.defaultProps.ariaChecked = null;
AccessibleButton.defaultProps.ariaSelected = null;
AccessibleButton.defaultProps.ariaHasPopup = null;
AccessibleButton.defaultProps.ariaExpanded = null;
AccessibleButton.defaultProps.role = null;
module.exports = AccessibleButton;

},{"../constants/constants":69,"./utils":63,"classnames":86,"prop-types":370,"react":378}],9:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _closeButton = _interopRequireDefault(require("./closeButton"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The overlay with advertising
 */
var AdOverlay =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AdOverlay, _React$Component);

  function AdOverlay() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, AdOverlay);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdOverlay)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closeOverlay", function () {
      var controller = _this.props.controller;
      controller.closeNonlinearAd();
      controller.onSkipAdClicked();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleOverlayClick", function () {
      var controller = _this.props.controller;
      controller.onAdsClicked(_constants.default.AD_CLICK_SOURCE.OVERLAY);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "overlayLoaded", function () {
      var _this$props = _this.props,
          controller = _this$props.controller,
          showOverlay = _this$props.showOverlay,
          overlay = _this$props.overlay;

      if (overlay && showOverlay) {
        controller.onAdOverlayLoaded();
      }
    });

    return _this;
  }

  _createClass(AdOverlay, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          showOverlay = _this$props2.showOverlay,
          overlay = _this$props2.overlay,
          showOverlayCloseButton = _this$props2.showOverlayCloseButton;
      var adOverlayClass = (0, _classnames.default)({
        'oo-ad-overlay': true,
        'oo-hidden': !overlay && showOverlay
      });
      var closeButtonClass = (0, _classnames.default)({
        'oo-ad-overlay-close-button': true,
        'oo-hidden': !showOverlayCloseButton
      });
      return _react.default.createElement("div", {
        className: adOverlayClass
      }, _react.default.createElement("a", {
        // eslint-disable-line
        onClick: this.handleOverlayClick,
        role: "button"
      }, _react.default.createElement("img", {
        src: overlay,
        className: "oo-ad-overlay-image",
        onLoad: this.overlayLoaded,
        alt: "Overlay"
      })), _react.default.createElement(_closeButton.default, _extends({}, this.props, {
        cssClass: closeButtonClass,
        closeAction: this.closeOverlay,
        className: "oo-ad-overlay-close-button-icon",
        ref: "adOverlayCloseButton" // eslint-disable-line

      })));
    }
  }]);

  return AdOverlay;
}(_react.default.Component);

module.exports = AdOverlay;

},{"../constants/constants":69,"./closeButton":13,"classnames":86,"react":378}],10:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("./utils"));

var _icon = _interopRequireDefault(require("./icon"));

var _adPanelTopBarItem = _interopRequireDefault(require("./adPanelTopBarItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Representation of ad panel
 */
var AdPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AdPanel, _React$Component);

  function AdPanel(props) {
    var _this;

    _classCallCheck(this, AdPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSkipAdButtonClick", function () {
      var controller = _this.props.controller;
      controller.onSkipAdClicked();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLearnMoreButtonClick", function () {
      var controller = _this.props.controller;
      controller.onAdsClicked(_constants.default.AD_CLICK_SOURCE.LEARN_MORE_BUTTON);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleAdTopBarClick", function (event) {
      if (event.type === 'touchend' || !_this.isMobile) {
        // since mobile would fire both click and touched events,
        // we need to make sure only one actually does the work
        event.stopPropagation(); // W3C

        event.cancelBubble = true; // eslint-disable-line
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "isValidAdPlaybackInfo", function (playbackInfo) {
      return playbackInfo !== null && typeof playbackInfo !== 'undefined' && playbackInfo !== '';
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "populateAdTopBar", function () {
      var _this$props = _this.props,
          currentAdsInfo = _this$props.currentAdsInfo,
          contentTree = _this$props.contentTree,
          componentWidth = _this$props.componentWidth,
          language = _this$props.language,
          localizableStrings = _this$props.localizableStrings,
          skinConfig = _this$props.skinConfig,
          controller = _this$props.controller;
      var adTopBarItems = []; // Ad title

      var adTitle = 'Unknown';

      if (currentAdsInfo && currentAdsInfo.currentAdItem && contentTree && currentAdsInfo.currentAdItem.ooyalaAds && contentTree.title) {
        adTitle = contentTree.title;
      } else {
        adTitle = currentAdsInfo.currentAdItem.name;
      } // AMC puts "Unknown" in the name field if ad name unavailable


      var componentWidthThreshold = 560;

      if (_this.isValidAdPlaybackInfo(adTitle) && componentWidth > componentWidthThreshold) {
        var adTitleDiv = _react.default.createElement(_adPanelTopBarItem.default, {
          key: "adTitle",
          ref: "adTitle" // eslint-disable-line
          ,
          itemClassName: "oo-ad-title"
        }, adTitle);

        adTopBarItems.push(adTitleDiv);
      } // Ad playback Info


      var adPlaybackInfo = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.AD, localizableStrings);

      var currentAdIndex = currentAdsInfo.currentAdItem.indexInPod;
      var totalNumberOfAds = currentAdsInfo.numberOfAds;

      if (_this.isValidAdPlaybackInfo(currentAdIndex) && _this.isValidAdPlaybackInfo(totalNumberOfAds)) {
        adPlaybackInfo = "".concat(adPlaybackInfo, ": (").concat(currentAdIndex, "/").concat(totalNumberOfAds, ")");
      }

      if (skinConfig.adScreen.showAdCountDown) {
        var remainingTime = controller.getAdRemainingTime();

        if (Number.isFinite(remainingTime)) {
          remainingTime = _utils.default.formatSeconds(Math.max(0, remainingTime));
          adPlaybackInfo = "".concat(adPlaybackInfo, " - ").concat(remainingTime);
        } else {
          OO.log('ad remaining time is not a finite number');
        }
      }

      var adPlaybackInfoDiv = _react.default.createElement(_adPanelTopBarItem.default, {
        ref: "adPlaybackInfo" // eslint-disable-line
        ,
        key: "adPlaybackInfo",
        itemClassName: "oo-ad-playback-info"
      }, adPlaybackInfo);

      adTopBarItems.push(adPlaybackInfoDiv); // Flexible space

      var flexibleSpaceDiv = _react.default.createElement(_adPanelTopBarItem.default, {
        key: "flexibleSpace",
        itemClassName: "oo-flexible-space"
      });

      adTopBarItems.push(flexibleSpaceDiv); // Learn more

      var learnMoreClass = (0, _classnames.default)({
        'oo-learn-more': true,
        'oo-hidden': !currentAdsInfo.currentAdItem.hasClickUrl
      });

      if (currentAdsInfo.currentAdItem !== null && _this.isValidAdPlaybackInfo(currentAdsInfo.currentAdItem.hasClickUrl)) {
        var learnMoreText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.LEARN_MORE, localizableStrings);

        var learnMoreButtonDiv = _react.default.createElement(_adPanelTopBarItem.default, {
          key: "learnMoreButton",
          ref: "learnMoreButton" // eslint-disable-line
          ,
          onButtonClicked: _this.handleLearnMoreButtonClick,
          itemClassName: learnMoreClass
        }, _react.default.createElement(_icon.default, _extends({}, _this.props, {
          icon: "learn",
          className: "oo-button-icon"
        })), learnMoreText);

        adTopBarItems.push(learnMoreButtonDiv);
      } // Skip


      var skipButtonClass = (0, _classnames.default)({
        'oo-skip-button': true,
        'oo-visible': currentAdsInfo.skipAdButtonEnabled,
        'oo-enabled': currentAdsInfo.skipAdButtonEnabled
      });

      var skipButtonText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.SKIP_AD, localizableStrings);

      var skipButtonDiv = _react.default.createElement(_adPanelTopBarItem.default, {
        key: "skipButton",
        ref: "skipButton" // eslint-disable-line
        ,
        onButtonClicked: _this.handleSkipAdButtonClick,
        itemClassName: skipButtonClass
      }, _react.default.createElement(_icon.default, _extends({}, _this.props, {
        icon: "skip",
        className: "oo-button-icon"
      })), skipButtonText);

      adTopBarItems.push(skipButtonDiv);
      return adTopBarItems;
    });

    var _controller = props.controller;
    _this.isMobile = _controller.state.isMobile;
    return _this;
  }

  _createClass(AdPanel, [{
    key: "render",
    value: function render() {
      var adTopBarItems = this.populateAdTopBar();
      return _react.default.createElement("div", {
        className: "oo-ad-screen-panel"
      }, _react.default.createElement("div", {
        className: "oo-ad-screen-panel-click-layer"
      }), _react.default.createElement("div", {
        // eslint-disable-line
        className: "oo-ad-top-bar",
        ref: "adTopBar" // eslint-disable-line
        ,
        onClick: this.handleAdTopBarClick,
        onTouchEnd: this.handleAdTopBarClick
      }, adTopBarItems));
    }
  }]);

  return AdPanel;
}(_react.default.Component);

AdPanel.defaultProps = {
  currentPlayhead: 0,
  currentAdPlayhead: 0,
  adVideoDuration: 0,
  adStartTime: 0,
  currentAdsInfo: {
    numberOfAds: 0,
    skipAdButtonEnabled: false,
    currentAdItem: {
      hasClickUrl: false,
      name: '',
      indexInPod: 0,
      isLive: false
    }
  },
  adEndTime: 0
};
module.exports = AdPanel;

},{"../constants/constants":69,"./adPanelTopBarItem":11,"./icon":42,"./utils":63,"classnames":86,"react":378}],11:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * One item in ad panel component
 */
var AdPanelTopBarItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AdPanelTopBarItem, _React$Component);

  function AdPanelTopBarItem() {
    _classCallCheck(this, AdPanelTopBarItem);

    return _possibleConstructorReturn(this, _getPrototypeOf(AdPanelTopBarItem).apply(this, arguments));
  }

  _createClass(AdPanelTopBarItem, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var _this$props = this.props,
          itemClassName = _this$props.itemClassName,
          onButtonClicked = _this$props.onButtonClicked,
          children = _this$props.children;
      return _react.default.createElement("a", {
        // eslint-disable-line
        className: itemClassName,
        onClick: onButtonClicked
      }, children);
    }
  }]);

  return AdPanelTopBarItem;
}(_react.default.Component);

AdPanelTopBarItem.propTypes = {
  itemClassName: _propTypes.default.string,
  onButtonClicked: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node])
};
AdPanelTopBarItem.defaultProps = {
  itemClassName: '',
  onButtonClicked: function onButtonClicked() {},
  children: []
};
module.exports = AdPanelTopBarItem;

},{"prop-types":370,"react":378}],12:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CastPanel = function CastPanel(props) {
  var language = props.language,
      localizableStrings = props.localizableStrings,
      className = props.className,
      device = props.device;

  var connectedText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.CONNECTED_TO, localizableStrings);

  var castPanelClass = (0, _classnames.default)('oo-info-panel-cast', className);
  return _react.default.createElement("div", {
    className: castPanelClass
  }, _react.default.createElement("p", null, connectedText, ' ', _react.default.createElement("span", null, device)));
};

CastPanel.propTypes = {
  className: _propTypes.default.string,
  device: _propTypes.default.string,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({})
};
CastPanel.defaultProps = {
  className: '',
  device: '',
  language: 'en',
  localizableStrings: {
    en: {}
  }
};
module.exports = CastPanel;

},{"../constants/constants":69,"./utils":63,"classnames":86,"prop-types":370,"react":378}],13:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _icon = _interopRequireDefault(require("./icon"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CloseButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CloseButton, _React$Component);

  function CloseButton() {
    _classCallCheck(this, CloseButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(CloseButton).apply(this, arguments));
  }

  _createClass(CloseButton, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          cssClass = _this$props.cssClass,
          role = _this$props.role,
          closeAction = _this$props.closeAction;
      return _react.default.createElement(_accessibleButton.default, {
        className: cssClass,
        focusId: "".concat(_constants.default.FOCUS_IDS.CLOSE, "-").concat(Date.now()),
        ariaLabel: _constants.default.ARIA_LABELS.CLOSE,
        role: role,
        onClick: closeAction
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "dismiss",
        className: className
      })));
    }
  }]);

  return CloseButton;
}(_react.default.Component);

CloseButton.propTypes = {
  closeAction: _propTypes.default.func,
  fontStyleClass: _propTypes.default.string,
  cssClass: _propTypes.default.string
};
CloseButton.defaultProps = {
  closeAction: function closeAction() {},
  fontStyleClass: '',
  cssClass: 'oo-close-button'
};
module.exports = CloseButton;

},{"../constants/constants":69,"./accessibleButton":8,"./icon":42,"prop-types":370,"react":378}],14:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../utils"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _tab = _interopRequireDefault(require("./tab"));

var _multiAudioTab = _interopRequireDefault(require("./multiAudioTab"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ClosedCaptionMultiAudioMenu = function ClosedCaptionMultiAudioMenu(props) {
  /**
   * Fetch closedCaptions from languageList
   * @param {Array} languageList - list of available languages
   * @param {String} language - the selected language
   * @returns {Array<{id: String, label: String, enabled: Boolean}>} an array of languages info objects
   * @private
   */
  var getClosedCaptions = function getClosedCaptions(languageList, language) {
    var closedCaptionList = [];

    if (Array.isArray(languageList)) {
      for (var index = 0; index < languageList.length; index++) {
        // eslint-disable-line
        var isSelectedCc = languageList[index] === language;
        var cc = {
          id: languageList[index],
          label: languageList[index],
          enabled: isSelectedCc
        };
        closedCaptionList.push(cc);
      }
    }

    return closedCaptionList;
  };
  /**
   * when clicking on an item from an cc list, set the corresponding cc value
   * @param {string} id - id of clicked element
   */


  var handleClosedCaptionClick = function handleClosedCaptionClick(id) {
    if (props.controller && typeof props.controller.onClosedCaptionChange === 'function') {
      props.controller.onClosedCaptionChange('language', id);
    }
  };
  /**
   * when clicking on an item from an audio list, set the corresponding audio value
   * @param {string} id - id of clicked element
   */


  var handleMultiAudioClick = function handleMultiAudioClick(id) {
    if (props.controller && typeof props.controller.setCurrentAudio === 'function' && props.controller.state && props.controller.state.multiAudio && props.controller.state.multiAudio.tracks) {
      var tracks = props.controller.state.multiAudio.tracks;
      var selectedAudioTrack = tracks.find(function (track) {
        return track.id === id;
      });
      props.controller.setCurrentAudio(selectedAudioTrack);
    }

    if (props.togglePopoverAction && typeof props.togglePopoverAction === 'function') {
      props.togglePopoverAction({
        restoreToggleButtonFocus: true
      });
    }
  };

  var multiAudioCol = null;
  var closedCaptionsCol = null;
  var controller = props.controller,
      localizableStrings = props.localizableStrings,
      language = props.language,
      skinConfig = props.skinConfig,
      menuClassName = props.menuClassName;

  if (controller && controller.state && controller.state.multiAudio && controller.state.multiAudio.tracks && controller.state.multiAudio.tracks.length > 0) {
    multiAudioCol = _react.default.createElement(_multiAudioTab.default, {
      header: _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.AUDIO, localizableStrings),
      handleClick: handleMultiAudioClick,
      skinConfig: skinConfig,
      audioTracksList: controller.state.multiAudio.tracks,
      language: language,
      languageList: controller.languageList,
      localizableStrings: localizableStrings
    });
  }

  if (controller && controller.state && controller.state.closedCaptionOptions && controller.state.closedCaptionOptions.availableLanguages && controller.state.closedCaptionOptions.availableLanguages.languages && controller.state.closedCaptionOptions.availableLanguages.languages.length > 0) {
    var closedCaptionList = getClosedCaptions(controller.state.closedCaptionOptions.availableLanguages.languages, controller.state.closedCaptionOptions.language);
    closedCaptionsCol = _react.default.createElement(_tab.default, {
      tabClassName: "oo-hidden",
      handleClick: handleClosedCaptionClick,
      skinConfig: skinConfig,
      itemsList: closedCaptionList,
      header: _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.SUBTITLES, localizableStrings)
    });
  }

  return _react.default.createElement("div", {
    className: (0, _classnames.default)('oo-cc-ma-menu', menuClassName)
  }, multiAudioCol, closedCaptionsCol);
};

ClosedCaptionMultiAudioMenu.propTypes = {
  menuClassName: _propTypes.default.string,
  skinConfig: _propTypes.default.shape({}),
  togglePopoverAction: _propTypes.default.func,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  controller: _propTypes.default.shape({
    setCurrentAudio: _propTypes.default.func,
    onClosedCaptionChange: _propTypes.default.func,
    state: _propTypes.default.shape({
      closedCaptionOptions: _propTypes.default.shape({}),
      multiAudio: _propTypes.default.shape({
        tracks: _propTypes.default.array
      })
    }),
    languageList: _propTypes.default.array
  }).isRequired
};
ClosedCaptionMultiAudioMenu.defaultProps = {
  menuClassName: '',
  skinConfig: {},
  togglePopoverAction: function togglePopoverAction() {},
  language: '',
  localizableStrings: {}
};
module.exports = ClosedCaptionMultiAudioMenu;

},{"../../constants/constants":69,"../utils":63,"./multiAudioTab":16,"./tab":17,"classnames":86,"prop-types":370,"react":378}],15:[function(require,module,exports){
"use strict";

var _underscore = require("underscore");

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _utils = _interopRequireDefault(require("../utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Gets display label by checking
 * roles - e.g. nullable field from DASH manifest
 * and labels - e.g. non-nullable field from HSL manifest
 * @function getDisplayLabel
 * @param {Object} audioTrack - AudioTrack object
 * @returns {String} displayLabel - readable display label
 */
function getDisplayLabel(audioTrack) {
  var displayLabel = '';

  if (audioTrack && audioTrack.label) {
    // special case for DASH where label is per default equal to lang
    var isLabelNeeded = audioTrack.lang !== audioTrack.label;

    if (isLabelNeeded) {
      displayLabel = audioTrack.label;
    }
  }

  return displayLabel;
}
/**
 * Gets user friendly language name in local language
 * @function getDisplayLanguage
 * @param {Array.<{Object}>} languagesList - list of languages with regional names and codes
 * @param {String} languageCode - ISO-639 language code
 * @returns {String} displayLanguage - localized language
 */


function getDisplayLanguage(languagesList, languageCode) {
  var displayLanguage = '';

  if (!!_utils.default.isValidString(languageCode) && languagesList && Array.isArray(languagesList) && languagesList.length) {
    var matchingLanguage = languagesList.find(function (language) {
      return language['2T'] === languageCode || language['1'] === languageCode || language['2B'] === languageCode || language['3'] === languageCode;
    });

    if (matchingLanguage) {
      displayLanguage = matchingLanguage.local;
    }
  }

  return displayLanguage;
}
/**
 * Gets display title based on language and label
 * @param {Object} trackParam - AudioTrack params
 * @param {String} trackParam.language - language string attribute
 * @param {String} trackParam.label - label string attribute
 * @param {String} trackParam.langCode - code of the language
 * @param {String} trackParam.noLanguageText - label for a case when
 * we do not have values for language and label of an audioTrack
 * @returns {String} displayTitle - human readable display title
 */


function getDisplayTitle(trackParam) {
  // set default function params
  var displayLanguage = trackParam.language || '';
  var displayLabel = trackParam.label || '';
  var noLanguageText = trackParam.noLanguageText || _constants.default.SKIN_TEXT.UNDEFINED_LANGUAGE;

  if (!displayLanguage.length && !displayLabel.length) {
    return noLanguageText;
  }

  if (displayLanguage.length && !displayLabel.length) {
    return displayLanguage;
  }

  if (!displayLanguage.length && displayLabel.length) {
    return displayLabel;
  }

  if (trackParam.langCode === _constants.default.LANGUAGE.UNDEFINED_LANGUAGE) {
    displayLanguage = '';
  }

  return displayLanguage.concat(' ', displayLabel).trim();
}
/**
 * If language in audioTrack is special we need to use localized value if it is possible.
 * We can localize the value using audio code.
 * @param {String} langCode - code of the language
 * @param {String} userLanguage - language which user would like to use
 * @param {Object} localizableStrings - mapping of string keys to localized values
 * @param {Object} languageMap - object with codes of special languages as keys
 * and labels for the codes as values
 * @returns {String} localized special audio track name or original name or empty string
 */


function getLocalizedSpecialLanguage(langCode, userLanguage, localizableStrings, languageMap) {
  var phrase = languageMap ? languageMap[langCode] : '';

  var localizedLanguage = _utils.default.getLocalizedString(userLanguage, phrase, localizableStrings);

  localizedLanguage = localizedLanguage || phrase || '';
  return localizedLanguage;
}
/**
 *
 * Check if a language code is one of keys from a special language map
 * @param {String} langCode - code of an audio language
 * @param {Object} languageMap - object with codes of special languages as keys
 * and labels for the codes as values
 * @returns {boolean} - true if language code is one of specials, false otherwise
 */


function isSpecialLanguage(langCode, languageMap) {
  return languageMap ? !!languageMap[langCode] : false;
}
/**
 * Transforms tracks list based on criteria
 * if all tracks are distinct - only use language attribute
 * if there are duplicates - append label to the language attribute
 * @param {Array} tracksList - list of all tracks
 * @param {String} noLanguageText - label for a case when
 * we do not have values for language and label of an audioTrack
 * @returns {Array} transformedTracksList - list of transformed tracks
 */


function transformTracksList(tracksList, noLanguageText) {
  var transformedTracksList = []; // first we group by language to know if we have distinct tracks

  if (tracksList && tracksList.length) {
    var groupedTracks = (0, _underscore.groupBy)(tracksList, 'language');
    var groupedKeys = Object.keys(groupedTracks); // if all languages are distinct - discard labels

    if (groupedKeys.length === tracksList.length) {
      transformedTracksList = tracksList.map(function (audioTrack) {
        var trackDisplayTitle = getDisplayTitle({
          language: audioTrack.language,
          langCode: audioTrack.lang,
          noLanguageText: noLanguageText
        });
        var transformedTrack = {
          id: audioTrack.id,
          label: trackDisplayTitle,
          enabled: audioTrack.enabled
        };
        return transformedTrack;
      });
    } else {
      var uniqueTracks = groupedKeys.map(function (key) {
        // if there are multiple tracks with the same language code
        if (groupedTracks[key].length > 1) {
          // get each list of duplicating tracks
          return groupedTracks[key].map(function (audioTrack) {
            // get display title based on language and label
            var trackDisplayTitle = getDisplayTitle({
              language: audioTrack.language,
              label: audioTrack.label,
              langCode: audioTrack.lang,
              noLanguageText: noLanguageText
            });
            var transformedTrack = {
              enabled: audioTrack.enabled,
              label: trackDisplayTitle,
              id: audioTrack.id
            };
            return transformedTrack;
          });
        } // this track is distinct


        var _groupedTracks$key = _slicedToArray(groupedTracks[key], 1),
            audioTrack = _groupedTracks$key[0];

        var trackDisplayTitle = getDisplayTitle({
          language: audioTrack.language,
          langCode: audioTrack.lang,
          noLanguageText: noLanguageText
        });
        var transformedTrack = {
          enabled: audioTrack.enabled,
          label: trackDisplayTitle,
          id: audioTrack.id
        };
        return transformedTrack;
      });
      transformedTracksList = uniqueTracks.reduce(function (memo, element) {
        return memo.concat(element);
      }, []);
    }
  }

  return transformedTracksList;
}
/**
 * Get unique tracks by name
 * @param {Array<{ label: String, enabled: Boolean, id: String }>} audioTracksList - all available tracks
 * @returns {Array<{ label: String, enabled: Boolean, id: String }>} uniqueTracksList
 */


function getUniqueTracks(audioTracksList) {
  var uniqueTracksList = [];

  if (audioTracksList && audioTracksList.length && Array.isArray(audioTracksList)) {
    var groupedTracks = (0, _underscore.groupBy)(audioTracksList, 'label');
    var uniqueKeys = Object.keys(groupedTracks); // if all keys are unique - return non-modified tracks

    if (uniqueKeys.length === audioTracksList.length) {
      uniqueTracksList = audioTracksList;
    } else {
      /*
      * after grouping we get an object where key is name of the track
      * and value is tracks with the same name so we need to iterate over keys
      * and flatten it afterwards
      */
      var uniqueTracks = uniqueKeys.map(function (key) {
        if (groupedTracks[key].length > 1) {
          return groupedTracks[key].map(function (audioTrack, index) {
            // modify zero-based index of array to get user-friendly index
            var trackIndex = index ? " ".concat(index) : '';
            var audioTrackLabel = audioTrack.label.concat(trackIndex); // add track index

            var uniqueTrack = {
              enabled: audioTrack.enabled,
              label: audioTrackLabel,
              id: audioTrack.id
            };
            return uniqueTrack;
          });
        }

        var _groupedTracks$key2 = _slicedToArray(groupedTracks[key], 1),
            head = _groupedTracks$key2[0];

        return head;
      });
      uniqueTracksList = uniqueTracks.reduce(function (memo, element) {
        return memo.concat(element);
      }, []);
    }
  }

  return uniqueTracksList;
}

module.exports = {
  getDisplayLabel: getDisplayLabel,
  getDisplayLanguage: getDisplayLanguage,
  getDisplayTitle: getDisplayTitle,
  transformTracksList: transformTracksList,
  getUniqueTracks: getUniqueTracks,
  getLocalizedSpecialLanguage: getLocalizedSpecialLanguage,
  isSpecialLanguage: isSpecialLanguage
};

},{"../../constants/constants":69,"../utils":63,"underscore":387}],16:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _tab = _interopRequireDefault(require("./tab"));

var _helpers = _interopRequireDefault(require("./helpers"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _utils = _interopRequireDefault(require("../utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SPECIAL_LANGUAGES_MAP = {};
SPECIAL_LANGUAGES_MAP[_constants.default.LANGUAGE.UNDEFINED_LANGUAGE] = _constants.default.SKIN_TEXT.UNDEFINED_LANGUAGE;
SPECIAL_LANGUAGES_MAP[_constants.default.LANGUAGE.NO_LINGUISTIC_CONTENT] = _constants.default.SKIN_TEXT.NO_LINGUISTIC_CONTENT;
SPECIAL_LANGUAGES_MAP[_constants.default.LANGUAGE.UNCODED_LANGUAGES] = _constants.default.SKIN_TEXT.UNCODED_LANGUAGES;
SPECIAL_LANGUAGES_MAP[_constants.default.LANGUAGE.MULTIPLE_LANGUAGES] = _constants.default.SKIN_TEXT.MULTIPLE_LANGUAGES;

var MultiAudioTab = function MultiAudioTab(props) {
  var audioTracksList = props.audioTracksList,
      language = props.language,
      localizableStrings = props.localizableStrings,
      handleClick = props.handleClick,
      skinConfig = props.skinConfig,
      languageList = props.languageList,
      header = props.header; // transform tracks to human readable format

  var readableTracksList = audioTracksList.map(function (audioTrack) {
    var displayLanguage = '';

    var isSpecialLanguage = _helpers.default.isSpecialLanguage(audioTrack.lang, SPECIAL_LANGUAGES_MAP);

    if (isSpecialLanguage) {
      displayLanguage = _helpers.default.getLocalizedSpecialLanguage(audioTrack.lang, props.language, props.localizableStrings, SPECIAL_LANGUAGES_MAP);
    } else {
      displayLanguage = _helpers.default.getDisplayLanguage(languageList, audioTrack.lang);
    }

    var displayLabel = _helpers.default.getDisplayLabel(audioTrack);

    var languageElement = {
      enabled: audioTrack.enabled,
      language: displayLanguage,
      label: displayLabel,
      id: audioTrack.id,
      lang: audioTrack.lang
    };
    return languageElement;
  });

  var noLanguageText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.UNDEFINED_LANGUAGE, localizableStrings);

  var transformedTracksList = _helpers.default.transformTracksList(readableTracksList, noLanguageText);

  var uniqueTracksList = _helpers.default.getUniqueTracks(transformedTracksList);

  return _react.default.createElement(_tab.default, {
    handleClick: handleClick,
    skinConfig: skinConfig,
    itemsList: uniqueTracksList,
    header: header
  });
};

MultiAudioTab.propTypes = {
  header: _propTypes.default.string.isRequired,
  audioTracksList: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    lang: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    enabled: _propTypes.default.bool.isRequired
  })).isRequired,
  skinConfig: _propTypes.default.shape({}),
  handleClick: _propTypes.default.func,
  language: _propTypes.default.string,
  languageList: _propTypes.default.arrayOf(_propTypes.default.shape({})),
  localizableStrings: _propTypes.default.shape({})
};
MultiAudioTab.defaultProps = {
  skinConfig: {},
  language: '',
  handleClick: function handleClick() {},
  languageList: [],
  localizableStrings: {}
};
module.exports = MultiAudioTab;

},{"../../constants/constants":69,"../utils":63,"./helpers":15,"./tab":17,"prop-types":370,"react":378}],17:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _customScrollArea = _interopRequireDefault(require("../customScrollArea"));

var _icon = _interopRequireDefault(require("../icon"));

var _accessibleButton = _interopRequireDefault(require("../accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("../higher-order/accessibleMenu"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Manage tab
 */
var TabProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TabProto, _React$Component);

  function TabProto() {
    _classCallCheck(this, TabProto);

    return _possibleConstructorReturn(this, _getPrototypeOf(TabProto).apply(this, arguments));
  }

  _createClass(TabProto, [{
    key: "handleClick",
    // eslint-disable-line

    /**
     * Handle click on tab
     * @param {number} id - the tab id
     */
    value: function handleClick(id) {
      if (typeof this.props.handleClick === 'function') {
        // eslint-disable-line
        this.props.handleClick(id); // eslint-disable-line
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          tabClassName = _this$props.tabClassName,
          header = _this$props.header,
          itemsList = _this$props.itemsList,
          skinConfig = _this$props.skinConfig;
      return _react.default.createElement("div", {
        className: (0, _classnames.default)('oo-cc-ma-menu__coll', tabClassName)
      }, _react.default.createElement("div", {
        className: "oo-cc-ma-menu__header"
      }, header), _react.default.createElement(_customScrollArea.default, {
        className: "oo-cc-ma-menu__scrollarea",
        speed: 1,
        horizontal: false
      }, _react.default.createElement("ul", {
        className: "oo-cc-ma-menu__list",
        role: _constants.default.ARIA_ROLES.MENU
      }, itemsList.map(function (item, index) {
        var id = item.id;
        return _react.default.createElement("li", {
          key: id,
          role: _constants.default.ARIA_ROLES.PRESENTATION,
          className: (0, _classnames.default)('oo-cc-ma-menu__element', {
            'oo-cc-ma-menu__element--active': item.enabled
          })
        }, _react.default.createElement(_accessibleButton.default, {
          key: item.id,
          className: "oo-multi-audio-btn",
          focusId: _constants.default.FOCUS_IDS.MULTI_AUDIO + index,
          role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
          ariaLabel: item.label,
          ariaChecked: item.enabled,
          onClick: function onClick() {
            return _this.handleClick(id);
          }
        }, _react.default.createElement(_icon.default, {
          skinConfig: skinConfig,
          icon: "selected",
          className: (0, _classnames.default)({
            'oo-icon-hidden': !item.enabled
          })
        }), _react.default.createElement("span", {
          className: "oo-cc-ma-menu__name",
          title: item.label
        }, item.label)));
      }))));
    }
  }]);

  return TabProto;
}(_react.default.Component);

var Tab = (0, _accessibleMenu.default)(TabProto, {
  useRovingTabindex: false
});
TabProto.defaultProps = {
  tabClassName: '',
  header: '',
  skinConfig: {
    responsive: {
      breakpoints: {
        xs: {
          id: 'xs'
        },
        sm: {
          id: 'sm'
        },
        md: {
          id: 'md'
        },
        lg: {
          id: 'lg'
        }
      }
    }
  },
  handleClick: function handleClick() {}
};
TabProto.propTypes = {
  tabClassName: _propTypes.default.string,
  header: _propTypes.default.string,
  itemsList: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    label: _propTypes.default.string.isRequired,
    enabled: _propTypes.default.bool.isRequired
  })).isRequired,
  skinConfig: _propTypes.default.shape({}),
  handleClick: _propTypes.default.func
};
module.exports = Tab;

},{"../../constants/constants":69,"../accessibleButton":8,"../customScrollArea":33,"../higher-order/accessibleMenu":38,"../icon":42,"classnames":86,"prop-types":370,"react":378}],18:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../utils"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _selectionContainer = _interopRequireDefault(require("./selectionContainer"));

var _slider = _interopRequireDefault(require("../slider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * view to manage caption opacity
 */
var CaptionOpacityTab =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CaptionOpacityTab, _React$Component);

  function CaptionOpacityTab() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CaptionOpacityTab);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CaptionOpacityTab)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeTextOpacity", function (value) {
      if (!_this.props.closedCaptionOptions.enabled) {
        _this.props.controller.toggleClosedCaptionEnabled();
      }

      _this.props.controller.onClosedCaptionChange('textOpacity', value);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeBackgroundOpacity", function (value) {
      if (!_this.props.closedCaptionOptions.enabled) {
        _this.props.controller.toggleClosedCaptionEnabled();
      }

      _this.props.controller.onClosedCaptionChange('backgroundOpacity', value);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeWindowOpacity", function (value) {
      if (!_this.props.closedCaptionOptions.enabled) {
        _this.props.controller.toggleClosedCaptionEnabled();
      }

      _this.props.controller.onClosedCaptionChange('windowOpacity', value);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "percentString", function (number) {
      return "".concat((number * 100).toString(), "%");
    });

    return _this;
  }

  _createClass(CaptionOpacityTab, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var textOpacityTitle = _utils.default.getLocalizedString(this.props.language, _constants.default.SKIN_TEXT.TEXT_OPACITY, this.props.localizableStrings);

      var backgroundOpacityTitle = _utils.default.getLocalizedString(this.props.language, _constants.default.SKIN_TEXT.BACKGROUND_OPACITY, this.props.localizableStrings);

      var windowOpacityTitle = _utils.default.getLocalizedString(this.props.language, _constants.default.SKIN_TEXT.WINDOW_OPACITY, this.props.localizableStrings);

      return _react.default.createElement("div", {
        className: "oo-caption-opacity-tab"
      }, _react.default.createElement("div", {
        className: "oo-caption-opacity-inner-wrapper",
        "aria-label": _constants.default.ARIA_LABELS.CAPTION_OPACITY_MENU,
        role: _constants.default.ARIA_ROLES.MENU
      }, _react.default.createElement(_selectionContainer.default, {
        title: textOpacityTitle,
        selectionText: this.percentString(this.props.closedCaptionOptions.textOpacity)
      }, _react.default.createElement(_slider.default, {
        value: parseFloat(this.props.closedCaptionOptions.textOpacity),
        onChange: this.changeTextOpacity,
        className: "oo-slider-caption-opacity",
        itemRef: "textOpacitySlider",
        minValue: 0,
        maxValue: 1,
        step: 0.1,
        usePercentageForAria: true,
        ariaLabel: textOpacityTitle,
        settingName: textOpacityTitle
      })), _react.default.createElement(_selectionContainer.default, {
        title: backgroundOpacityTitle,
        selectionText: this.percentString(this.props.closedCaptionOptions.backgroundOpacity)
      }, _react.default.createElement(_slider.default, {
        value: parseFloat(this.props.closedCaptionOptions.backgroundOpacity),
        onChange: this.changeBackgroundOpacity,
        className: "oo-slider-caption-opacity",
        itemRef: "backgroundOpacitySlider",
        minValue: 0,
        maxValue: 1,
        step: 0.1,
        usePercentageForAria: true,
        ariaLabel: backgroundOpacityTitle,
        settingName: backgroundOpacityTitle
      })), _react.default.createElement(_selectionContainer.default, {
        title: windowOpacityTitle,
        selectionText: this.percentString(this.props.closedCaptionOptions.windowOpacity)
      }, _react.default.createElement(_slider.default, {
        value: parseFloat(this.props.closedCaptionOptions.windowOpacity),
        onChange: this.changeWindowOpacity,
        className: "oo-slider-caption-opacity",
        itemRef: "windowOpacitySlider",
        minValue: 0,
        maxValue: 1,
        step: 0.1,
        usePercentageForAria: true,
        ariaLabel: windowOpacityTitle,
        settingName: windowOpacityTitle
      }))));
    }
  }]);

  return CaptionOpacityTab;
}(_react.default.Component);

CaptionOpacityTab.propTypes = {
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  closedCaptionOptions: _propTypes.default.shape({
    enabled: _propTypes.default.bool,
    textOpacity: _propTypes.default.number,
    backgroundOpacity: _propTypes.default.number,
    windowOpacity: _propTypes.default.number
  }),
  controller: _propTypes.default.shape({
    toggleClosedCaptionEnabled: _propTypes.default.func,
    onClosedCaptionChange: _propTypes.default.func
  }).isRequired
};
CaptionOpacityTab.defaultProps = {
  language: 'en',
  localizableStrings: {},
  closedCaptionOptions: {}
};
module.exports = CaptionOpacityTab;

},{"../../constants/constants":69,"../slider":53,"../utils":63,"./selectionContainer":27,"prop-types":370,"react":378}],19:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = _interopRequireDefault(require("../utils"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _textTrackPanel = _interopRequireDefault(require("../textTrackPanel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Closed captions preview
 * @param {object} props – Props of the component
 * @returns {Object} React element
 */
var CCPreviewPanel = function CCPreviewPanel(props) {
  var language = props.language,
      localizableStrings = props.localizableStrings,
      closedCaptionOptions = props.closedCaptionOptions;

  var closedCaptionPreviewTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.CLOSED_CAPTION_PREVIEW, localizableStrings);

  var closedCaptionSampleText = _utils.default.getLocalizedString(closedCaptionOptions.language, _constants.default.SKIN_TEXT.SAMPLE_TEXT, localizableStrings);

  if (!closedCaptionSampleText) {
    closedCaptionSampleText = _utils.default.getLocalizedString('en', _constants.default.SKIN_TEXT.SAMPLE_TEXT, props.localizableStrings);
  }

  var previewCaptionClassName = (0, _classnames.default)({
    'oo-preview-caption': true,
    'oo-disabled': !closedCaptionOptions.enabled
  });
  return _react.default.createElement("div", {
    className: "oo-preview-panel"
  }, _react.default.createElement("div", {
    className: previewCaptionClassName
  }, closedCaptionPreviewTitle), _react.default.createElement(_textTrackPanel.default, _extends({}, props, {
    cueText: closedCaptionSampleText
  })));
};

module.exports = CCPreviewPanel;

},{"../../constants/constants":69,"../textTrackPanel":56,"../utils":63,"classnames":86,"react":378}],20:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _utils = _interopRequireDefault(require("../utils"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _languageTab = _interopRequireDefault(require("./languageTab"));

var _colorSelectionTab = _interopRequireDefault(require("./colorSelectionTab"));

var _captionOpacityTab = _interopRequireDefault(require("./captionOpacityTab"));

var _fontTypeTab = _interopRequireDefault(require("./fontTypeTab"));

var _fontSizeTab = _interopRequireDefault(require("./fontSizeTab"));

var _textEnhancementsTab = _interopRequireDefault(require("./textEnhancementsTab"));

var _ccPreviewPanel = _interopRequireDefault(require("./ccPreviewPanel"));

var _tabs = _interopRequireDefault(require("../tabs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Tab = _tabs.default.Panel;
/**
 * Closed caption settings screen
 * @param {Object} props – Props object
 * @returns {Object} React VDOM element
 */

var ClosedCaptionPanel = function ClosedCaptionPanel(props) {
  // The scroll buttons are not needed until the player's width is below a specific amount. This varies by language.
  var tabMenuOverflowMap = {
    en: 730,
    es: 995,
    zh: 610
  };
  var language = props.language,
      localizableStrings = props.localizableStrings,
      componentWidth = props.componentWidth;

  var languageTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.LANGUAGE_TAB_TITLE, localizableStrings);

  var colorSelectionTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.COLOR_SELECTION_TAB_TITLE, localizableStrings);

  var captionOpacityTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.CAPTION_OPACITY_TAB_TITLE, localizableStrings);

  var fontTypeTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.FONT_TYPE_TAB_TITLE, localizableStrings);

  var fontSizeTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.FONT_SIZE_TAB_TITLE, localizableStrings);

  var textEnhancementsTabTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.TEXT_ENHANCEMENTS_TAB_TITLE, localizableStrings);

  return _react.default.createElement("div", {
    className: "oo-content-panel oo-closed-captions-panel"
  }, _react.default.createElement(_tabs.default, _extends({
    className: "captions-navbar",
    showScrollButtons: componentWidth < tabMenuOverflowMap[language]
  }, props), _react.default.createElement(Tab, {
    title: languageTabTitle
  }, _react.default.createElement(_languageTab.default, props)), _react.default.createElement(Tab, {
    title: colorSelectionTabTitle
  }, _react.default.createElement(_colorSelectionTab.default, props)), _react.default.createElement(Tab, {
    title: captionOpacityTabTitle
  }, _react.default.createElement(_captionOpacityTab.default, props)), _react.default.createElement(Tab, {
    title: fontTypeTabTitle
  }, _react.default.createElement(_fontTypeTab.default, props)), _react.default.createElement(Tab, {
    title: fontSizeTabTitle
  }, _react.default.createElement(_fontSizeTab.default, props)), _react.default.createElement(Tab, {
    title: textEnhancementsTabTitle
  }, _react.default.createElement(_textEnhancementsTab.default, props))), _react.default.createElement(_ccPreviewPanel.default, props));
};

module.exports = ClosedCaptionPanel;

},{"../../constants/constants":69,"../tabs":55,"../utils":63,"./captionOpacityTab":18,"./ccPreviewPanel":19,"./colorSelectionTab":22,"./fontSizeTab":23,"./fontTypeTab":24,"./languageTab":25,"./textEnhancementsTab":28,"react":378}],21:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _utils = _interopRequireDefault(require("../utils"));

var _accessibleMenu = _interopRequireDefault(require("../higher-order/accessibleMenu"));

var _accessibleButton = _interopRequireDefault(require("../accessibleButton"));

var _onOffSwitch = _interopRequireDefault(require("./onOffSwitch"));

var _closeButton = _interopRequireDefault(require("../closeButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * handle popover with closed captions
 * @param {Object} props – React props object
 * @returns {Object} React VDOM element
 */
var ClosedCaptionPopoverProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ClosedCaptionPopoverProto, _React$Component);

  function ClosedCaptionPopoverProto() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ClosedCaptionPopoverProto);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClosedCaptionPopoverProto)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "moreOptionsBtn", null);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClose", function () {
      var togglePopoverAction = _this.props.togglePopoverAction;
      togglePopoverAction({
        restoreToggleButtonFocus: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMoreCaptions", function () {
      var controller = _this.props.controller;

      if (_this.moreOptionsBtn) {
        if (_this.moreOptionsBtn.wasTriggeredWithKeyboard()) {
          controller.state.focusedControl = _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION;
        }

        controller.state.closedCaptionOptions.autoFocus = _this.moreOptionsBtn.wasTriggeredWithKeyboard();

        _this.moreOptionsBtn.wasTriggeredWithKeyboard(false);
      }

      controller.toggleScreen(_constants.default.SCREEN.CLOSED_CAPTION_SCREEN);

      _this.handleClose();
    });

    return _this;
  }

  _createClass(ClosedCaptionPopoverProto, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          language = _this$props.language,
          localizableStrings = _this$props.localizableStrings;

      var captionBtnText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.CC_OPTIONS, localizableStrings);

      return _react.default.createElement("ul", {
        className: "oo-popover-horizontal",
        role: "menu"
      }, _react.default.createElement("li", {
        role: "presentation"
      }, _react.default.createElement(_onOffSwitch.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.TOGGLE_CLOSED_CAPTIONS,
        role: _constants.default.ARIA_ROLES.MENU_ITEM_CHECKBOX
      }))), _react.default.createElement("li", {
        role: "presentation"
      }, _react.default.createElement(_accessibleButton.default, {
        ref: function ref(element) {
          _this2.moreOptionsBtn = element;
        },
        className: "oo-more-captions",
        ariaLabel: _constants.default.ARIA_LABELS.CAPTION_OPTIONS,
        role: _constants.default.ARIA_ROLES.MENU_ITEM,
        onClick: this.handleMoreCaptions
      }, captionBtnText)), _react.default.createElement("li", {
        role: "presentation"
      }, _react.default.createElement(_closeButton.default, _extends({}, this.props, {
        role: _constants.default.ARIA_ROLES.MENU_ITEM,
        closeAction: this.handleClose
      }))));
    }
  }]);

  return ClosedCaptionPopoverProto;
}(_react.default.Component);

var ClosedCaptionPopover = (0, _accessibleMenu.default)(ClosedCaptionPopoverProto);
module.exports = ClosedCaptionPopover;

},{"../../constants/constants":69,"../accessibleButton":8,"../closeButton":13,"../higher-order/accessibleMenu":38,"../utils":63,"./onOffSwitch":26,"react":378}],22:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _utils = _interopRequireDefault(require("../utils"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _selectionContainer = _interopRequireDefault(require("./selectionContainer"));

var _colorSelector = _interopRequireDefault(require("../colorSelector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Manage closed captions text color
 */
var ColorSelectionTab =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ColorSelectionTab, _React$Component);

  function ColorSelectionTab(props) {
    var _this;

    _classCallCheck(this, ColorSelectionTab);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColorSelectionTab).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeTextColor", function (color) {
      var _this$props = _this.props,
          closedCaptionOptions = _this$props.closedCaptionOptions,
          controller = _this$props.controller;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('textColor', color);

      _this.setState({
        selectedTextColor: color // eslint-disable-line

      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeWindowColor", function (color) {
      var _this$props2 = _this.props,
          closedCaptionOptions = _this$props2.closedCaptionOptions,
          controller = _this$props2.controller;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('windowColor', color);

      _this.setState({
        selectedWindowColor: color // eslint-disable-line

      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeBackgroundColor", function (color) {
      var _this$props3 = _this.props,
          closedCaptionOptions = _this$props3.closedCaptionOptions,
          controller = _this$props3.controller;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('backgroundColor', color);

      _this.setState({
        selectedBackgroundColor: color // eslint-disable-line

      });
    });

    var _closedCaptionOptions = props.closedCaptionOptions;
    _this.state = {
      selectedTextColor: _closedCaptionOptions.textColor,
      // eslint-disable-line
      selectedWindowColor: _closedCaptionOptions.windowColor,
      // eslint-disable-line
      selectedBackgroundColor: _closedCaptionOptions.backgroundColor,
      // eslint-disable-line
      textColors: ['White', 'Blue', 'Magenta', 'Green', 'Yellow', 'Red', 'Cyan', 'Black'],
      windowColors: ['Transparent', 'White', 'Blue', 'Magenta', 'Green', 'Yellow', 'Red', 'Cyan', 'Black'],
      backgroundColors: ['Transparent', 'White', 'Blue', 'Magenta', 'Green', 'Yellow', 'Red', 'Cyan', 'Black']
    };
    return _this;
  }
  /**
   * Handle changing text color by user
   * @param {string} color - the color code
   */


  _createClass(ColorSelectionTab, [{
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          closedCaptionOptions = _this$props4.closedCaptionOptions,
          language = _this$props4.language,
          localizableStrings = _this$props4.localizableStrings;
      var _this$state = this.state,
          textColors = _this$state.textColors,
          backgroundColors = _this$state.backgroundColors,
          windowColors = _this$state.windowColors;

      var textColorTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.TEXT_COLOR, localizableStrings);

      var textColorSelection = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[closedCaptionOptions.textColor.toUpperCase()], localizableStrings);

      var backgroundColorTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.BACKGROUND_COLOR, localizableStrings);

      var backgroundColorSelection = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[closedCaptionOptions.backgroundColor.toUpperCase()], localizableStrings);

      var windowColorTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.WINDOW_COLOR, localizableStrings);

      var windowColorSelection = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[closedCaptionOptions.windowColor.toUpperCase()], localizableStrings);

      return _react.default.createElement("div", {
        className: "oo-color-selection-tab"
      }, _react.default.createElement("div", {
        className: "oo-color-selection-inner-wrapper"
      }, _react.default.createElement(_selectionContainer.default, {
        className: "oo-text-color-selection-container",
        title: textColorTitle,
        selectionText: textColorSelection
      }, _react.default.createElement("div", {
        className: "oo-text-color-items-container"
      }, _react.default.createElement(_colorSelector.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.TEXT_COLOR_MENU,
        colors: textColors,
        onColorChange: this.changeTextColor,
        selectedColor: closedCaptionOptions.textColor,
        enabled: closedCaptionOptions.enabled
      })))), _react.default.createElement(_selectionContainer.default, {
        title: backgroundColorTitle,
        selectionText: backgroundColorSelection
      }, _react.default.createElement(_colorSelector.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.BACKGROUND_COLOR_MENU,
        colors: backgroundColors,
        onColorChange: this.changeBackgroundColor,
        selectedColor: closedCaptionOptions.backgroundColor,
        enabled: closedCaptionOptions.enabled
      }))), _react.default.createElement(_selectionContainer.default, {
        title: windowColorTitle,
        selectionText: windowColorSelection
      }, _react.default.createElement(_colorSelector.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.WINDOW_COLOR_MENU,
        colors: windowColors,
        onColorChange: this.changeWindowColor,
        selectedColor: closedCaptionOptions.windowColor,
        enabled: closedCaptionOptions.enabled
      })))));
    }
  }]);

  return ColorSelectionTab;
}(_react.default.Component);

module.exports = ColorSelectionTab;

},{"../../constants/constants":69,"../colorSelector":29,"../utils":63,"./selectionContainer":27,"react":378}],23:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../utils"));

var _accessibleButton = _interopRequireDefault(require("../accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("../higher-order/accessibleMenu"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _selectionContainer = _interopRequireDefault(require("./selectionContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Manage font size tuning
 */
var FontSizeTabProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FontSizeTabProto, _React$Component);

  function FontSizeTabProto(props) {
    var _this;

    _classCallCheck(this, FontSizeTabProto);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FontSizeTabProto).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeFontSize", function (fontSize) {
      var _this$props = _this.props,
          closedCaptionOptions = _this$props.closedCaptionOptions,
          controller = _this$props.controller;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('fontSize', fontSize);

      _this.setState({
        selectedFontSize: fontSize // eslint-disable-line

      });
    });

    var _closedCaptionOptions = _this.props.closedCaptionOptions;
    _this.state = {
      selectedFontSize: _closedCaptionOptions.fontSize,
      // eslint-disable-line
      fontSizes: ['Small', 'Medium', 'Large', 'Extra Large']
    };
    return _this;
  }
  /**
   * Set up classname attribute of the element
   * @param {*} item - element where the component get's mounted
   * @param {*} elementType - type of the element
   * @returns {Array} list of classes
   */


  _createClass(FontSizeTabProto, [{
    key: "setClassname",
    value: function setClassname(item, elementType) {
      var closedCaptionOptions = this.props.closedCaptionOptions;
      return (0, _classnames.default)({
        'oo-font-size-letter': elementType === 'letter',
        'oo-font-size-label': elementType === 'label',
        'oo-font-size-selected': closedCaptionOptions.fontSize === item && closedCaptionOptions.enabled,
        'oo-font-size-label-selected': closedCaptionOptions.fontSize === item && closedCaptionOptions.enabled && elementType === 'label',
        'oo-disabled': !closedCaptionOptions.enabled
      });
    }
    /**
     * Handle change font size
     * @param {number} fontSize - the size of a font
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          closedCaptionOptions = _this$props2.closedCaptionOptions,
          skinConfig = _this$props2.skinConfig;
      var fontSizes = this.state.fontSizes;

      var fontSizeTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.FONT_SIZE, localizableStrings);

      var fontSizeSelection = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[closedCaptionOptions.fontSize.toUpperCase().replace(' ', '_')], localizableStrings);

      var fontItems = [];
      fontSizes.forEach(function (fontSize, index) {
        // accent color
        var isSelected = closedCaptionOptions.fontSize === fontSize;
        var selectedFontSizeStyle = {};

        if (closedCaptionOptions.enabled && skinConfig.general.accentColor && isSelected) {
          selectedFontSizeStyle = {
            color: skinConfig.general.accentColor
          };
        }

        var itemLabel = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[fontSize.toUpperCase().replace(' ', '_')], localizableStrings);

        fontItems.push(_react.default.createElement(_accessibleButton.default, {
          key: index // eslint-disable-line
          ,
          className: "oo-font-size-container",
          ariaLabel: itemLabel,
          ariaChecked: isSelected,
          role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
          onClick: function onClick() {
            return _this2.changeFontSize(fontSize);
          }
        }, _react.default.createElement("span", {
          className: "".concat(_this2.setClassname(fontSize, 'letter'), " oo-font-size-letter-").concat(fontSize.replace(' ', '-')),
          style: selectedFontSizeStyle
        }, "A"), _react.default.createElement("span", {
          className: _this2.setClassname(fontSize, 'label'),
          style: selectedFontSizeStyle
        }, itemLabel)));
      });
      return _react.default.createElement("div", {
        className: "oo-font-size-tab"
      }, _react.default.createElement("div", {
        className: "oo-font-size-inner-wrapper"
      }, _react.default.createElement(_selectionContainer.default, {
        title: fontSizeTitle,
        selectionText: fontSizeSelection,
        ariaLabel: _constants.default.ARIA_LABELS.FONT_SIZE_MENU,
        role: _constants.default.ARIA_ROLES.MENU
      }, fontItems)));
    }
  }]);

  return FontSizeTabProto;
}(_react.default.Component);

var FontSizeTab = (0, _accessibleMenu.default)(FontSizeTabProto, {
  useRovingTabindex: true
});
FontSizeTabProto.propTypes = {
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.objectOf(_propTypes.default.objectOf(_propTypes.default.string)),
  closedCaptionOptions: _propTypes.default.shape({
    enabled: _propTypes.default.bool,
    fontSize: _propTypes.default.string
  }),
  controller: _propTypes.default.shape({
    toggleClosedCaptionEnabled: _propTypes.default.func.isRequired,
    onClosedCaptionChange: _propTypes.default.func.isRequired
  }).isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  })
};
FontSizeTabProto.defaultProps = {
  language: 'en',
  localizableStrings: {},
  closedCaptionOptions: {},
  skinConfig: {}
};
module.exports = FontSizeTab;

},{"../../constants/constants":69,"../accessibleButton":8,"../higher-order/accessibleMenu":38,"../utils":63,"./selectionContainer":27,"classnames":86,"prop-types":370,"react":378}],24:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _dataSelector = _interopRequireDefault(require("../dataSelector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Manage font type screen
  */
var FontTypeTab =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FontTypeTab, _React$Component);

  function FontTypeTab(props) {
    var _this;

    _classCallCheck(this, FontTypeTab);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FontTypeTab).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeFontType", function (fontType) {
      var _this$props = _this.props,
          controller = _this$props.controller,
          closedCaptionOptions = _this$props.closedCaptionOptions;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('fontType', fontType);

      _this.setState({
        selectedFontType: fontType
      });
    });

    _this.state = {
      selectedFontType: props.closedCaptionOptions.fontType,
      availableFontTypes: ['Monospaced Serif', 'Proportional Serif', 'Monospaced Sans-Serif', 'Proportional Sans-Serif', 'Casual', 'Cursive', 'Small Capitals']
    };
    return _this;
  }
  /**
   * handle user selected new font type
   * @param {string} fontType - selected font type
   */


  _createClass(FontTypeTab, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          responsiveView = _this$props2.responsiveView,
          dataItemsPerPage = _this$props2.dataItemsPerPage,
          closedCaptionOptions = _this$props2.closedCaptionOptions;
      var _this$state = this.state,
          selectedFontType = _this$state.selectedFontType,
          availableFontTypes = _this$state.availableFontTypes;
      return _react.default.createElement("div", {
        className: "oo-font-type-tab"
      }, _react.default.createElement(_dataSelector.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.FONT_TYPE_MENU,
        viewSize: responsiveView,
        dataItemsPerPage: dataItemsPerPage,
        selectedData: selectedFontType,
        enabled: closedCaptionOptions.enabled,
        availableDataItems: availableFontTypes,
        onDataChange: this.changeFontType
      })));
    }
  }]);

  return FontTypeTab;
}(_react.default.Component);

FontTypeTab.propTypes = {
  dataItemsPerPage: _propTypes.default.objectOf(_propTypes.default.number),
  responsiveView: _propTypes.default.string
};
FontTypeTab.defaultProps = {
  dataItemsPerPage: {
    xs: 1,
    sm: 4,
    md: 8,
    lg: 8
  },
  responsiveView: 'md'
};
module.exports = FontTypeTab;

},{"../../constants/constants":69,"../dataSelector":34,"prop-types":370,"react":378}],25:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash.values"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _dataSelector = _interopRequireDefault(require("../dataSelector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * Tab to manage languages
 */
var LanguageTab =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LanguageTab, _React$Component);

  function LanguageTab(props) {
    var _this;

    _classCallCheck(this, LanguageTab);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LanguageTab).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeLanguage", function (language) {
      var availableLanguages = _this.props.closedCaptionOptions.availableLanguages;
      var invertedLocale = {};
      availableLanguages.languages.forEach(function (current) {
        invertedLocale[availableLanguages.locale[current]] = current;
      });

      if (!_this.props.closedCaptionOptions.enabled) {
        _this.props.controller.toggleClosedCaptions();
      }

      _this.props.controller.onClosedCaptionChange('language', invertedLocale[language]);

      _this.setState({
        selectedLanguage: language
      });
    });

    _this.state = {
      selectedLanguage: props.closedCaptionOptions.availableLanguages.locale[props.closedCaptionOptions.language]
    };
    return _this;
  }
  /**
   * Process changing language
   * @param {string} language - two chars language key
   */


  _createClass(LanguageTab, [{
    key: "render",
    value: function render() {
      return _react.default.createElement("div", {
        className: "oo-language-tab"
      }, _react.default.createElement(_dataSelector.default, _extends({}, this.props, {
        ariaLabel: _constants.default.ARIA_LABELS.LANGUAGE_MENU,
        viewSize: this.props.responsiveView,
        dataItemsPerPage: this.props.dataItemsPerPage,
        selectedData: this.state.selectedLanguage,
        enabled: this.props.closedCaptionOptions.enabled,
        availableDataItems: (0, _lodash.default)(this.props.closedCaptionOptions.availableLanguages.locale),
        onDataChange: this.changeLanguage
      })));
    }
  }]);

  return LanguageTab;
}(_react.default.Component);

LanguageTab.propTypes = {
  dataItemsPerPage: _propTypes.default.objectOf(_propTypes.default.number),
  responsiveView: _propTypes.default.string
};
LanguageTab.defaultProps = {
  dataItemsPerPage: {
    xs: 1,
    sm: 4,
    md: 8,
    lg: 8
  },
  responsiveView: 'md'
};
module.exports = LanguageTab;

},{"../../constants/constants":69,"../dataSelector":34,"lodash.values":363,"prop-types":370,"react":378}],26:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../utils"));

var _accessibleButton = _interopRequireDefault(require("../accessibleButton"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * On/Off switcher element
 * @param {Object} props – React props object
 * @returns {Object} React VDOM element
 */
var OnOffSwitch = function OnOffSwitch(props) {
  var closedCaptionOptions = props.closedCaptionOptions,
      skinConfig = props.skinConfig,
      language = props.language,
      localizableStrings = props.localizableStrings,
      ariaLabel = props.ariaLabel,
      role = props.role,
      controller = props.controller;
  var switchThumbClassName = (0, _classnames.default)({
    'oo-switch-thumb': true,
    'oo-switch-thumb-on': closedCaptionOptions.enabled,
    'oo-switch-thumb-off': !closedCaptionOptions.enabled
  });
  var switchBodyClassName = (0, _classnames.default)({
    'oo-switch-body': true,
    'oo-switch-body-off': !closedCaptionOptions.enabled
  });
  var onCaptionClassName = (0, _classnames.default)({
    'oo-switch-captions oo-switch-captions-on': true,
    'oo-switch-captions-active': closedCaptionOptions.enabled
  });
  var offCaptionClassName = (0, _classnames.default)({
    'oo-switch-captions oo-switch-captions-off': true,
    'oo-switch-captions-active': !closedCaptionOptions.enabled
  });
  var ccOnStyle = {
    backgroundColor: closedCaptionOptions.enabled && skinConfig.general.accentColor ? skinConfig.general.accentColor : null
  };

  var offString = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.OFF, localizableStrings);

  var onString = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.ON, localizableStrings);

  var handleOnOffSwitch = function handleOnOffSwitch() {
    return controller.toggleClosedCaptions();
  };

  return _react.default.createElement("div", {
    className: "oo-switch-container"
  }, _react.default.createElement("span", {
    className: offCaptionClassName
  }, offString), _react.default.createElement("div", {
    className: "oo-switch-element"
  }, _react.default.createElement("span", {
    className: switchBodyClassName,
    style: ccOnStyle
  }), _react.default.createElement("span", {
    className: switchThumbClassName
  })), _react.default.createElement("span", {
    className: onCaptionClassName
  }, onString), _react.default.createElement(_accessibleButton.default, {
    className: "oo-switch-container-selectable",
    ariaLabel: ariaLabel,
    ariaChecked: closedCaptionOptions.enabled,
    role: role || _constants.default.ARIA_ROLES.CHECKBOX,
    onClick: handleOnOffSwitch
  }));
};

OnOffSwitch.propTypes = {
  closedCaptionOptions: _propTypes.default.shape({
    enabled: _propTypes.default.bool
  }),
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  }),
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  ariaLabel: _propTypes.default.string,
  role: _propTypes.default.string,
  controller: _propTypes.default.shape({
    toggleClosedCaptionEnabled: _propTypes.default.func
  }).isRequired
};
OnOffSwitch.defaultProps = {
  closedCaptionOptions: {},
  skinConfig: {},
  language: 'en',
  localizableStrings: {},
  ariaLabel: '',
  role: ''
};
module.exports = OnOffSwitch;

},{"../../constants/constants":69,"../accessibleButton":8,"../utils":63,"classnames":86,"prop-types":370,"react":378}],27:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The selection container element
 * @param {Object} props – Props object
 * @returns {Object} React VDOM element
 */
var SelectionContainer = function SelectionContainer(props) {
  var title = props.title,
      ariaLabel = props.ariaLabel,
      role = props.role,
      children = props.children,
      className = props.className,
      selectionText = props.selectionText;
  return _react.default.createElement("div", {
    className: "oo-selection-container".concat(className ? " ".concat(className) : '')
  }, _react.default.createElement("div", {
    className: "oo-selection-inner-wrapper"
  }, _react.default.createElement("div", {
    className: "oo-selection-container-title"
  }, title, ":", ' ', _react.default.createElement("span", {
    className: "oo-selection-container-selection-text"
  }, selectionText)), _react.default.createElement("div", {
    className: "oo-selection-items-container",
    "aria-label": ariaLabel,
    role: role
  }, children)));
};

SelectionContainer.propTypes = {
  className: _propTypes.default.string,
  selectionText: _propTypes.default.string,
  title: _propTypes.default.string,
  ariaLabel: _propTypes.default.string,
  role: _propTypes.default.string,
  children: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.element]).isRequired
};
SelectionContainer.defaultProps = {
  className: '',
  selectionText: '',
  title: '',
  ariaLabel: '',
  role: ''
};
module.exports = SelectionContainer;

},{"prop-types":370,"react":378}],28:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../utils"));

var _accessibleButton = _interopRequireDefault(require("../accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("../higher-order/accessibleMenu"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

var _selectionContainer = _interopRequireDefault(require("./selectionContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Manage text enhancements
 */
var TextEnhancementsTabProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TextEnhancementsTabProto, _React$Component);

  function TextEnhancementsTabProto(props) {
    var _this;

    _classCallCheck(this, TextEnhancementsTabProto);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextEnhancementsTabProto).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeTextEnhancement", function (textEnhancement) {
      var _this$props = _this.props,
          closedCaptionOptions = _this$props.closedCaptionOptions,
          controller = _this$props.controller;

      if (!closedCaptionOptions.enabled) {
        controller.toggleClosedCaptionEnabled();
      }

      controller.onClosedCaptionChange('textEnhancement', textEnhancement);

      _this.setState({
        selectedTextEnhancement: textEnhancement // eslint-disable-line

      });
    });

    _this.state = {
      selectedTextEnhancement: _this.props.closedCaptionOptions.textEnhancement,
      // eslint-disable-line
      textEnhancements: ['Uniform', 'Depressed', 'Raised', 'Shadow']
    };
    return _this;
  }
  /**
   * Update the classes of the element where the component is binded to
   * @param {*} item - the item
   * @param {*} elementType - the elementType
   * @returns {Array} list of classnames to get rendered
   */


  _createClass(TextEnhancementsTabProto, [{
    key: "setClassname",
    value: function setClassname(item, elementType) {
      var closedCaptionOptions = this.props.closedCaptionOptions;
      return (0, _classnames.default)({
        'oo-text-enhancement-letter': elementType === 'letter',
        'oo-text-enhancement-label': elementType === 'label',
        'oo-text-enhancement-selected': closedCaptionOptions.textEnhancement === item && closedCaptionOptions.enabled,
        'oo-text-enhancement-label-selected': closedCaptionOptions.textEnhancement === item && closedCaptionOptions.enabled && elementType === 'label',
        'oo-disabled': !closedCaptionOptions.enabled
      });
    }
    /**
     * handle change of text enhancement by user
     * @param {string} textEnhancement - the value of textEhancement
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          closedCaptionOptions = _this$props2.closedCaptionOptions,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          skinConfig = _this$props2.skinConfig;
      var textEnhancements = this.state.textEnhancements;

      var textEnhancementTitle = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.TEXT_ENHANCEMENT, localizableStrings);

      var textEnhancementSelection = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[closedCaptionOptions.textEnhancement.toUpperCase()], localizableStrings);

      var textEnhancementItems = [];
      textEnhancements.forEach(function (textEnhancement, index) {
        // accent color
        var isSelected = closedCaptionOptions.textEnhancement === textEnhancement;
        var selectedTextEnhancementStyle = {};

        if (closedCaptionOptions.enabled && skinConfig.general.accentColor && isSelected) {
          selectedTextEnhancementStyle = {
            color: skinConfig.general.accentColor
          };
        }

        var itemLabel = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT[textEnhancement.toUpperCase()], localizableStrings);

        textEnhancementItems.push(_react.default.createElement(_accessibleButton.default, {
          key: index // eslint-disable-line
          ,
          className: "oo-text-enhancements-container",
          ariaLabel: itemLabel,
          ariaChecked: isSelected,
          role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
          onClick: function onClick() {
            return _this2.changeTextEnhancement(textEnhancement);
          }
        }, _react.default.createElement("span", {
          className: "".concat(_this2.setClassname(textEnhancement, 'letter'), " oo-text-enhancement-letter-").concat(textEnhancement),
          style: selectedTextEnhancementStyle
        }, "A"), _react.default.createElement("span", {
          className: _this2.setClassname(textEnhancement, 'label'),
          style: selectedTextEnhancementStyle
        }, itemLabel)));
      });
      return _react.default.createElement("div", {
        className: "oo-text-enhancements-tab"
      }, _react.default.createElement("div", {
        className: "oo-text-enhancements-inner-wrapper"
      }, _react.default.createElement(_selectionContainer.default, {
        title: textEnhancementTitle,
        selectionText: textEnhancementSelection,
        ariaLabel: _constants.default.ARIA_LABELS.TEXT_ENHANCEMENTS_MENU,
        role: _constants.default.ARIA_ROLES.MENU
      }, textEnhancementItems)));
    }
  }]);

  return TextEnhancementsTabProto;
}(_react.default.Component);

var TextEnhancementsTab = (0, _accessibleMenu.default)(TextEnhancementsTabProto, {
  useRovingTabindex: true
});
TextEnhancementsTabProto.propTypes = {
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.objectOf(_propTypes.default.objectOf(_propTypes.default.string)),
  controller: _propTypes.default.shape({
    toggleClosedCaptionEnabled: _propTypes.default.func.isRequired,
    onClosedCaptionChange: _propTypes.default.func.isRequired
  }).isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  }),
  closedCaptionOptions: _propTypes.default.shape({
    textEnhancement: _propTypes.default.string,
    enabled: _propTypes.default.bool
  })
};
TextEnhancementsTabProto.defaultProps = {
  language: 'en',
  localizableStrings: {},
  skinConfig: {},
  closedCaptionOptions: {}
};
module.exports = TextEnhancementsTab;

},{"../../constants/constants":69,"../accessibleButton":8,"../higher-order/accessibleMenu":38,"../utils":63,"./selectionContainer":27,"classnames":86,"prop-types":370,"react":378}],29:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("./higher-order/accessibleMenu"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The color selector component
 */
var ColorSelectorProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ColorSelectorProto, _React$Component);

  function ColorSelectorProto() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ColorSelectorProto);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ColorSelectorProto)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setClassname", function (item) {
      var _this$props = _this.props,
          selectedColor = _this$props.selectedColor,
          enabled = _this$props.enabled;
      return (0, _classnames.default)({
        'oo-item': true,
        'oo-item-selected': selectedColor === item && enabled,
        'oo-disabled': !enabled
      });
    });

    return _this;
  }

  _createClass(ColorSelectorProto, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          ariaLabel = _this$props2.ariaLabel,
          selectedColor = _this$props2.selectedColor,
          skinConfig = _this$props2.skinConfig,
          enabled = _this$props2.enabled,
          onColorChange = _this$props2.onColorChange,
          colors = _this$props2.colors;
      var colorItems = [];
      colors.forEach(function (color, index) {
        // accent color
        var isSelected = selectedColor === color;
        var activeColorStyle = {};

        if (enabled && isSelected && skinConfig.general.accentColor) {
          var selectedColorStyle = 'solid ';
          selectedColorStyle += skinConfig.general.accentColor;
          activeColorStyle = {
            border: selectedColorStyle
          };
        }

        var currentAriaLabel = "".concat(ariaLabel, " ").concat(color);
        colorItems.push(_react.default.createElement("div", {
          key: index // eslint-disable-line
          ,
          className: _this2.setClassname(color),
          style: activeColorStyle,
          role: _constants.default.ARIA_ROLES.PRESENTATION
        }, _react.default.createElement(_accessibleButton.default, {
          className: "oo-color-item oo-color-item-".concat(color),
          ariaLabel: currentAriaLabel,
          ariaChecked: isSelected,
          role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
          onClick: function onClick() {
            return onColorChange(color);
          }
        })));
      });
      return _react.default.createElement("div", {
        className: "oo-color-selector",
        "aria-label": ariaLabel,
        role: _constants.default.ARIA_ROLES.MENU
      }, colorItems);
    }
  }]);

  return ColorSelectorProto;
}(_react.default.Component);

var ColorSelector = (0, _accessibleMenu.default)(ColorSelectorProto, {
  useRovingTabindex: true
});
ColorSelectorProto.propTypes = {
  enabled: _propTypes.default.bool,
  selectedColor: _propTypes.default.string,
  colors: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  ariaLabel: _propTypes.default.string.isRequired,
  onColorChange: _propTypes.default.func,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  })
};
ColorSelectorProto.defaultProps = {
  enabled: false,
  selectedColor: undefined,
  onColorChange: function onColorChange() {},
  skinConfig: {
    general: {
      accentColor: 'red'
    }
  }
};
module.exports = ColorSelector;

},{"../constants/constants":69,"./accessibleButton":8,"./higher-order/accessibleMenu":38,"classnames":86,"prop-types":370,"react":378}],30:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _scrubberBar = _interopRequireDefault(require("./scrubberBar"));

var _utils = _interopRequireDefault(require("./utils"));

var _popover = _interopRequireDefault(require("../views/popover"));

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _playbackSpeedButton = _interopRequireDefault(require("./playbackSpeedButton"));

var _volumeControls = _interopRequireDefault(require("./volumeControls"));

var _videoQualityPanel = _interopRequireDefault(require("./videoQualityPanel"));

var _playbackSpeedPanel = _interopRequireDefault(require("./playbackSpeedPanel"));

var _closedCaptionPopover = _interopRequireDefault(require("./closed-caption/closedCaptionPopover"));

var _closedCaptionMultiAudioMenu = _interopRequireDefault(require("./closed-caption-multi-audio-menu/closedCaptionMultiAudioMenu"));

var _preserveKeyboardFocus = _interopRequireDefault(require("./higher-order/preserveKeyboardFocus"));

var _logo = _interopRequireDefault(require("./logo"));

var _skipControls = _interopRequireDefault(require("./skipControls"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The controlBar Component
 */
var ControlBar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ControlBar, _React$Component);

  function ControlBar(props) {
    var _this;

    _classCallCheck(this, ControlBar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlBar).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getResponsiveUIMultiple", function (responsiveView) {
      var skinConfig = _this.props.skinConfig;
      return skinConfig.responsive.breakpoints[responsiveView].multiplier;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleControlBarMouseUp", function (event) {
      var controller = _this.props.controller;

      if (event.type === 'touchend' || !_this.isMobile) {
        event.stopPropagation(); // W3C

        controller.state.accessibilityControlsEnabled = true;
        controller.startHideControlBarTimer();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFullscreenClick", function (event) {
      // On mobile, we get a following click event that fires after the Video
      // has gone full screen, clicking on a different UI element. So we prevent
      // the following click.
      event.stopPropagation();
      event.cancelBubble = true; // eslint-disable-line

      event.preventDefault();
      var controller = _this.props.controller;

      if (controller) {
        controller.toggleFullscreen();

        if (_this.vr && _this.isPhone && controller.isVrStereo) {
          _this.toggleStereoVr();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleStereoVrClick", function (event) {
      if (!_this.vr) {
        return;
      }

      event.stopPropagation();
      event.cancelBubble = true; // eslint-disable-line

      event.preventDefault();

      _this.toggleStereoVr();

      var controller = _this.props.controller;

      if (!controller) {
        return;
      }

      var fullscreen = controller.state.isFullScreenSupported || controller.state.isVideoFullScreenSupported ? controller.state.fullscreen : controller.state.isFullWindow;

      if (!fullscreen && typeof controller.toggleFullscreen === 'function') {
        controller.toggleFullscreen();
      }

      if (controller.isVrStereo) {
        controller.checkDeviceOrientation = true;

        _this.setLandscapeScreenOrientation();
      } else {
        _this.unlockScreenOrientation();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setLandscapeScreenOrientation", function () {
      var controller = _this.props.controller;

      if (controller && controller.checkDeviceOrientation) {
        if (_utils.default.setLandscapeScreenOrientation) {
          _utils.default.setLandscapeScreenOrientation();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "unlockScreenOrientation", function () {
      if (screen.orientation && screen.orientation.unlock) {
        // eslint-disable-line
        screen.orientation.unlock(); // eslint-disable-line
      } else if (screen.unlockOrientation) {
        // eslint-disable-line
        screen.unlockOrientation(); // eslint-disable-line
      } else if (screen.mozUnlockOrientation) {
        // eslint-disable-line
        screen.mozUnlockOrientation(); // eslint-disable-line
      } else if (screen.msUnlockOrientation) {
        // eslint-disable-line
        screen.msUnlockOrientation(); // eslint-disable-line
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "toggleStereoVr", function () {
      var controller = _this.props.controller;

      if (controller && typeof controller.toggleStereoVr === 'function') {
        controller.toggleStereoVr();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLiveClick", function (event) {
      event.stopPropagation();
      event.cancelBubble = true; // eslint-disable-line

      event.preventDefault();
      var _this$props = _this.props,
          controller = _this$props.controller,
          duration = _this$props.duration;
      controller.onLiveClick();
      controller.seek(duration);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVolumeIconClick", function (event) {
      var _this$props2 = _this.props,
          clickToVolumeScreen = _this$props2.clickToVolumeScreen,
          controller = _this$props2.controller;

      if (clickToVolumeScreen) {
        controller.toggleScreen(_constants.default.SCREEN.VOLUME_SCREEN, true);
      } else if (_this.isMobile) {
        controller.startHideControlBarTimer();
        event.stopPropagation(); // W3C

        if (!controller.state.volumeState.volumeSliderVisible) {
          controller.showVolumeSliderBar();
        } else {
          controller.handleMuteClick();
        }
      } else {
        controller.handleMuteClick();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayClick", function () {
      var controller = _this.props.controller;
      controller.togglePlayPause();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleShareClick", function () {
      var controller = _this.props.controller;
      controller.toggleShareScreen();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMenuToggleClick", function (menuOptionsId) {
      _this.configureMenuAutofocus(menuOptionsId);

      var _this$props3 = _this.props,
          controller = _this$props3.controller,
          responsiveView = _this$props3.responsiveView,
          skinConfig = _this$props3.skinConfig;

      if (controller.state.isMobile || responsiveView === skinConfig.responsive.breakpoints.xs.id) {
        var screenToToggle = _constants.default.MENU_OPTIONS_SCREENS[menuOptionsId];
        controller.toggleScreen(screenToToggle);
      } else {
        _this.togglePopover(menuOptionsId);

        _this.closeOtherPopovers(menuOptionsId);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleAirPlayClick", function () {
      var controller = _this.props.controller;
      controller.onAirplayButtonClicked();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMultiAudioClick", function () {
      _this.configureMenuAutofocus(_constants.default.MENU_OPTIONS.MULTI_AUDIO);

      var _this$props4 = _this.props,
          controller = _this$props4.controller,
          skinConfig = _this$props4.skinConfig,
          responsiveView = _this$props4.responsiveView;

      if (skinConfig.responsive && skinConfig.responsive.breakpoints && skinConfig.responsive.breakpoints.lg && responsiveView === skinConfig.responsive.breakpoints.lg.id) {
        _this.togglePopover(_constants.default.MENU_OPTIONS.MULTI_AUDIO);

        _this.closeOtherPopovers(_constants.default.MENU_OPTIONS.MULTI_AUDIO);
      } else {
        controller.toggleMultiAudioScreen();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "configureMenuAutofocus", function (menu) {
      var controller = _this.props.controller;
      var menuOptions = controller.state[menu] || {};

      var menuToggleButton = _this.getToggleButtons(menu);

      if (menuOptions.showPopover) {
        // Reset autoFocus property when closing the menu
        menuOptions.autoFocus = false;
      } else if (menuToggleButton) {
        // If the menu was activated via keyboard we should
        // autofocus on the first element
        menuOptions.autoFocus = menuToggleButton.wasTriggeredWithKeyboard();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getToggleButtons", function (popoverName) {
      var controller = _this.props.controller;

      if (controller && controller.toggleButtons) {
        return controller.toggleButtons[popoverName];
      }

      return {};
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setToggleButtons", function (popoverName, menu) {
      var controller = _this.props.controller;

      if (controller && controller.toggleButtons) {
        controller.toggleButtons[popoverName] = menu;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closePopover", function (menu, params) {
      var controller = _this.props.controller;

      if (controller && typeof controller.closePopover === 'function') {
        controller.closePopover(menu, params);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closeOtherPopovers", function (popoverName) {
      var controller = _this.props.controller;

      if (controller && typeof controller.closeOtherPopovers === 'function') {
        controller.closeOtherPopovers(popoverName);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "togglePopover", function (menu) {
      var controller = _this.props.controller;
      var menuOptions = controller.state[menu];

      var menuToggleButton = _this.getToggleButtons(menu); // Reset button flag that tracks keyboard interaction


      if (menuToggleButton && menuOptions && menuOptions.showPopover) {
        menuToggleButton.wasTriggeredWithKeyboard(false);
      }

      controller.togglePopover(menu);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDiscoveryClick", function () {
      var controller = _this.props.controller;
      controller.toggleDiscoveryScreen();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMoreOptionsClick", function () {
      var controller = _this.props.controller;
      controller.toggleMoreOptionsScreen(_this.moreOptionsItems);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getAudioControlsConfig", function () {
      var skinConfig = _this.props.skinConfig; // We receive location param in desktopContent, instead of audioOnly.
      // This is necessary to display or not the button, depending on Backlot settings.

      if (!(skinConfig && skinConfig.buttons && skinConfig.buttons.audioOnly && skinConfig.buttons.audioOnly.desktop && Array.isArray(skinConfig.buttons.audioOnly.desktop))) {
        return [];
      }

      var audioOnlyButtonsList = skinConfig.buttons.audioOnly.desktop;
      var desktopContent = skinConfig.buttons.desktopContent;
      var defaultConfig = JSON.parse(JSON.stringify(audioOnlyButtonsList));
      desktopContent.forEach(function (item) {
        if (item.location !== 'none') {
          return;
        }

        defaultConfig.filter(function (field) {
          return field.name === item.name;
        }).forEach(function (field) {
          field.location = 'none'; // eslint-disable-line
        });
      });
      return defaultConfig;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "populateControlBar", function () {
      var _this$props5 = _this.props,
          audioOnly = _this$props5.audioOnly,
          componentWidth = _this$props5.componentWidth,
          controller = _this$props5.controller,
          controlBarItems = _this$props5.controlBarItems,
          playerState = _this$props5.playerState,
          isLiveStream = _this$props5.isLiveStream,
          skinConfig = _this$props5.skinConfig,
          currentPlayhead = _this$props5.currentPlayhead,
          duration = _this$props5.duration,
          totalTime = _this$props5.totalTime,
          language = _this$props5.language,
          localizableStrings = _this$props5.localizableStrings,
          responsiveView = _this$props5.responsiveView,
          hideVolumeControls = _this$props5.hideVolumeControls,
          playheadTime = _this$props5.playheadTime;

      var playButtonDetails = _utils.default.getPlayButtonDetails(playerState);

      var playIcon = playButtonDetails.icon;
      var playPauseAriaLabel = playButtonDetails.ariaLabel;
      var playButtonTooltip = playButtonDetails.buttonTooltip;
      var mutedInUi = controller.state.volumeState.muted || controller.state.volumeState.volume === 0;
      var volumeIcon = mutedInUi ? 'volumeOff' : 'volume';
      var volumeAriaLabel = mutedInUi ? _constants.default.ARIA_LABELS.UNMUTE : _constants.default.ARIA_LABELS.MUTE;
      var fullscreenIcon = controller.state.fullscreen ? 'compress' : 'expand';
      var fullscreenAriaLabel = controller.state.fullscreen ? _constants.default.ARIA_LABELS.EXIT_FULLSCREEN : _constants.default.ARIA_LABELS.FULLSCREEN;
      var stereoIcon;
      var stereoAriaLabel;

      if (_this.vr) {
        stereoIcon = 'stereoOff';
        stereoAriaLabel = _constants.default.ARIA_LABELS.STEREO_OFF;

        if (controller && controller.isVrStereo) {
          stereoIcon = 'stereoOn';
          stereoAriaLabel = _constants.default.ARIA_LABELS.STEREO_ON;
        }
      }

      var durationSetting = {
        color: skinConfig.controlBar.iconStyle.inactive.color
      };
      var timeShift = currentPlayhead - duration; // checking timeShift < 1 seconds (not === 0) as processing of the click after
      // we rewinded and then went live may take some time

      var isLiveNow = Math.abs(timeShift) < 1;
      var liveClick = isLiveNow ? null : _this.handleLiveClick;
      var totalTimeContent = isLiveStream ? null : _react.default.createElement("span", {
        className: "oo-total-time"
      }, totalTime);

      var liveText = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.LIVE, localizableStrings);

      var liveClass = (0, _classnames.default)({
        'oo-control-bar-item oo-live oo-live-indicator': true,
        'oo-live-nonclickable': isLiveNow
      });
      var qualityClass = (0, _classnames.default)({
        'oo-quality': true,
        'oo-selected': controller.state.videoQualityOptions.showPopover
      });
      var captionClass = (0, _classnames.default)({
        'oo-closed-caption': true,
        'oo-selected': controller.state.closedCaptionOptions.showPopover
      });
      var playbackSpeedClass = (0, _classnames.default)({
        'oo-selected': controller.state.playbackSpeedOptions.showPopover
      });
      var multiAudioClass = (0, _classnames.default)({
        'oo-multiaudio': true,
        'oo-selected': controller.state.multiAudioOptions.showPopover
      });
      var selectedStyle = {
        color: skinConfig.general.accentColor || null
      };
      var moreOptionsStyle = {
        position: 'relative',
        textAlign: 'right'
      }; // Map of tooltip aligments, which vary depending of the button's order within
      // the control bar. This is populated below.

      var tooltipAlignments = {}; // Props that need to be passed to all control bar buttons

      var commonButtonProps = {
        language: language,
        localizableStrings: localizableStrings,
        responsiveView: responsiveView,
        skinConfig: skinConfig,
        controller: controller,
        getTooltipAlignment: function getTooltipAlignment(key) {
          return tooltipAlignments[key] || _constants.default.TOOLTIP_ALIGNMENT.CENTER;
        }
      };
      var closedCaptionsList = controller.state.closedCaptionOptions.availableLanguages && controller.state.closedCaptionOptions.availableLanguages.languages ? controller.state.closedCaptionOptions.availableLanguages.languages : [];
      var multiAudioList = controller.state.multiAudio && controller.state.multiAudio.tracks ? controller.state.multiAudio.tracks : [];
      var controlItemTemplates = {
        playPause: _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.PLAY_PAUSE,
          className: "oo-play-pause",
          focusId: _constants.default.CONTROL_BAR_KEYS.PLAY_PAUSE,
          ariaLabel: playPauseAriaLabel,
          icon: playIcon,
          tooltip: playButtonTooltip,
          onClick: _this.handlePlayClick
        })),
        live: _react.default.createElement("a", {
          // eslint-disable-line
          key: _constants.default.CONTROL_BAR_KEYS.LIVE,
          className: liveClass,
          ref: "LiveButton" // eslint-disable-line
          ,
          onClick: liveClick
        }, _react.default.createElement("div", {
          className: "oo-live-circle"
        }), _react.default.createElement("span", {
          className: "oo-live-text"
        }, liveText)),
        volume: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.VOLUME,
          className: "oo-volume oo-control-bar-item"
        }, _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          className: "oo-mute-unmute",
          focusId: _constants.default.CONTROL_BAR_KEYS.VOLUME,
          ariaLabel: volumeAriaLabel,
          icon: volumeIcon,
          tooltip: mutedInUi ? _constants.default.SKIN_TEXT.UNMUTE : _constants.default.SKIN_TEXT.MUTE,
          onClick: _this.handleVolumeIconClick
        })), !hideVolumeControls && _react.default.createElement(_volumeControls.default, _this.props)),
        timeDuration: _react.default.createElement("a", {
          // eslint-disable-line
          key: _constants.default.CONTROL_BAR_KEYS.TIME_DURATION,
          className: "oo-time-duration oo-control-bar-duration",
          style: durationSetting
        }, _react.default.createElement("span", null, playheadTime), totalTimeContent),
        flexibleSpace: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.FLEXIBLE_SPACE,
          className: "oo-flexible-space oo-control-bar-flex-space"
        }),
        moreOptions: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.MORE_OPTIONS,
          className: "oo-control-bar-item"
        }, _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.MORE_OPTIONS,
          className: "oo-more-options",
          style: moreOptionsStyle,
          focusId: _constants.default.CONTROL_BAR_KEYS.MORE_OPTIONS,
          ariaHidden: true // eslint-disable-line
          ,
          icon: "ellipsis",
          tooltip: _constants.default.SKIN_TEXT.MORE_OPTIONS,
          onClick: _this.handleMoreOptionsClick
        }))),
        quality: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.QUALITY,
          className: "oo-popover-button-container"
        }, _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          onRef: function onRef(menu) {
            return _this.setToggleButtons(_constants.default.MENU_OPTIONS.VIDEO_QUALITY, menu);
          },
          style: selectedStyle,
          className: qualityClass,
          focusId: _constants.default.CONTROL_BAR_KEYS.QUALITY,
          ariaLabel: _constants.default.ARIA_LABELS.VIDEO_QUALITY,
          ariaHasPopup: true,
          ariaExpanded: controller.state.videoQualityOptions.showPopover ? true : null,
          icon: "quality",
          tooltip: _constants.default.SKIN_TEXT.VIDEO_QUALITY,
          onClick: function onClick() {
            return _this.handleMenuToggleClick(_constants.default.MENU_OPTIONS.VIDEO_QUALITY);
          }
        })), controller.state.videoQualityOptions.showPopover && _react.default.createElement(_popover.default, {
          autoFocus: controller.state.videoQualityOptions.autoFocus,
          closeActionEnabled: controller.state.accessibilityControlsEnabled,
          closeAction: function closeAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.VIDEO_QUALITY);
          }
        }, _react.default.createElement(_videoQualityPanel.default, _extends({}, _this.props, {
          onClose: function onClose() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.VIDEO_QUALITY);
          },
          isPopover: true
        })))),
        discovery: _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.DISCOVERY,
          className: "oo-discovery",
          focusId: _constants.default.CONTROL_BAR_KEYS.DISCOVERY,
          ariaHidden: true // eslint-disable-line
          ,
          icon: "discovery",
          tooltip: _constants.default.SKIN_TEXT.DISCOVER,
          onClick: _this.handleDiscoveryClick
        })),
        closedCaption: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION,
          className: "oo-popover-button-container"
        }, _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          onRef: function onRef(menu) {
            return _this.setToggleButtons(_constants.default.MENU_OPTIONS.CLOSED_CAPTIONS, menu);
          },
          style: selectedStyle,
          className: captionClass,
          focusId: _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION,
          ariaLabel: _constants.default.ARIA_LABELS.CLOSED_CAPTIONS,
          ariaHasPopup: true,
          ariaExpanded: controller.state.closedCaptionOptions.showPopover ? true : null,
          icon: "cc",
          tooltip: _constants.default.SKIN_TEXT.CLOSED_CAPTIONS,
          onClick: function onClick() {
            return _this.handleMenuToggleClick(_constants.default.MENU_OPTIONS.CLOSED_CAPTIONS);
          }
        })), controller.state.closedCaptionOptions.showPopover && _react.default.createElement(_popover.default, {
          popoverClassName: "oo-popover oo-popover-pull-right",
          autoFocus: controller.state.closedCaptionOptions.autoFocus,
          closeActionEnabled: controller.state.accessibilityControlsEnabled,
          closeAction: function closeAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.CLOSED_CAPTIONS);
          }
        }, _react.default.createElement(_closedCaptionPopover.default, _extends({}, _this.props, {
          togglePopoverAction: function togglePopoverAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.CLOSED_CAPTIONS);
          }
        })))),

        /**
         * This function returns the chromecast button definition using
         * the provided button from the sdk (agnostic web component)
         * @private
         * @returns {Object} The button definition
         */
        chromecast: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.CHROMECAST,
          tooltip: _constants.default.SKIN_TEXT.CHROMECAST,
          className: "oo-cast oo-control-bar-item"
        }, _react.default.createElement("google-cast-launcher", {
          class: "oo-icon"
        })),
        airPlay: _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.AIRPLAY,
          className: "oo-airplay",
          focusId: _constants.default.CONTROL_BAR_KEYS.AIRPLAY,
          ariaLabel: _constants.default.ARIA_LABELS.AIRPLAY,
          icon: controller.state.airplay && controller.state.airplay.statusIcon,
          tooltip: _constants.default.SKIN_TEXT.AIRPLAY,
          onClick: _this.handleAirPlayClick
        })),
        audioAndCC: closedCaptionsList.length === 0 && multiAudioList.length === 0 ? null : _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.AUDIO_AND_CC,
          className: "oo-popover-button-container"
        }, _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          onRef: function onRef(menu) {
            return _this.setToggleButtons(_constants.default.MENU_OPTIONS.MULTI_AUDIO, menu);
          },
          style: selectedStyle,
          className: multiAudioClass,
          focusId: _constants.default.CONTROL_BAR_KEYS.AUDIO_AND_CC,
          ariaLabel: _constants.default.ARIA_LABELS.MULTI_AUDIO,
          ariaHasPopup: true,
          ariaExpanded: controller.state.multiAudioOptions.showPopover ? true : null,
          icon: "audioAndCC",
          tooltip: _constants.default.SKIN_TEXT.AUDIO,
          onClick: _this.handleMultiAudioClick
        })), controller.state.multiAudioOptions.showPopover && _react.default.createElement(_popover.default, {
          popoverClassName: "oo-popover oo-popover-pull-right oo-cc-ma-container",
          autoFocus: controller.state.multiAudioOptions.autoFocus,
          closeActionEnabled: controller.state.accessibilityControlsEnabled,
          closeAction: function closeAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.MULTI_AUDIO);
          }
        }, _react.default.createElement(_closedCaptionMultiAudioMenu.default, _extends({
          language: language,
          localizableStrings: localizableStrings,
          menuClassName: "oo-cc-ma-menu--popover",
          togglePopoverAction: function togglePopoverAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.MULTI_AUDIO);
          }
        }, _this.props)))),
        playbackSpeed: _react.default.createElement("div", {
          key: _constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED,
          className: "oo-popover-button-container"
        }, _react.default.createElement(_playbackSpeedButton.default, _extends({}, commonButtonProps, {
          onRef: function onRef(menu) {
            return _this.setToggleButtons(_constants.default.MENU_OPTIONS.PLAYBACK_SPEED, menu);
          },
          className: playbackSpeedClass,
          style: controller.state.playbackSpeedOptions.showPopover ? selectedStyle : null,
          focusId: _constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED,
          ariaHasPopup: true // eslint-disable-line
          ,
          ariaExpanded: controller.state.playbackSpeedOptions.showPopover ? true : null,
          tooltip: _constants.default.SKIN_TEXT.PLAYBACK_SPEED,
          onClick: function onClick() {
            return _this.handleMenuToggleClick(_constants.default.MENU_OPTIONS.PLAYBACK_SPEED);
          }
        })), controller.state.playbackSpeedOptions.showPopover && _react.default.createElement(_popover.default, {
          autoFocus: controller.state.playbackSpeedOptions.autoFocus,
          closeActionEnabled: controller.state.accessibilityControlsEnabled,
          closeAction: function closeAction() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.PLAYBACK_SPEED);
          }
        }, _react.default.createElement(_playbackSpeedPanel.default, {
          isPopover: true,
          language: language,
          localizableStrings: localizableStrings,
          controller: controller,
          skinConfig: skinConfig,
          onClose: function onClose() {
            return _this.closePopover(_constants.default.MENU_OPTIONS.PLAYBACK_SPEED);
          }
        }))),
        share: _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.SHARE,
          className: "oo-share",
          focusId: _constants.default.CONTROL_BAR_KEYS.SHARE,
          ariaHidden: true,
          icon: "share",
          tooltip: _constants.default.SKIN_TEXT.SHARE,
          onClick: _this.handleShareClick
        })),
        stereoscopic: !!(_this.vr && _this.isPhone) && _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.STEREOSCOPIC,
          className: "oo-video-type oo-vr-stereo-button",
          focusId: _constants.default.CONTROL_BAR_KEYS.STEREOSCOPIC,
          ariaLabel: stereoAriaLabel,
          icon: stereoIcon,
          onClick: _this.handleStereoVrClick
        })),
        fullscreen: _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
          key: _constants.default.CONTROL_BAR_KEYS.FULLSCREEN,
          className: "oo-fullscreen",
          focusId: _constants.default.CONTROL_BAR_KEYS.FULLSCREEN,
          ariaLabel: fullscreenAriaLabel,
          icon: fullscreenIcon,
          tooltip: controller.state.fullscreen ? _constants.default.SKIN_TEXT.EXIT_FULL_SCREEN : _constants.default.SKIN_TEXT.FULL_SCREEN,
          onClick: _this.handleFullscreenClick
        })),
        logo: _react.default.createElement(_logo.default, {
          key: _constants.default.CONTROL_BAR_KEYS.LOGO,
          imageUrl: skinConfig.controlBar.logo.imageResource.url,
          clickUrl: skinConfig.controlBar.logo.clickUrl,
          target: skinConfig.controlBar.logo.target,
          width: responsiveView !== skinConfig.responsive.breakpoints.xs.id ? skinConfig.controlBar.logo.width : null,
          height: skinConfig.controlBar.logo.height
        }),
        skipControls: _react.default.createElement(_skipControls.default, {
          key: _constants.default.CONTROL_BAR_KEYS.SKIP_CONTROLS,
          buttonConfig: _utils.default.getPropertyValue(skinConfig, 'skipControls.controlBarSkipControls', {}),
          forceShowButtons: true,
          className: "oo-absolute-centered oo-control-bar-item",
          config: controller.state.skipControls,
          language: language,
          localizableStrings: localizableStrings,
          responsiveView: responsiveView,
          skinConfig: skinConfig,
          controller: controller,
          currentPlayhead: currentPlayhead,
          a11yControls: controller.accessibilityControls,
          isInactive: !controller.state.controlBarVisible,
          isInBackground: controller.state.scrubberBar.isHovering,
          onFocus: _this.handleFocus
        })
      };
      var defaultItems;

      if (controlBarItems && controlBarItems.length) {
        defaultItems = controlBarItems;
      } else if (audioOnly) {
        defaultItems = skinConfig.buttons.audioOnly ? skinConfig.buttons.audioOnly.desktop : [];
      } else {
        defaultItems = controller.state.isPlayingAd ? skinConfig.buttons.desktopAd : skinConfig.buttons.desktopContent;
      } // if mobile and not showing the slider or the icon, extra space can be added to control bar width. If volume bar is shown instead of slider, add some space as well:


      var volumeItem = defaultItems.find(function (item) {
        return item.name === 'volume';
      });
      var extraSpaceVolume = 0;

      if (volumeItem) {
        var extraSpaceVolumeSlider = _this.isMobile && !controller.state.volumeState.volumeSliderVisible || volumeItem && _utils.default.isIos() ? +volumeItem.minWidth : 0;
        var extraSpaceVolumeBar = _this.isMobile ? 0 : +volumeItem.minWidth / 2; // eslint-disable-line

        extraSpaceVolume = extraSpaceVolumeSlider + extraSpaceVolumeBar;
      } // if no hours, add extra space to control bar width:


      var hourInSec = 3600;
      var hours = parseInt(duration / hourInSec, 10);
      var extraSpaceDuration = hours > 0 ? 0 : 45; // eslint-disable-line

      var controlBarLeftRightPadding = _constants.default.UI.DEFAULT_SCRUBBERBAR_LEFT_RIGHT_PADDING * 2; // eslint-disable-line

      var defaultControlBarItems = defaultItems.filter(function (item) {
        var shareContent = _utils.default.getPropertyValue(skinConfig, 'shareScreen.shareContent', []);

        var socialContent = _utils.default.getPropertyValue(skinConfig, 'shareScreen.socialContent', []);

        var onlySocialTab = shareContent.length === 1 && shareContent[0] === 'social';

        var availableLanguages = _utils.default.getPropertyValue(controller, 'state.closedCaptionOptions.availableLanguages.languages', []); // filter out unrecognized button names


        return typeof controlItemTemplates[item.name] !== 'undefined' // filter out disabled buttons
        && item.location !== 'none' // filter out speed controls for live, ads and VR
        && (item.name !== _constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED || !isLiveStream && !controller.videoVr && !controller.state.isOoyalaAds) // do not show share button if not share options are available
        && (item.name !== 'share' || !controller.state.isOoyalaAds && shareContent.length && (!onlySocialTab || socialContent.length)) // do not show CC button if no CC available
        && (item.name !== _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION || availableLanguages.length && !controller.state.isOoyalaAds) // do not show quality button if no bitrates available
        && (item.name !== 'quality' || !controller.state.isOoyalaAds && controller.state.videoQualityOptions.availableBitrates) // do not show discovery button if no related videos available
        && (item.name !== 'discovery' || !controller.state.isOoyalaAds && controller.state.metadata && controller.state.metadata.modules && controller.state.metadata.modules['discovery-ui'] && controller.state.discoveryData) // do not show logo if no image url available
        && (item.name !== 'logo' || skinConfig.controlBar.logo.imageResource.url) && (item.name !== 'volume' || !_utils.default.isIos()) // not sure what to do when there are multi streams
        && (item.name !== 'live' || typeof isLiveStream !== 'undefined' && isLiveStream) && (item.name !== 'audioAndCC' || controller.state.multiAudio) && (item.name !== 'chromecast' || controller.state.cast.showButton) && (item.name !== 'airPlay' || controller.state.airplay && controller.state.airplay.available);
      });

      var collapsedResult = _utils.default.collapse(componentWidth + _this.responsiveUIMultiple * (extraSpaceDuration + extraSpaceVolume - controlBarLeftRightPadding), defaultControlBarItems, _this.responsiveUIMultiple);

      var collapsedControlBarItems = collapsedResult.fit || {};
      var collapsedMoreOptionsItems = collapsedResult.overflow || {};
      _this.moreOptionsItems = collapsedMoreOptionsItems;
      var finalControlBarItems = [];
      var lastItem = controller.state.isOoyalaAds || collapsedMoreOptionsItems.length === 0 ? collapsedControlBarItems.length - 2 // eslint-disable-line
      : collapsedControlBarItems.length - 1;

      for (var index = 0; index < collapsedControlBarItems.length; index += 1) {
        if (collapsedControlBarItems[index].name === 'moreOptions' && (controller.state.isOoyalaAds || collapsedMoreOptionsItems.length === 0)) {
          continue; // eslint-disable-line
        }

        var alignment = _constants.default.TOOLTIP_ALIGNMENT.CENTER;

        if (index === lastItem) {
          alignment = _constants.default.TOOLTIP_ALIGNMENT.RIGHT;
        } else if (index === 0) {
          alignment = _constants.default.TOOLTIP_ALIGNMENT.LEFT;
        }

        tooltipAlignments[collapsedControlBarItems[index].name] = alignment;
        var item = controlItemTemplates[collapsedControlBarItems[index].name];
        finalControlBarItems.push(item);
      }

      return finalControlBarItems;
    });

    _this.isMobile = props.controller.state.isMobile;
    _this.isPhone = _utils.default.getUserDevice() === 'phone';
    _this.responsiveUIMultiple = _this.getResponsiveUIMultiple(props.responsiveView);
    _this.moreOptionsItems = null;
    _this.vr = null;

    if (props.controller && props.controller.videoVrSource && props.controller.videoVrSource.vr) {
      _this.vr = props.controller.videoVrSource.vr;
    }

    return _this;
  }

  _createClass(ControlBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('orientationchange', this.closeOtherPopovers);
      window.addEventListener('orientationchange', this.setLandscapeScreenOrientation, false);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var responsiveView = this.props.responsiveView; // if responsive breakpoint changes

      if (nextProps.responsiveView !== responsiveView) {
        this.responsiveUIMultiple = this.getResponsiveUIMultiple(nextProps.responsiveView);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var controller = this.props.controller;
      controller.cancelTimer();
      this.closeOtherPopovers();

      if (_utils.default.isAndroid()) {
        controller.hideVolumeSliderBar();
      }

      window.removeEventListener('orientationchange', this.closeOtherPopovers);
      window.removeEventListener('orientationchange', this.setLandscapeScreenOrientation);
    }
    /**
     * Retrieve multiplier paramter from settings
     * @param {string} responsiveView – the string representing responsive breakpoint
     * @returns {number} the multiplier
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          audioOnly = _this$props6.audioOnly,
          controlBarVisible = _this$props6.controlBarVisible,
          animatingControlBar = _this$props6.animatingControlBar,
          height = _this$props6.height,
          onFocus = _this$props6.onFocus,
          onBlur = _this$props6.onBlur,
          hideScrubberBar = _this$props6.hideScrubberBar,
          skinConfig = _this$props6.skinConfig;

      if (!(skinConfig && skinConfig.controlBar && skinConfig.controlBar.enabled)) {
        return null;
      }

      var controlBarClass = (0, _classnames.default)({
        'oo-control-bar': true,
        'oo-control-bar-hidden': !controlBarVisible,
        'oo-animating-control-bar': animatingControlBar
      });
      var controlBarItems = this.populateControlBar();
      var controlBarStyle = {};

      if (height) {
        controlBarStyle.height = height;
      }

      var wrapperClass = (0, _classnames.default)('oo-control-bar-items-wrapper', {
        'oo-flex-row-parent': audioOnly,
        'oo-flex-end': audioOnly && _utils.default.isIos()
      });
      return _react.default.createElement("div", {
        className: controlBarClass,
        style: controlBarStyle,
        onFocus: onFocus,
        onBlur: onBlur,
        onMouseUp: this.handleControlBarMouseUp,
        onTouchEnd: this.handleControlBarMouseUp,
        role: "presentation"
      }, !hideScrubberBar ? _react.default.createElement(_scrubberBar.default, this.props) : null, _react.default.createElement("div", {
        className: wrapperClass
      }, controlBarItems));
    }
  }]);

  return ControlBar;
}(_react.default.Component);

ControlBar.propTypes = {
  totalTime: _propTypes.default.string.isRequired,
  playheadTime: _propTypes.default.string.isRequired,
  clickToVolumeScreen: _propTypes.default.bool,
  hideVolumeControls: _propTypes.default.bool,
  hideScrubberBar: _propTypes.default.bool,
  audioOnly: _propTypes.default.bool,
  animatingControlBar: _propTypes.default.bool,
  controlBarItems: _propTypes.default.arrayOf(_propTypes.default.shape({})),
  isLiveStream: _propTypes.default.bool,
  controlBarVisible: _propTypes.default.bool,
  playerState: _propTypes.default.string,
  responsiveView: _propTypes.default.string,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  duration: _propTypes.default.number,
  currentPlayhead: _propTypes.default.number,
  componentWidth: _propTypes.default.number,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  skinConfig: _propTypes.default.shape({
    responsive: _propTypes.default.shape({
      breakpoints: _propTypes.default.shape({})
    })
  }),
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({}),
    videoVrSource: _propTypes.default.shape({
      vr: _propTypes.default.shape({})
    }),
    cancelTimer: _propTypes.default.func,
    startHideControlBarTimer: _propTypes.default.func,
    hideVolumeSliderBar: _propTypes.default.func,
    closePopover: _propTypes.default.func,
    closeOtherPopovers: _propTypes.default.func,
    isVrStereo: _propTypes.default.bool
  })
};
ControlBar.defaultProps = {
  clickToVolumeScreen: false,
  hideVolumeControls: false,
  hideScrubberBar: false,
  audioOnly: false,
  animatingControlBar: true,
  controlBarItems: [],
  isLiveStream: false,
  controlBarVisible: true,
  playerState: '',
  responsiveView: 'md',
  language: 'en',
  localizableStrings: {},
  duration: 0,
  currentPlayhead: 0,
  componentWidth: 500,
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  skinConfig: {
    responsive: {
      breakpoints: {
        xs: {
          id: 'xs'
        },
        sm: {
          id: 'sm'
        },
        md: {
          id: 'md'
        },
        lg: {
          id: 'lg'
        }
      }
    }
  },
  controller: {
    state: {},
    videoVrSource: {
      vr: {}
    },
    cancelTimer: function cancelTimer() {},
    startHideControlBarTimer: function startHideControlBarTimer() {},
    hideVolumeSliderBar: function hideVolumeSliderBar() {},
    closePopover: function closePopover() {},
    closeOtherPopovers: function closeOtherPopovers() {},
    isVrStereo: function isVrStereo() {},
    togglePopover: function togglePopover() {}
  }
};
module.exports = (0, _preserveKeyboardFocus.default)(ControlBar);

},{"../constants/constants":69,"../views/popover":82,"./closed-caption-multi-audio-menu/closedCaptionMultiAudioMenu":14,"./closed-caption/closedCaptionPopover":21,"./controlButton":31,"./higher-order/preserveKeyboardFocus":40,"./logo":43,"./playbackSpeedButton":48,"./playbackSpeedPanel":49,"./scrubberBar":50,"./skipControls":52,"./utils":63,"./videoQualityPanel":64,"./volumeControls":66,"classnames":86,"prop-types":370,"react":378}],31:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _nonAccessibleButton = _interopRequireDefault(require("./nonAccessibleButton"));

var _icon = _interopRequireDefault(require("./icon"));

var _tooltip = _interopRequireDefault(require("./tooltip"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Component used for action buttons within the skin. Currently used for both control
 * bar and skip buttons. Implements common functionality for these buttons which includes
 * icons, highlighting, tooltips and accessibility.
 */
var ControlButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ControlButton, _React$Component);

  function ControlButton(props) {
    var _this;

    _classCallCheck(this, ControlButton);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlButton).call(this, props));
    _this.storeRef = _this.storeRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onMouseEnter = _this.onMouseEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onMouseLeave = _this.onMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getButtonComponent = _this.getButtonComponent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getTooltipAlignment = _this.getTooltipAlignment.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getTooltipVerticalOffset = _this.getTooltipVerticalOffset.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getResponsiveUiMultiplier = _this.getResponsiveUiMultiplier.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getIconStyles = _this.getIconStyles.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.highlight = _this.highlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.removeHighlight = _this.removeHighlight.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.areTooltipsEnabled = _this.areTooltipsEnabled.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Handler for the mouseenter event.
   * @private
   * @param {Event} event mouseenter event object
   */


  _createClass(ControlButton, [{
    key: "onMouseEnter",
    value: function onMouseEnter(event) {
      this.highlight(event);
      var onMouseOver = this.props.onMouseOver;

      if (typeof onMouseOver === 'function') {
        onMouseOver(event);
      }
    }
    /**
     * Handler for the mouseleave event.
     * @private
     * @param {Event} event mouseleave event object
     */

  }, {
    key: "onMouseLeave",
    value: function onMouseLeave(event) {
      this.removeHighlight(event);
      var onMouseOut = this.props.onMouseOut;

      if (typeof onMouseOut === 'function') {
        onMouseOut(event);
      }
    }
    /**
     * Chooses a component (either AccessibleButton or NonAccessibleButton) to use
     * as base for the ControlButton depending on whether or not accessibility is
     * enabled for this particular instance. Accessibility is enabled by default
     * unless the ariaHidden prop is set to false explicitly.
     * @private
     * @returns {Component} An AccessibleButton or NonAccessibleButton component, depending on the case
     */

  }, {
    key: "getButtonComponent",
    value: function getButtonComponent() {
      var ariaHidden = this.props.ariaHidden;
      return ariaHidden === true ? _nonAccessibleButton.default : _accessibleButton.default;
    }
    /**
     * Either executes a callback passed by the parent that determines the tooltip
     * alignment or returns the default tooltip alignment value.
     * @private
     * @param {type} key An id (usually the focusId prop) that identifies the button whose tooltip alignment we want to determine
     * @returns {string} A value from CONSTANTS.TOOLTIP_ALIGNMENT which represents the tooltip alignment
     */

  }, {
    key: "getTooltipAlignment",
    value: function getTooltipAlignment(key) {
      var getTooltipAlignment = this.props.getTooltipAlignment;

      if (typeof getTooltipAlignment === 'function') {
        return getTooltipAlignment(key);
      }

      return _constants.default.TOOLTIP_ALIGNMENT.CENTER;
    }
    /**
     * Determines the vertical offset value to use for tooltips depending on the
     * props that were passed to this component.
     * @private
     * @returns {Number} A numerical value representing the vertical offset at which tooltips will be rendered
     */

  }, {
    key: "getTooltipVerticalOffset",
    value: function getTooltipVerticalOffset() {
      var _this$props = this.props,
          tooltipVerticalOffset = _this$props.tooltipVerticalOffset,
          skinConfig = _this$props.skinConfig;
      return typeof tooltipVerticalOffset !== 'undefined' ? tooltipVerticalOffset : _utils.default.getPropertyValue(skinConfig, 'controlBar.height', 0);
    }
    /**
     * Extracts the responsive UI multiplier value from the skin config depending on the
     * responsive view that is currently active.
     * @private
     * @returns {Number} The numeric value of the UI multiplier that matches the current responsive view.
     */

  }, {
    key: "getResponsiveUiMultiplier",
    value: function getResponsiveUiMultiplier() {
      var _this$props2 = this.props,
          responsiveView = _this$props2.responsiveView,
          skinConfig = _this$props2.skinConfig;

      var breakpoints = _utils.default.getPropertyValue(skinConfig, 'responsive.breakpoints', {});

      var responsiveUiMultiplier = (breakpoints[responsiveView] || {}).multiplier || 1;
      return responsiveUiMultiplier;
    }
    /**
     * Extracts the default styles for the button icon from the skin.json.
     * @private
     * @returns {Object} An object with color and opacity properties which represent the default style of the button
     */

  }, {
    key: "getIconStyles",
    value: function getIconStyles() {
      var skinConfig = this.props.skinConfig;
      var iconStyles = {
        color: _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.inactive.color'),
        opacity: _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.inactive.opacity')
      };
      return iconStyles;
    }
    /**
     * Stores a ref to this component's main element or component.
     * @private
     * @param {*} buttonRef Either a reference to an AccessibleButton or a DOM element,
     * depending on the component that was rendered
     */

  }, {
    key: "storeRef",
    value: function storeRef(buttonRef) {
      this.buttonRef = buttonRef;
      var onRef = this.props.onRef; // Pass ref on to parent, if subscribed

      if (typeof onRef === 'function') {
        onRef(this.buttonRef);
      }
    }
    /**
     * Applies the highlighted styles to the button icon on hover.
     * TODO
     * This was moved over from ControlBar but the original implementation sets the
     * styles directly on the rendered element, which is an anti-pattern in React.
     * Eventually we should update this in order to accomplish the same with setState().
     * @private
     * @param {Event} event The mouseenter event object that triggered the action
     */

  }, {
    key: "highlight",
    value: function highlight(event) {
      var _this$props3 = this.props,
          controller = _this$props3.controller,
          skinConfig = _this$props3.skinConfig;

      if (event.currentTarget.disabled || controller.state.isMobile) {
        return;
      }

      var iconElement = _utils.default.getEventIconElement(event);

      if (iconElement) {
        var highlightOpacity = _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.active.opacity', 1);

        var accentColor = _utils.default.getPropertyValue(skinConfig, 'general.accentColor');

        var highlightColor = _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.active.color', accentColor);

        _utils.default.highlight(iconElement, highlightOpacity, highlightColor);
      }
    }
    /**
     * Restores the default button styles after hover ends.
     * @private
     * @param {Event} event The mouseleave event object that triggered the action
     */

  }, {
    key: "removeHighlight",
    value: function removeHighlight(event) {
      var iconElement = _utils.default.getEventIconElement(event);

      var skinConfig = this.props.skinConfig;

      if (iconElement) {
        var baseOpacity = _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.inactive.opacity');

        var baseColor = _utils.default.getPropertyValue(skinConfig, 'controlBar.iconStyle.inactive.color');

        _utils.default.removeHighlight(iconElement, baseOpacity, baseColor);
      }
    }
    /**
     * Determines whether or not tooltips are enabled considering the current
     * platform and skin configuration.
     * @private
     * @returns {Boolean} True if tooltips are enabled, false otherwise
     */

  }, {
    key: "areTooltipsEnabled",
    value: function areTooltipsEnabled() {
      var enabled = false;
      var _this$props4 = this.props,
          controller = _this$props4.controller,
          skinConfig = _this$props4.skinConfig;

      if (!controller.state.isMobile) {
        enabled = _utils.default.getPropertyValue(skinConfig, 'controlBar.tooltips.enabled', false);
      }

      return enabled;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          children = _this$props5.children,
          className = _this$props5.className,
          focusId = _this$props5.focusId,
          tooltip = _this$props5.tooltip,
          icon = _this$props5.icon,
          language = _this$props5.language,
          skinConfig = _this$props5.skinConfig,
          localizableStrings = _this$props5.localizableStrings;
      var Component = this.getButtonComponent();
      var fullClassName = (0, _classnames.default)('oo-control-bar-item', className);
      var iconStyles = this.getIconStyles();
      var areTooltipsEnabled = this.areTooltipsEnabled();
      var responsiveUiMultiplier;
      var tooltipVerticalOffset;

      if (areTooltipsEnabled && tooltip) {
        responsiveUiMultiplier = this.getResponsiveUiMultiplier();
        tooltipVerticalOffset = this.getTooltipVerticalOffset();
      }

      return _react.default.createElement(Component, _extends({}, this.props, {
        ref: this.storeRef,
        className: fullClassName,
        onMouseEnter: this.onMouseEnter,
        onMouseLeave: this.onMouseLeave
      }), icon && _react.default.createElement(_icon.default, {
        icon: icon,
        skinConfig: skinConfig,
        style: iconStyles
      }), children, tooltip && _react.default.createElement(_tooltip.default, {
        enabled: areTooltipsEnabled,
        text: tooltip,
        parentKey: focusId,
        responsivenessMultiplier: responsiveUiMultiplier,
        bottom: responsiveUiMultiplier * tooltipVerticalOffset,
        language: language,
        localizableStrings: localizableStrings,
        getAlignment: this.getTooltipAlignment
      }));
    }
  }]);

  return ControlButton;
}(_react.default.Component);

ControlButton.propTypes = {
  focusId: _propTypes.default.string,
  className: _propTypes.default.string,
  icon: _propTypes.default.string,
  tooltip: _propTypes.default.string,
  tooltipVerticalOffset: _propTypes.default.number,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  responsiveView: _propTypes.default.string.isRequired,
  getTooltipAlignment: _propTypes.default.func,
  onRef: _propTypes.default.func,
  onClick: _propTypes.default.func,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string.isRequired
    }),
    responsive: _propTypes.default.shape({
      breakpoints: _propTypes.default.object
    }),
    controlBar: _propTypes.default.shape({
      height: _propTypes.default.number.isRequired,
      iconStyle: _propTypes.default.shape({
        active: _propTypes.default.shape({
          color: _propTypes.default.string.isRequired,
          opacity: _propTypes.default.number.isRequired
        }),
        inactive: _propTypes.default.shape({
          color: _propTypes.default.string.isRequired,
          opacity: _propTypes.default.number.isRequired
        })
      }),
      tooltips: _propTypes.default.shape({
        enabled: _propTypes.default.bool
      })
    })
  }).isRequired,
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      isMobile: _propTypes.default.bool.isRequired
    })
  }).isRequired
};
ControlButton.defaultProps = {
  focusId: '',
  className: '',
  icon: '',
  tooltip: '',
  tooltipVerticalOffset: undefined,
  language: 'en',
  localizableStrings: {},
  getTooltipAlignment: function getTooltipAlignment() {},
  onRef: function onRef() {},
  onClick: function onClick() {}
};
module.exports = ControlButton;

},{"../constants/constants":69,"./accessibleButton":8,"./icon":42,"./nonAccessibleButton":47,"./tooltip":60,"./utils":63,"classnames":86,"prop-types":370,"react":378}],32:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Count down clock
 */
var CountDownClock =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CountDownClock, _React$Component);

  function CountDownClock(props) {
    var _this;

    _classCallCheck(this, CountDownClock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountDownClock).call(this, props)); // canvas, interval, and context are changing based on time instead of user interaction

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setupCanvas", function () {
      _this.canvas = _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))); // eslint-disable-line

      _this.context = _this.canvas.getContext('2d');
      _this.context.textAlign = 'center';
      _this.context.textBaseline = 'middle';
      _this.context.font = 'regular 12px Arial';
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setupCountDownTimer", function () {
      _this.setupCanvas();

      _this.drawBackground();

      _this.drawTimer();

      _this.startTimer();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      if (event.type === 'touchend' || !_this.isMobile) {
        // since mobile would fire both click and touched events,
        // we need to make sure only one actually does the work
        var controller = _this.props.controller;

        if (controller.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
          _this.setState({
            hideClock: true
          });

          clearInterval(_this.interval);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "drawBackground", function () {
      var _this$context = _this.context,
          beginPath = _this$context.beginPath,
          arc = _this$context.arc,
          fill = _this$context.fill;
      var _this$state = _this.state,
          clockContainerWidth = _this$state.clockContainerWidth,
          clockRadius = _this$state.clockRadius;
      beginPath.call(_this.context);
      _this.context.globalAlpha = 1;
      _this.context.fillStyle = 'gray';
      arc.call(_this.context, clockContainerWidth / 2, clockRadius, clockRadius, 0, Math.PI * 2, false);
      arc.call(_this.context, clockContainerWidth / 2, clockRadius, clockRadius / 1.2, // eslint-disable-line
      Math.PI * 2, 0, true);
      fill.call(_this.context);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateClockSize", function () {
      var clockWidth;
      var _this$props = _this.props,
          controller = _this$props.controller,
          responsiveView = _this$props.responsiveView,
          skinConfig = _this$props.skinConfig;

      if (controller.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
        clockWidth = 75; // eslint-disable-line
      } else {
        clockWidth = responsiveView === skinConfig.responsive.breakpoints.xs.id ? 25 : 36; // eslint-disable-line
      }

      _this.setState({
        clockRadius: parseInt(clockWidth, 10) / 2,
        clockContainerWidth: parseInt(clockWidth, 10)
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "drawTimer", function () {
      var decimals;
      var controller = _this.props.controller;
      var _this$state2 = _this.state,
          fraction = _this$state2.fraction,
          remainSeconds = _this$state2.remainSeconds,
          clockContainerWidth = _this$state2.clockContainerWidth,
          clockRadius = _this$state2.clockRadius;
      var _this$context2 = _this.context,
          fillText = _this$context2.fillText,
          beginPath = _this$context2.beginPath,
          arc = _this$context2.arc,
          fill = _this$context2.fill;
      var percent = fraction * remainSeconds + 1.5; // eslint-disable-line

      _this.context.fillStyle = 'white';

      if (controller.state.screenToShow === _constants.default.SCREEN.PLAYING_SCREEN || controller.state.screenToShow === _constants.default.SCREEN.PAUSE_SCREEN) {
        fillText.call(_this.context, remainSeconds.toFixed(decimals), clockContainerWidth / 2, clockRadius, 100);
      }

      beginPath.call(_this.context);
      arc.call(_this.context, clockContainerWidth / 2, clockRadius, clockRadius, Math.PI * 1.5, // eslint-disable-line
      Math.PI * percent, false);
      arc.call(_this.context, clockContainerWidth / 2, clockRadius, clockRadius / 1.2, // eslint-disable-line
      Math.PI * percent, Math.PI * 1.5, // eslint-disable-line
      true);
      fill.call(_this.context);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startTimer", function () {
      var counterInterval = _this.state.counterInterval;
      var mSecInSec = 1000;
      _this.interval = setInterval(_this.tick, counterInterval * mSecInSec);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "tick", function () {
      var _this$props2 = _this.props,
          controller = _this$props2.controller,
          playerState = _this$props2.playerState,
          duration = _this$props2.duration,
          currentPlayhead = _this$props2.currentPlayhead;
      var _this$state3 = _this.state,
          remainSeconds = _this$state3.remainSeconds,
          counterInterval = _this$state3.counterInterval;

      if (controller.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
        if (remainSeconds < 1) {
          _this.setState({
            remainSeconds: 0
          });

          clearInterval(_this.interval);

          _this.startDiscoveryVideo();
        } else {
          _this.setState({
            remainSeconds: remainSeconds - counterInterval
          });

          _this.updateCanvas();
        }
      } else if (controller.state.screenToShow === _constants.default.SCREEN.PLAYING_SCREEN || controller.state.screenToShow === _constants.default.SCREEN.PAUSE_SCREEN) {
        if (remainSeconds < 1 || playerState === _constants.default.STATE.END) {
          _this.setState({
            remainSeconds: 0
          });

          clearInterval(_this.interval);

          _this.startUpNextVideo();
        } else {
          _this.setState({
            remainSeconds: duration - currentPlayhead
          });

          _this.updateCanvas();
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateCanvas", function () {
      _this.clearCanvas();

      _this.drawTimer();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clearCanvas", function () {
      _this.context = _this.canvas.getContext('2d');
      var clearRect = _this.context.clearRect;
      clearRect.call(_this.context, 0, 0, _this.canvas.width, _this.canvas.height);

      _this.drawBackground();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startDiscoveryVideo", function () {
      var _this$props3 = _this.props,
          controller = _this$props3.controller,
          discoveryData = _this$props3.discoveryData;
      var asset = discoveryData.relatedVideos[0];
      var customData = {
        source: _constants.default.SCREEN.UP_NEXT_SCREEN,
        autoplay: false
      };
      var eventData = {
        clickedVideo: asset,
        custom: discoveryData.custom,
        metadata: _utils.default.getDiscoveryEventData(1, 1, _constants.default.UI_TAG.UP_NEXT, asset, customData)
      };
      controller.sendDiscoveryClickEvent(eventData, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startUpNextVideo", function () {
      OO.log('startUpNext');
      var _this$props4 = _this.props,
          controller = _this$props4.controller,
          upNextInfo = _this$props4.upNextInfo;
      var asset = upNextInfo.upNextData;
      var customData = {
        source: _constants.default.SCREEN.UP_NEXT_SCREEN,
        autoplay: true
      };
      var eventData = {
        clickedVideo: asset,
        custom: customData,
        metadata: _utils.default.getDiscoveryEventData(1, 1, _constants.default.UI_TAG.UP_NEXT, asset, customData)
      };
      controller.sendDiscoveryClickEvent(eventData, true);
    });

    _this.canvas = null;
    _this.context = null;
    _this.interval = null;
    var tmpFraction = 0;
    var tmpRemainSeconds = 0;
    var _this$props5 = _this.props,
        _controller = _this$props5.controller,
        _currentPlayhead = _this$props5.currentPlayhead,
        _duration = _this$props5.duration,
        timeToShow = _this$props5.timeToShow;
    var upNextTimeToShow = Number.parseInt(_controller.state.upNextInfo.timeToShow, 0);

    if (_controller.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
      tmpFraction = 2 / timeToShow;
      tmpRemainSeconds = timeToShow;
    } else {
      tmpFraction = 2 / upNextTimeToShow;
      tmpRemainSeconds = _duration - _currentPlayhead;
    }

    _this.state = {
      counterInterval: 0.05,
      fraction: tmpFraction,
      // fraction = 2 / (skinConfig.upNext.timeToShow) so "fraction * pi" is how much
      // we want to fill the circle for each second
      remainSeconds: tmpRemainSeconds,
      hideClock: false
    };
    return _this;
  }

  _createClass(CountDownClock, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.updateClockSize();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setupCountDownTimer();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.interval);
    }
  }, {
    key: "render",
    value: function render() {
      var controller = this.props.controller;
      var _this$state4 = this.state,
          hideClock = _this$state4.hideClock,
          clockContainerWidth = _this$state4.clockContainerWidth;
      var canvasClassName = (0, _classnames.default)({
        'oo-countdown-clock': true,
        'oo-up-next-count-down': controller.state.screenToShow !== _constants.default.SCREEN.DISCOVERY_SCREEN,
        'oo-discovery-count-down': controller.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN,
        'oo-hidden': hideClock
      });
      return _react.default.createElement("canvas", {
        className: canvasClassName,
        width: clockContainerWidth,
        height: clockContainerWidth,
        onClick: this.handleClick,
        onTouchEnd: this.handleClick
      });
    }
  }]);

  return CountDownClock;
}(_react.default.Component);

CountDownClock.propTypes = {
  discoveryData: _propTypes.default.shape({}),
  timeToShow: _propTypes.default.number,
  currentPlayhead: _propTypes.default.number,
  controller: _propTypes.default.shape({}),
  duration: _propTypes.default.number,
  skinConfig: _propTypes.default.shape({}),
  upNextInfo: _propTypes.default.shape({}),
  playerState: _propTypes.default.string,
  responsiveView: _propTypes.default.string.isRequired
};
CountDownClock.defaultProps = {
  timeToShow: 10,
  // seconds
  currentPlayhead: 0,
  controller: {
    state: {
      screenToShow: '',
      upNextInfo: {
        timeToShow: 10
      }
    }
  },
  duration: 0,
  playerState: '',
  discoveryData: {},
  skinConfig: {
    responsive: {
      breakpoints: {
        xs: {
          id: 'xs'
        }
      }
    }
  },
  upNextInfo: {}
};
module.exports = CountDownClock;

},{"../constants/constants":69,"./utils":63,"classnames":86,"prop-types":370,"react":378,"react-dom":374}],33:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _noCss = _interopRequireDefault(require("react-scrollbar/dist/no-css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Extends the react-scrollbar component with the ability to prevent the full page
 * from scrolling while the scroll area is being scrolled. The original component
 * supports this partially through the stopScrollPropagation prop, but this currently
 * doesn't work with touch devices, hence the need for this custom component.
 */
var CustomScrollArea =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CustomScrollArea, _React$Component);

  function CustomScrollArea(props) {
    var _this;

    _classCallCheck(this, CustomScrollArea);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CustomScrollArea).call(this, props));
    _this.state = {
      canScroll: false
    };
    _this.storeRef = _this.storeRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.composedComponentDidUpdate = _this.composedComponentDidUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onTouchMove = _this.onTouchMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(CustomScrollArea, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeDomListeners();
    }
    /**
     * Handles the touchmove event. This is used in order to prevent the whole page
     * from scrolling while attempting to scroll the ScrollArea on touch devices.
     * @private
     * @param {Event} event The touchmove event object
     */

  }, {
    key: "onTouchMove",
    value: function onTouchMove(event) {
      // Avoid preventing default on child elements otherwise the scroll area
      // itself will not scroll
      var canScroll = this.state.canScroll;

      if (canScroll // Only prevent default if area can actually be scrolled
      && this.domNode === event.currentTarget) {
        event.preventDefault();
      }
    }
    /**
     * Removes any event listeners that were added to DOM nodes by this component.
     * @private
     */

  }, {
    key: "removeDomListeners",
    value: function removeDomListeners() {
      if (this.domNode) {
        this.domNode.removeEventListener('touchmove', this.onTouchMove);
      }
    }
    /**
     * React ref callback. Decorates the ScrollArea's componentDidUpdate handler and
     * sets up touchmove event listener.
     * @private
     * @param {Component} ref The ref to the ScrollArea component
     */

  }, {
    key: "storeRef",
    value: function storeRef(ref) {
      this.composedComponent = ref;

      if (this.composedComponent) {
        // Store component's componentDidUpdate handler and replace with decorated handler
        this.composedComponentDidUpdateHandler = this.composedComponent.componentDidUpdate;
        this.composedComponent.componentDidUpdate = this.composedComponentDidUpdate; // Make sure to remove any listeners that were previously set

        this.removeDomListeners(); // Find new DOM node

        this.domNode = _reactDom.default.findDOMNode(this.composedComponent); // eslint-disable-line

        if (this.domNode) {
          this.domNode.addEventListener('touchmove', this.onTouchMove);
        }
      }
    }
    /**
     * Handles the componentDidUpdate event for the child ScrollArea component.
     * This is used in order to call the component's canScroll() method and update
     * our state with its value.
     * @private
     */

  }, {
    key: "composedComponentDidUpdate",
    value: function composedComponentDidUpdate() {
      // Called original componentDidUpdate handler if it exists
      if (typeof this.composedComponentDidUpdateHandler === 'function') {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.composedComponentDidUpdateHandler.apply(this.composedComponent, args);
      }

      if (this.composedComponent) {
        // The goal of getting this value is to allow scrolling freely in cases in
        // which the scroll area's content is not large enough to overflow
        var canScrollComposedElement = this.composedComponent.canScroll(this.composedComponent.state);
        var canScroll = this.state.canScroll; // Update state only if it's different from previous

        if (canScroll !== canScrollComposedElement) {
          this.setState({
            canScroll: canScrollComposedElement
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var children = this.props.children;
      var canScroll = this.state.canScroll;
      return _react.default.createElement(_noCss.default, _extends({}, this.props, {
        ref: this.storeRef,
        stopScrollPropagation: canScroll
      }), children);
    }
  }]);

  return CustomScrollArea;
}(_react.default.Component);

module.exports = CustomScrollArea;

},{"react":378,"react-dom":374,"react-scrollbar/dist/no-css":375}],34:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("./higher-order/accessibleMenu"));

var _icon = _interopRequireDefault(require("./icon"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Data selector component
 */
var DataSelectorProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DataSelectorProto, _React$Component);

  function DataSelectorProto(props) {
    var _this;

    _classCallCheck(this, DataSelectorProto);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataSelectorProto).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getItemButtonRefCallback", function (dataItem) {
      return function (component) {
        // eslint-disable-line
        _this.itemButtons[dataItem] = component;
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setClassname", function (item) {
      var _this$props = _this.props,
          selectedData = _this$props.selectedData,
          enabled = _this$props.enabled;
      return (0, _classnames.default)({
        'oo-item': true,
        'oo-item-selected': selectedData === item && enabled,
        'oo-disabled': !enabled
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resetAutoFocus", function () {
      _this.autoFocus.first = false;
      _this.autoFocus.last = false;
      _this.autoFocus.selected = false;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDataSelection", function (dataItem) {
      var onDataChange = _this.props.onDataChange;

      _this.resetAutoFocus();

      _this.autoFocus.selected = _this.checkAndResetBtnAutoFocus(_this.itemButtons[dataItem]);
      onDataChange(dataItem);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLeftChevronClick", function (event) {
      event.preventDefault();

      _this.resetAutoFocus();

      _this.autoFocus.last = _this.checkAndResetBtnAutoFocus(_this.leftChevronBtn);
      var currentPage = _this.state.currentPage;

      _this.setState({
        currentPage: currentPage - 1
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleRightChevronClick", function (event) {
      event.preventDefault();

      _this.resetAutoFocus();

      _this.autoFocus.first = _this.checkAndResetBtnAutoFocus(_this.rightChevronBtn);
      var currentPage = _this.state.currentPage;

      _this.setState({
        currentPage: currentPage + 1
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "checkAndResetBtnAutoFocus", function (accessibleButton) {
      var autoFocus = false;

      if (accessibleButton && typeof accessibleButton.wasTriggeredWithKeyboard === 'function') {
        autoFocus = accessibleButton.wasTriggeredWithKeyboard();
        accessibleButton.wasTriggeredWithKeyboard(false);
      }

      return autoFocus;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillReceiveProps", function (nextProps) {
      var _this$props2 = _this.props,
          viewSize = _this$props2.viewSize,
          dataItemsPerPage = _this$props2.dataItemsPerPage;
      var currentPage = _this.state.currentPage;

      if (nextProps.viewSize !== viewSize) {
        var currentViewSize = viewSize;
        var nextViewSize = nextProps.viewSize;
        var firstDataIndex = currentPage * dataItemsPerPage[currentViewSize] - dataItemsPerPage[currentViewSize];
        var newCurrentPage = Math.floor(firstDataIndex / nextProps.dataItemsPerPage[nextViewSize]) + 1;

        _this.setState({
          currentPage: newCurrentPage
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "shouldAutoFocusItem", function (dataItems, itemIndex, isSelected) {
      var autoFocusFirst = _this.autoFocus.first && itemIndex === 0;
      var autoFocusLast = _this.autoFocus.last && itemIndex === dataItems.length - 1;
      var autoFocusSelected = _this.autoFocus.selected && isSelected;
      var autoFocus = autoFocusFirst || autoFocusLast || autoFocusSelected;
      return autoFocus;
    });

    _this.state = {
      currentPage: 1
    };
    return _this;
  }

  _createClass(DataSelectorProto, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.leftChevronBtn = null;
      this.rightChevronBtn = null;
      this.itemButtons = {};
      this.autoFocus = {
        first: false,
        last: false,
        selected: false
      };
    }
    /**
     * Returns a callback function that can be used to store the ref of the item button
     * identified by the value of dataItem. This is needed because the buttons are added
     * in a loop and ref is async, so we need to freeze the value of dataItem with the closure.
     * @private
     * @param {String} dataItem The value of the data button whose ref we want to store.
     * @returns {Function} A callback that will store the ref of the corresponding item button.
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          ariaLabel = _this$props3.ariaLabel,
          viewSize = _this$props3.viewSize,
          dataItemsPerPage = _this$props3.dataItemsPerPage,
          availableDataItems = _this$props3.availableDataItems,
          selectedData = _this$props3.selectedData,
          enabled = _this$props3.enabled,
          skinConfig = _this$props3.skinConfig;
      var currentPage = this.state.currentPage;
      var currentViewSize = viewSize;
      var currentDataItemsPerPage = dataItemsPerPage[currentViewSize];
      var startAt = currentDataItemsPerPage * (currentPage - 1);
      var endAt = currentDataItemsPerPage * currentPage;
      var dataItems = availableDataItems.slice(startAt, endAt); // Build data content blocks

      var dataContentBlocks = [];
      dataItems.forEach(function (currentDataItem, index) {
        // accent color
        var isSelected = selectedData === currentDataItem;
        var selectedItemStyle = {};

        if (isSelected && enabled && skinConfig.general.accentColor) {
          selectedItemStyle = {
            backgroundColor: skinConfig.general.accentColor
          };
        } // Determine whether we should auto focus or not


        var autoFocus = _this2.shouldAutoFocusItem(dataItems, index, isSelected);

        dataContentBlocks.push(_react.default.createElement(_accessibleButton.default, {
          key: currentDataItem,
          ref: _this2.getItemButtonRefCallback(currentDataItem),
          autoFocus: autoFocus,
          className: _this2.setClassname(currentDataItem),
          style: selectedItemStyle,
          ariaLabel: currentDataItem,
          ariaChecked: isSelected,
          role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
          onClick: function onClick() {
            return _this2.handleDataSelection(currentDataItem);
          }
        }, _react.default.createElement("span", {
          className: "oo-data"
        }, currentDataItem)));
      });
      var leftChevron = (0, _classnames.default)({
        'oo-left-button': true,
        'oo-hidden': !enabled || currentPage <= 1
      });
      var rightChevron = (0, _classnames.default)({
        'oo-right-button': true,
        'oo-hidden': !enabled || endAt >= availableDataItems.length
      });
      return _react.default.createElement("div", {
        className: "oo-data-selector",
        "aria-label": ariaLabel,
        role: _constants.default.ARIA_ROLES.MENU
      }, _react.default.createElement(_accessibleButton.default, {
        ref: function ref(event) {
          _this2.leftChevronBtn = event;
        },
        className: leftChevron,
        ariaLabel: _constants.default.ARIA_LABELS.PREVIOUS_OPTIONS,
        role: _constants.default.ARIA_ROLES.MENU_ITEM,
        onClick: this.handleLeftChevronClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "left"
      }))), _react.default.createElement("div", {
        className: "oo-data-panel oo-flexcontainer"
      }, dataContentBlocks), _react.default.createElement(_accessibleButton.default, {
        ref: function ref(event) {
          _this2.rightChevronBtn = event;
        },
        className: rightChevron,
        ariaLabel: _constants.default.ARIA_LABELS.MORE_OPTIONS,
        role: _constants.default.ARIA_ROLES.MENU_ITEM,
        onClick: this.handleRightChevronClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "right"
      }))));
    }
  }]);

  return DataSelectorProto;
}(_react.default.Component);

var DataSelector = (0, _accessibleMenu.default)(DataSelectorProto, {
  useRovingTabindex: true
});
DataSelectorProto.propTypes = {
  enabled: _propTypes.default.bool.isRequired,
  selectedData: _propTypes.default.string,
  availableDataItems: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
  dataItemsPerPage: _propTypes.default.objectOf(_propTypes.default.number),
  viewSize: _propTypes.default.string.isRequired,
  ariaLabel: _propTypes.default.string,
  onDataChange: _propTypes.default.func.isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  })
};
DataSelectorProto.defaultProps = {
  selectedData: '',
  dataItemsPerPage: {
    sm: 10,
    md: 10,
    lg: 10
  },
  ariaLabel: _propTypes.default.string,
  skinConfig: {
    general: {
      accentColor: ''
    }
  }
};
module.exports = DataSelector;

},{"../constants/constants":69,"./accessibleButton":8,"./higher-order/accessibleMenu":38,"./icon":42,"classnames":86,"prop-types":370,"react":378}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * A vr video rotation control button
 */
var DirectionControlVr =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DirectionControlVr, _React$Component);

  function DirectionControlVr(props) {
    var _this;

    _classCallCheck(this, DirectionControlVr);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectionControlVr).call(this, props));
    _this.state = {
      isTouched: false
    };
    _this.rotateVrVideo = _this.rotateVrVideo.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleMouseOrTouchEvent = _this.handleMouseOrTouchEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleKeyboardEvent = _this.handleKeyboardEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Rotate the image in the specified direction or stop the rotation
   * if an user moves the video
   * @param {Event} event - event object
   * @param {Boolean} isRotated - flag to show if the video is needed to be rotated
   */


  _createClass(DirectionControlVr, [{
    key: "rotateVrVideo",
    value: function rotateVrVideo(event, isRotated) {
      var isTouched = this.state.isTouched;
      var _this$props = this.props,
          dir = _this$props.dir,
          handleVrViewControlsClick = _this$props.handleVrViewControlsClick;

      if (!isTouched && isRotated || isTouched && !isRotated) {
        handleVrViewControlsClick(event, isRotated, dir);
        this.setState({
          isTouched: isRotated
        });
      }
    }
    /**
     * When an user touch or move video need to do rotation
     * @param {Event} event - event object
     */

  }, {
    key: "handleMouseOrTouchEvent",
    value: function handleMouseOrTouchEvent(event) {
      var isRotated = event && (event.type === 'mousedown' || event.type === 'touchstart');
      this.rotateVrVideo(event, isRotated);
    }
    /**
     * When an user touch or move video need to do rotation
     * @param {Event} event - event object
     */

  }, {
    key: "handleKeyboardEvent",
    value: function handleKeyboardEvent(event) {
      var charCode = event.which || event.keyCode;
      var enterCharCode = _constants.default.KEYCODES.ENTER_KEY;
      var spaceCharCode = _constants.default.KEYCODES.SPACE_KEY;
      var isRotated = event && event.type === 'keydown' && (charCode === enterCharCode || charCode === spaceCharCode);
      this.rotateVrVideo(event, isRotated);
    }
  }, {
    key: "render",
    value: function render() {
      var baseDirectionClass = 'oo-vr-icon--move';
      var _this$props2 = this.props,
          dir = _this$props2.dir,
          focusId = _this$props2.focusId,
          ariaLabel = _this$props2.ariaLabel,
          tooltip = _this$props2.tooltip,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          responsiveView = _this$props2.responsiveView,
          skinConfig = _this$props2.skinConfig,
          controller = _this$props2.controller;
      var isTouched = this.state.isTouched;
      var directionClass = "".concat(baseDirectionClass, "--").concat(dir);
      var touchedDirectionClass = '';

      if (isTouched) {
        touchedDirectionClass = "".concat(directionClass, "--touched");
      }

      return _react.default.createElement(_controlButton.default, {
        className: (0, _classnames.default)('oo-direction-control', baseDirectionClass, directionClass, touchedDirectionClass),
        onMouseDown: this.handleMouseOrTouchEvent,
        onMouseUp: this.handleMouseOrTouchEvent,
        onMouseOut: this.handleMouseOrTouchEvent,
        onTouchStart: this.handleMouseOrTouchEvent,
        onTouchEnd: this.handleMouseOrTouchEvent,
        onBlur: this.handleMouseOrTouchEvent,
        onKeyDown: this.handleKeyboardEvent,
        onKeyUp: this.handleKeyboardEvent,
        language: language,
        localizableStrings: localizableStrings,
        responsiveView: responsiveView,
        skinConfig: skinConfig,
        controller: controller,
        key: focusId,
        focusId: focusId,
        ariaLabel: ariaLabel,
        tooltip: tooltip
      });
    }
  }]);

  return DirectionControlVr;
}(_react.default.Component);

DirectionControlVr.propTypes = {
  dir: _propTypes.default.string,
  focusId: _propTypes.default.string.isRequired,
  tooltip: _propTypes.default.string,
  ariaLabel: _propTypes.default.string,
  language: _propTypes.default.string,
  responsiveView: _propTypes.default.string,
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      isMobile: _propTypes.default.bool.isRequired
    })
  }).isRequired,
  skinConfig: _propTypes.default.shape({}).isRequired,
  localizableStrings: _propTypes.default.shape({}),
  handleVrViewControlsClick: _propTypes.default.func
};
DirectionControlVr.defaultProps = {
  dir: undefined,
  tooltip: '',
  ariaLabel: '',
  language: 'en',
  localizableStrings: {},
  responsiveView: 'md',
  handleVrViewControlsClick: function handleVrViewControlsClick() {}
};
var _default = DirectionControlVr;
exports.default = _default;

},{"../constants/constants":69,"./controlButton":31,"classnames":86,"prop-types":370,"react":378}],36:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * The item in the list of discovery items
 */
var DiscoverItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DiscoverItem, _React$Component);

  function DiscoverItem(props) {
    var _this;

    _classCallCheck(this, DiscoverItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DiscoverItem).call(this, props));
    _this.state = {
      imgError: false
    };
    return _this;
  }

  _createClass(DiscoverItem, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this2 = this;

      var src = this.props.src;
      var img = new window.Image();
      img.src = src;

      img.onerror = function () {
        _this2.setState({
          imgError: true
        });
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          contentTitle = _this$props.contentTitle,
          contentTitleClassName = _this$props.contentTitleClassName,
          children = _this$props.children,
          onClickAction = _this$props.onClickAction,
          skinConfig = _this$props.skinConfig,
          src = _this$props.src;
      var imgError = this.state.imgError;

      if (imgError) {
        return null;
      }

      var thumbnailStyle = {
        backgroundImage: "url('".concat(src, "')")
      };
      var itemTitleStyle = {
        color: _utils.default.getPropertyValue(skinConfig, 'discoveryScreen.contentTitle.font.color'),
        fontFamily: _utils.default.getPropertyValue(skinConfig, 'discoveryScreen.contentTitle.font.fontFamily')
      };
      return _react.default.createElement("div", {
        className: "oo-discovery-image-wrapper-style"
      }, _react.default.createElement("div", {
        className: "oo-discovery-wrapper"
      }, _react.default.createElement("a", {
        // eslint-disable-line
        onClick: onClickAction
      }, _react.default.createElement("div", {
        className: "oo-image-style",
        style: thumbnailStyle
      })), children), _react.default.createElement("div", {
        className: contentTitleClassName,
        style: itemTitleStyle,
        dangerouslySetInnerHTML: _utils.default.createMarkup(contentTitle)
      }));
    }
  }]);

  return DiscoverItem;
}(_react.default.Component);

DiscoverItem.propTypes = {
  contentTitle: _propTypes.default.string,
  contentTitleClassName: _propTypes.default.string,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),
  onClickAction: _propTypes.default.func,
  src: _propTypes.default.string.isRequired,
  skinConfig: _propTypes.default.shape({
    discoveryScreen: _propTypes.default.shape({
      contentTitle: _propTypes.default.shape({
        font: _propTypes.default.shape({
          color: _propTypes.default.string,
          fontFamily: _propTypes.default.string
        })
      })
    })
  })
};
DiscoverItem.defaultProps = {
  contentTitle: '',
  contentTitleClassName: '',
  children: [],
  onClickAction: function onClickAction() {},
  skinConfig: {
    discoveryScreen: {
      contentTitle: {
        font: {}
      }
    }
  }
};
module.exports = DiscoverItem;

},{"./utils":63,"prop-types":370,"react":378}],37:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _countDownClock = _interopRequireDefault(require("./countDownClock"));

var _discoverItem = _interopRequireDefault(require("./discoverItem"));

var _icon = _interopRequireDefault(require("./icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Panel component for Discovery Screen
 */
var DiscoveryPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(DiscoveryPanel, _React$Component);

  function DiscoveryPanel(props) {
    var _this;

    _classCallCheck(this, DiscoveryPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DiscoveryPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function (nextProps) {
      var _this$props = _this.props,
          videosPerPage = _this$props.videosPerPage,
          responsiveView = _this$props.responsiveView;
      var currentPage = _this.state.currentPage;
      var currentViewSize = responsiveView;
      var nextViewSize = nextProps.responsiveView;
      var firstDiscoverIndex = currentPage * videosPerPage[currentViewSize] - videosPerPage[currentViewSize];
      var newCurrentPage = Math.floor(firstDiscoverIndex / nextProps.videosPerPage[nextViewSize]) + 1;

      _this.setState({
        currentPage: newCurrentPage
      });

      _this.detectHeight();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLeftButtonClick", function (event) {
      event.preventDefault();
      var currentPage = _this.state.currentPage;

      _this.setState({
        currentPage: currentPage - 1
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleRightButtonClick", function (event) {
      event.preventDefault();
      var currentPage = _this.state.currentPage;

      _this.setState({
        currentPage: currentPage + 1
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDiscoveryContentClick", function (index) {
      var _this$props2 = _this.props,
          controller = _this$props2.controller,
          discoveryData = _this$props2.discoveryData,
          responsiveView = _this$props2.responsiveView,
          videosPerPage = _this$props2.videosPerPage;
      var currentViewSize = responsiveView;
      var videosPerPageInView = videosPerPage[currentViewSize];
      var assetPosition = index % videosPerPageInView + 1;
      var asset = discoveryData.relatedVideos[index];
      var customData = {
        source: _constants.default.SCREEN.DISCOVERY_SCREEN,
        autoplay: false
      };
      var eventData = {
        clickedVideo: asset,
        custom: customData,
        metadata: _utils.default.getDiscoveryEventData(assetPosition, videosPerPageInView, _constants.default.UI_TAG.DISCOVERY, asset, customData)
      }; // TODO: figure out countdown value
      // eventData.custom.countdown = 0;

      controller.sendDiscoveryClickEvent(eventData, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "shouldShowCountdownTimer", function () {
      var showDiscoveryCountDown = _this.state.showDiscoveryCountDown;
      var playerState = _this.props.playerState;
      return showDiscoveryCountDown && playerState === _constants.default.STATE.END;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDiscoveryCountDownClick", function (event) {
      event.preventDefault();

      _this.setState({
        showDiscoveryCountDown: false
      });

      _this.refs.CountDownClock.handleClick(event); // eslint-disable-line

    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "detectHeight", function () {
      var discoveryPanel = _reactDom.default.findDOMNode(_this.refs.discoveryPanel); // eslint-disable-line


      _this.setState({
        componentHeight: discoveryPanel.getBoundingClientRect().height
      });
    });

    var _this$props3 = _this.props,
        forceCountDownTimer = _this$props3.forceCountDownTimer,
        skinConfig = _this$props3.skinConfig;
    _this.state = {
      showDiscoveryCountDown: skinConfig.discoveryScreen.showCountDownTimerOnEndScreen || forceCountDownTimer,
      currentPage: 1,
      componentHeight: null,
      shownAssets: -1
    };
    return _this;
  }

  _createClass(DiscoveryPanel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.detectHeight();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var componentWidth = this.props.componentWidth;

      if (nextProps.componentWidth !== componentWidth) {
        this.handleResize(nextProps);
      }
    }
    /**
     * If we are changing view sizes, adjust the currentPage number to reflect the new number of items per page
     * @param {Object} nextProps - next props object
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          componentWidth = _this$props4.componentWidth,
          controller = _this$props4.controller,
          skinConfig = _this$props4.skinConfig,
          discoveryData = _this$props4.discoveryData,
          responsiveView = _this$props4.responsiveView,
          videosPerPage = _this$props4.videosPerPage;
      var relatedVideos = discoveryData.relatedVideos; // if no discovery data render message

      if (relatedVideos.length < 1) {} // TODO: get msg if no discovery related videos
      // pagination


      var currentViewSize = responsiveView;
      var videosPerPageView = videosPerPage[currentViewSize];
      var _this$state = this.state,
          componentHeight = _this$state.componentHeight,
          currentPage = _this$state.currentPage,
          showDiscoveryCountDown = _this$state.showDiscoveryCountDown;
      var startAt = videosPerPageView * (currentPage - 1);
      var endAt = videosPerPageView * currentPage;
      var relatedVideoPage = relatedVideos.slice(startAt, endAt);
      var position = 1; // Send impression events for each discovery asset shown

      for (var index = startAt; index < endAt; index += 1) {
        if (index > this.state.shownAssets && index < relatedVideos.length) {
          // eslint-disable-line
          controller.sendDiscoveryDisplayEvent(position, videosPerPageView, _constants.default.UI_TAG.DISCOVERY, relatedVideos[index], {});
          this.state.shownAssets += 1;
          position += 1;
        }
      } // discovery content


      var discoveryContentName = (0, _classnames.default)({
        'oo-discovery-content-name': true,
        'oo-hidden': !skinConfig.discoveryScreen.contentTitle.show
      });
      var discoveryCountDownWrapperStyle = (0, _classnames.default)({
        'oo-discovery-count-down-wrapper-style': true,
        'oo-hidden': !showDiscoveryCountDown
      });
      var widthThreshold = 420;
      var heightThresholdXs = 175;
      var heightThresholdSm = 320;
      var discoveryToaster = (0, _classnames.default)({
        'oo-discovery-toaster-container-style': true,
        'oo-flexcontainer': true,
        'oo-scale-size': responsiveView === skinConfig.responsive.breakpoints.xs.id && (componentWidth <= widthThreshold || componentHeight <= heightThresholdXs) || responsiveView === skinConfig.responsive.breakpoints.sm.id && (componentWidth <= widthThreshold || componentHeight <= heightThresholdSm)
      });
      var leftButtonClass = (0, _classnames.default)({
        'oo-left-button': true,
        'oo-hidden': currentPage <= 1
      });
      var rightButtonClass = (0, _classnames.default)({
        'oo-right-button': true,
        'oo-hidden': endAt >= relatedVideos.length
      });
      var countDownClock = this.shouldShowCountdownTimer() ? _react.default.createElement("div", {
        className: discoveryCountDownWrapperStyle
      }, _react.default.createElement("a", {
        // eslint-disable-line
        className: "oo-discovery-count-down-icon-style",
        onClick: this.handleDiscoveryCountDownClick
      }, _react.default.createElement(_countDownClock.default, _extends({}, this.props, {
        timeToShow: skinConfig.discoveryScreen.countDownTime,
        ref: "CountDownClock" // eslint-disable-line

      })), _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "pause"
      })))) : null; // Build discovery content blocks

      var discoveryContentBlocks = [];

      var _loop = function _loop(_index) {
        discoveryContentBlocks.push(_react.default.createElement(_discoverItem.default, _extends({}, _this2.props, {
          key: _index,
          src: relatedVideoPage[_index].preview_image_url,
          contentTitle: relatedVideoPage[_index].name,
          contentTitleClassName: discoveryContentName,
          onClickAction: function onClickAction() {
            _this2.handleDiscoveryContentClick(videosPerPageView * (currentPage - 1) + _index);
          }
        }), countDownClock && _index === 0 && currentPage <= 1 ? countDownClock : null));
      };

      for (var _index = 0; _index < relatedVideoPage.length; _index += 1) {
        _loop(_index);
      }

      return _react.default.createElement("div", {
        className: "oo-content-panel oo-discovery-panel",
        ref: "discoveryPanel" // eslint-disable-line

      }, _react.default.createElement("div", {
        className: discoveryToaster,
        ref: "DiscoveryToasterContainer" // eslint-disable-line

      }, discoveryContentBlocks), _react.default.createElement("a", {
        // eslint-disable-line
        className: leftButtonClass,
        ref: "ChevronLeftButton" // eslint-disable-line
        ,
        onClick: this.handleLeftButtonClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "left"
      }))), _react.default.createElement("a", {
        // eslint-disable-line
        className: rightButtonClass,
        ref: "ChevronRightButton" // eslint-disable-line
        ,
        onClick: this.handleRightButtonClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "right"
      }))));
    }
  }]);

  return DiscoveryPanel;
}(_react.default.Component);

DiscoveryPanel.propTypes = {
  responsiveView: _propTypes.default.string,
  videosPerPage: _propTypes.default.objectOf(_propTypes.default.number),
  discoveryData: _propTypes.default.shape({
    relatedVideos: _propTypes.default.arrayOf(_propTypes.default.shape({
      preview_image_url: _propTypes.default.string,
      name: _propTypes.default.string
    }))
  }),
  skinConfig: _propTypes.default.shape({
    discoveryScreen: _propTypes.default.shape({
      showCountDownTimerOnEndScreen: _propTypes.default.bool,
      countDownTime: _propTypes.default.number,
      contentTitle: _propTypes.default.shape({
        show: _propTypes.default.bool
      })
    }),
    icons: _propTypes.default.objectOf(_propTypes.default.object)
  }),
  controller: _propTypes.default.shape({
    sendDiscoveryClickEvent: _propTypes.default.func,
    sendDiscoveryDisplayEvent: _propTypes.default.func
  })
};
DiscoveryPanel.defaultProps = {
  videosPerPage: {
    xs: 2,
    sm: 4,
    md: 6,
    lg: 8
  },
  skinConfig: {
    discoveryScreen: {
      showCountDownTimerOnEndScreen: true,
      countDownTime: 10,
      contentTitle: {
        show: true
      }
    },
    icons: {
      pause: {
        fontStyleClass: 'oo-icon oo-icon-pause'
      },
      discovery: {
        fontStyleClass: 'oo-icon oo-icon-topmenu-discovery'
      },
      left: {
        fontStyleClass: 'oo-icon oo-icon-left'
      },
      right: {
        fontStyleClass: 'oo-icon oo-icon-right'
      }
    },
    responsive: {
      breakpoints: {
        xs: {
          id: 'xs'
        },
        sm: {
          id: 'sm'
        },
        md: {
          id: 'md'
        },
        lg: {
          id: 'lg'
        }
      }
    }
  },
  discoveryData: {
    relatedVideos: []
  },
  controller: {
    sendDiscoveryClickEvent: function sendDiscoveryClickEvent() {},
    sendDiscoveryDisplayEvent: function sendDiscoveryDisplayEvent() {}
  },
  responsiveView: 'md'
};
module.exports = DiscoveryPanel;

},{"../constants/constants":69,"./countDownClock":32,"./discoverItem":36,"./icon":42,"./utils":63,"classnames":86,"prop-types":370,"react":378,"react-dom":374}],38:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AccessibleMenu = function AccessibleMenu(ComposedComponent, dirtyOptions) {
  var options = dirtyOptions || {};
  /**
   * Element accessibility is a routine that could be gather in one HOC
   * Done it here
   */

  var Hoc =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(Hoc, _React$Component);

    function Hoc() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Hoc);

      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Hoc)).call.apply(_getPrototypeOf2, [this].concat(_args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
        if (!event.target || !event.target.hasAttribute(_constants.default.KEYBD_FOCUS_ID_ATTR) || event.target.getAttribute('role') === _constants.default.ARIA_ROLES.SLIDER) {
          return;
        }

        switch (event.which || event.keyCode) {
          case _constants.default.KEYCODES.UP_ARROW_KEY:
          case _constants.default.KEYCODES.LEFT_ARROW_KEY:
            event.preventDefault();

            _this.focusOnMenuItemSibling(event.target, false);

            break;

          case _constants.default.KEYCODES.DOWN_ARROW_KEY:
          case _constants.default.KEYCODES.RIGHT_ARROW_KEY:
            event.preventDefault();

            _this.focusOnMenuItemSibling(event.target, true);

            break;

          default:
            break;
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMenuItemList", function () {
        var menuItemList = [];

        if (_this.menuDomElement) {
          menuItemList = _this.menuDomElement.querySelectorAll("[".concat(_constants.default.KEYBD_FOCUS_ID_ATTR, "]:not(.oo-hidden)"));
        }

        return menuItemList;
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMenuItemSiblingIndex", function (menuItemList, menuItem, useNextSibling) {
        // eslint-disable-line
        if (!menuItemList || !menuItemList.length) {
          return -1;
        }

        var menuItemIndex = Array.prototype.indexOf.call(menuItemList, menuItem);
        var siblingIndex = useNextSibling ? menuItemIndex + 1 : menuItemIndex - 1; // Note that the code below will have the intended result even if
        // menuItemIndex is -1

        if (siblingIndex < 0) {
          siblingIndex = menuItemList.length - 1;
        }

        if (siblingIndex >= menuItemList.length) {
          siblingIndex = 0;
        }

        return siblingIndex;
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "focusOnMenuItemSibling", function (menuItem, useNextSibling) {
        var menuItemList = _this.getMenuItemList();

        if (!menuItemList.length) {
          return;
        } // Since these elements aren't actually next to each other in the DOM, their position
        // relative to one another is implied from their tab order, which should be the same as
        // the one returned by querySelectorAll as long as tabindex is set to 0 (which should be the case).


        var siblingIndex = _this.getMenuItemSiblingIndex(menuItemList, menuItem, useNextSibling);

        var item = menuItemList[siblingIndex];

        if (item && typeof menuItem.focus === 'function') {
          item.focus();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "composedComponentDidUpdate", function () {
        // Call component's original handler if existent
        if (typeof _this.composedComponentDidUpdateHandler === 'function') {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this.composedComponentDidUpdateHandler.apply(_this.composedComponent, args);
        }

        _this.applyRovingTabIndex();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "applyOptions", function () {
        // If specified, use a child element instead of component's main element
        if (options.selector && _this.menuDomElement) {
          _this.menuDomElement = _this.menuDomElement.querySelector(options.selector);
        } // Use roving tabindex for tab navigation if specified.
        // See: https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex


        if (options.useRovingTabindex) {
          _this.applyRovingTabIndex(); // When using roving tab index we need to monitor changes to the composed component
          // in order to re-apply it when selection changes


          if (_this.composedComponent) {
            // Store reference to child component's current componentDidUpdate handler
            _this.composedComponentDidUpdateHandler = _this.composedComponent.componentDidUpdate; // Replace with custom decorator handler

            _this.composedComponent.componentDidUpdate = _this.composedComponentDidUpdate;
          }
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "applyRovingTabIndex", function () {
        var hasSelectedItems = false;

        var menuItemList = _this.getMenuItemList();

        menuItemList.forEach(function (menuItem) {
          if (menuItem.getAttribute('aria-checked') === 'true' || menuItem.getAttribute('aria-selected') === 'true') {
            menuItem.setAttribute('tabindex', 0);
            hasSelectedItems = true;
          } else {
            menuItem.setAttribute('tabindex', -1);
          }
        }); // Make first element tabbable if no selected item was found

        if (menuItemList.length && !hasSelectedItems) {
          menuItemList[0].setAttribute('tabindex', 0);
        }
      });

      return _this;
    }

    _createClass(Hoc, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.menuDomElement = _reactDom.default.findDOMNode(this.composedComponent); // eslint-disable-line

        this.applyOptions();

        if (this.menuDomElement) {
          this.menuDomElement.addEventListener('keydown', this.onKeyDown);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.menuDomElement) {
          this.menuDomElement.removeEventListener('keydown', this.onKeyDown);
        }
      }
      /**
       * Keydown event handler. Implements arrow key navigation for menu items.
       * @private
       * @param {event} event The keyboard event object.
       */

    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(ComposedComponent, _extends({
          ref: function ref(element) {
            _this2.composedComponent = element;
          }
        }, this.props));
      }
    }]);

    return Hoc;
  }(_react.default.Component);

  return Hoc;
};

module.exports = AccessibleMenu;

},{"../../constants/constants":69,"react":378,"react-dom":374}],39:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Extends a button component with the ability to periodically call the onClick
 * handler while the button is being held down. Allows this behavior with both regular
 * mouse click as well as with the Space and Enter keys.
 * @public
 * @param {Component} ComposedComponent The React component to extend.
 * The component must support adding handlers the following events: click, keydown, mousedown, mouseup
 * @returns {Component} A new component that supports holding the onClick handler
 */
var holdOnClick = function holdOnClick(ComposedComponent) {
  var CLICK_HOLD_START_DELAY = 500;
  var CLICK_HOLD_FREQUENCY = 100;
  /**
   * The extension itself
   */

  var HoldOnClick =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(HoldOnClick, _React$Component);

    function HoldOnClick(props) {
      var _this;

      _classCallCheck(this, HoldOnClick);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(HoldOnClick).call(this, props));
      _this.startTimer = null;
      _this.repeatTimer = null;
      _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.holdClick = _this.holdClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.releaseClick = _this.releaseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      return _this;
    }
    /**
     * Make sure to release click when button is disabled.
     * @private
     */


    _createClass(HoldOnClick, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        var disabled = this.props.disabled;

        if (disabled) {
          this.releaseClick();
        }
      }
      /**
       * Cleanup when component is unmounted.
       * @private
       */

    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.releaseClick();
      }
      /**
       * Handler for the keydown event. Calls the onClick handler for Enter and
       * Space keys. Note that the keydown event has the "hold down to continue triggering"
       * behavior that we want by default, so there's not need to use timers when using the keyboard.
       * @private
       * @param {event} event The keydown event object
       */

    }, {
      key: "onKeyDown",
      value: function onKeyDown(event) {
        var onClick = this.props.onClick;

        if (event.key === _constants.default.KEY_VALUES.SPACE || event.key === _constants.default.KEY_VALUES.ENTER) {
          onClick();
        }
      }
      /**
       * Handler for the mousedown event which calls the onClick handler and starts
       * a timer that will enable calling onClick periodically unless the button is
       * released before the timer callback.
       */

    }, {
      key: "onMouseDown",
      value: function onMouseDown() {
        var onClick = this.props.onClick;
        onClick();
        this.queueHoldClick();
      }
      /**
       * Starts a timer that will begin calling the onClick handling repeatedly after
       * a certain amount of time. This delay is needed in order to prevent the user
       * from triggering multiple onClick events accidentally with just a single click.
       * @private
       */

    }, {
      key: "queueHoldClick",
      value: function queueHoldClick() {
        clearTimeout(this.startTimer);
        this.startTimer = setTimeout(this.holdClick, CLICK_HOLD_START_DELAY);
      }
      /**
       * Recursively starts a timer that calls the onClick handler periodically.
       * @private
       */

    }, {
      key: "holdClick",
      value: function holdClick() {
        var _this2 = this;

        var onClick = this.props.onClick;
        clearTimeout(this.repeatTimer);
        this.repeatTimer = setTimeout(function () {
          onClick();

          _this2.holdClick();
        }, CLICK_HOLD_FREQUENCY);
      }
      /**
       * Clears timers and stops calling the onClick handler periodically.
       * @private
       */

    }, {
      key: "releaseClick",
      value: function releaseClick() {
        clearTimeout(this.startTimer);
        this.startTimer = null;
        clearTimeout(this.repeatTimer);
        this.repeatTimer = null;
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        return _react.default.createElement(ComposedComponent, _extends({}, this.props, {
          onClick: null,
          onKeyDown: this.onKeyDown,
          onMouseDown: this.onMouseDown,
          onMouseUp: this.releaseClick,
          onMouseLeave: this.releaseClick
        }), children);
      }
    }]);

    return HoldOnClick;
  }(_react.default.Component);

  HoldOnClick.propTypes = {
    onClick: _propTypes.default.func.isRequired
  };
  return HoldOnClick;
};

module.exports = holdOnClick;

},{"../../constants/constants":69,"prop-types":370,"react":378}],40:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Extends a Component with the ability to store its focused element id in the
 * controller state and to restore said element's focus after the Component is re-mounted.
 * This is mostly used for restoring keyboard focus after actions that cause components
 * to be unmounted and re-mounted, such as play/pause and moving to previous or next videos.
 *
 * Requirements:
 * Composed components must declare listeners for the onFocus and onBlur events.
 * @public
 * @param {Component} ComposedComponent The component to extend
 * @returns {Component} A component extended with PreserveKeyboardFocus functionality
 */
var preserveKeyboardFocus = function preserveKeyboardFocus(ComposedComponent) {
  /**
   * The extension itself
   */
  var PreserveKeyboardFocus =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(PreserveKeyboardFocus, _React$Component);

    function PreserveKeyboardFocus(props) {
      var _this;

      _classCallCheck(this, PreserveKeyboardFocus);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PreserveKeyboardFocus).call(this, props));
      _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.composedComponentRef = _react.default.createRef();
      return _this;
    }
    /**
     * Fired when component has mounted. Attempts to restore focused control.
     * @private
     */


    _createClass(PreserveKeyboardFocus, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var domElement = _reactDom.default.findDOMNode(this.composedComponentRef.current); //eslint-disable-line


        this.tryRestoreFocusedControl(domElement);
      }
      /**
       * Blur event handler. Clears the focused control state when keyboard focus
       * is removed.
       * @private
       * @param {event} event The blur event object
       */

    }, {
      key: "onBlur",
      value: function onBlur(event) {
        var _this$props = this.props,
            controller = _this$props.controller,
            onBlur = _this$props.onBlur;
        controller.setFocusedControl(null);

        if (typeof onBlur === 'function') {
          onBlur(event);
        }
      }
      /**
       * Focus event handler. Stores the focus id of the newly focused element on
       * the controller's state.
       * @private
       * @param {event} event The focus event object
       */

    }, {
      key: "onFocus",
      value: function onFocus(event) {
        var _this$props2 = this.props,
            controller = _this$props2.controller,
            onFocus = _this$props2.onFocus;
        var focusId = event.target ? event.target.getAttribute(_constants.default.KEYBD_FOCUS_ID_ATTR) : undefined;

        if (focusId) {
          controller.setFocusedControl(focusId);
        }

        if (typeof onFocus === 'function') {
          onFocus(event);
        }
      }
      /**
       * Searches for the currently focused control id store in the controller state
       * and attempts to find the element with that focus id among its children. If
       * found, the element is given focus.
       * @private
       * @param {domElement} domElement The parent element that contains the element whose focus we need to restore
       */

    }, {
      key: "tryRestoreFocusedControl",
      value: function tryRestoreFocusedControl(domElement) {
        var _this$props3 = this.props,
            controller = _this$props3.controller,
            playerState = _this$props3.playerState;

        if (!domElement || !controller.state.focusedControl) {
          return;
        }

        var selector = "[".concat(_constants.default.KEYBD_FOCUS_ID_ATTR, "=\"").concat(controller.state.focusedControl, "\"]");
        var control = domElement.querySelector(selector);

        if (control && typeof control.focus === 'function') {
          control.focus(); // If we got to this point it means that play was triggered using the spacebar
          // (since a click would've cleared the focused element) and we need to
          // trigger control bar auto hide

          if (playerState === _constants.default.STATE.PLAYING) {
            controller.startHideControlBarTimer();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        return _react.default.createElement(ComposedComponent, _extends({}, this.props, {
          ref: this.composedComponentRef,
          onFocus: this.onFocus,
          onBlur: this.onBlur
        }), children);
      }
    }]);

    return PreserveKeyboardFocus;
  }(_react.default.Component);

  PreserveKeyboardFocus.propTypes = {
    playerState: _propTypes.default.string,
    controller: _propTypes.default.shape({
      state: _propTypes.default.shape({
        focusedControl: _propTypes.default.string
      }),
      setFocusedControl: _propTypes.default.func.isRequired,
      startHideControlBarTimer: _propTypes.default.func.isRequired
    })
  };
  PreserveKeyboardFocus.defaultProps = {
    playerState: _constants.default.STATE.PAUSE,
    controller: {
      state: {
        focusedControl: undefined
      }
    }
  };
  return PreserveKeyboardFocus;
};

module.exports = preserveKeyboardFocus;

},{"../../constants/constants":69,"prop-types":370,"react":378,"react-dom":374}],41:[function(require,module,exports){
"use strict";

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _holdOnClick = _interopRequireDefault(require("./higher-order/holdOnClick"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = (0, _holdOnClick.default)(_controlButton.default);

},{"./controlButton":31,"./higher-order/holdOnClick":39}],42:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Create and manage icon element
 */
var Icon =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Icon, _React$Component);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "shouldComponentUpdate",

    /**
     * Define if component should get updated
     * @param {Object} nextProps - the next props object
     * @returns {boolean} the decision
     */
    value: function shouldComponentUpdate(nextProps) {
      var _this$props = this.props,
          icon = _this$props.icon,
          className = _this$props.className,
          style = _this$props.style;
      return this.props && (icon !== nextProps.icon || className !== nextProps.className || style !== nextProps.style);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          icon = _this$props2.icon,
          onMouseOver = _this$props2.onMouseOver,
          onMouseOut = _this$props2.onMouseOut,
          onClick = _this$props2.onClick,
          skinConfig = _this$props2.skinConfig,
          style = _this$props2.style;
      var skinIcon = skinConfig.icons ? skinConfig.icons[icon] : null;
      var fontFamilyName = skinIcon ? skinIcon.fontFamilyName : '';

      var iconStyle = _utils.default.extend({
        fontFamily: fontFamilyName
      }, style);

      var fontStyleClass = skinIcon ? skinIcon.fontStyleClass : '';
      var fontString = skinIcon ? skinIcon.fontString : '';
      return _react.default.createElement("span", {
        // eslint-disable-line
        className: "".concat(fontStyleClass, " ").concat(className),
        style: iconStyle,
        onMouseOver: onMouseOver,
        onMouseOut: onMouseOut,
        onClick: onClick
      }, fontString);
    }
  }]);

  return Icon;
}(_react.default.Component);

Icon.propTypes = {
  icon: _propTypes.default.string,
  skinConfig: _propTypes.default.shape({}),
  className: _propTypes.default.string,
  style: _propTypes.default.shape({}),
  onMouseOver: _propTypes.default.func,
  onMouseOut: _propTypes.default.func,
  onClick: _propTypes.default.func
};
Icon.defaultProps = {
  icon: '',
  skinConfig: {},
  className: '',
  style: {},
  onMouseOver: function onMouseOver() {},
  onMouseOut: function onMouseOut() {},
  onClick: function onClick() {}
};
module.exports = Icon;

},{"./utils":63,"prop-types":370,"react":378}],43:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Logo = function Logo(props) {
  var clickUrl = props.clickUrl,
      height = props.height,
      imageUrl = props.imageUrl,
      target = props.target,
      width = props.width,
      style = props.style;
  var content = clickUrl ? _react.default.createElement("a", {
    href: clickUrl,
    target: target
  }, _react.default.createElement("img", {
    width: width,
    height: height,
    src: imageUrl,
    alt: ""
  })) : _react.default.createElement("img", {
    width: width,
    height: height,
    src: imageUrl,
    alt: ""
  });
  return _react.default.createElement("div", {
    className: "oo-logo oo-control-bar-item",
    style: style
  }, content);
};

Logo.propTypes = {
  imageUrl: _propTypes.default.string,
  clickUrl: _propTypes.default.string,
  target: _propTypes.default.string,
  width: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  height: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  style: _propTypes.default.shape({})
};
Logo.defaultProps = {
  imageUrl: '/assets/images/ooyala.png',
  clickUrl: '',
  target: '_blank',
  width: null,
  height: null,
  style: {}
};
module.exports = Logo;

},{"prop-types":370,"react":378}],44:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _customScrollArea = _interopRequireDefault(require("./customScrollArea"));

var _accessibleMenu = _interopRequireDefault(require("./higher-order/accessibleMenu"));

var _menuPanelItem = _interopRequireDefault(require("./menuPanelItem"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Generic menu component that handles the rendering, accessibility and item selection
 * of menus that have the following characteristics (such as the Video Quality or
 * Playback Speed menus):
 * - Can be displayed in both popover and fullscreen module
 * - Display a single list of options
 * - Only one option can be selected at a time
 *
 * This component only renders the menu itself, so it's meant to be used in conjunction
 * with another component that renders the menu container, such as the Popover or
 * ContentScreen components.
 */
var MenuPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MenuPanel, _React$Component);

  function MenuPanel(props) {
    var _this;

    _classCallCheck(this, MenuPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MenuPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuItemClick", function (itemValue) {
      var _this$props = _this.props,
          onMenuItemClick = _this$props.onMenuItemClick,
          onClose = _this$props.onClose;
      onMenuItemClick(itemValue);

      if (typeof onClose === 'function') {
        onClose({
          restoreToggleButtonFocus: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderMenuItem", function () {
      var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var selectedValue = arguments.length > 1 ? arguments[1] : undefined;
      var accentColor = arguments.length > 2 ? arguments[2] : undefined;
      var _this$props2 = _this.props,
          buttonClassName = _this$props2.buttonClassName,
          skinConfig = _this$props2.skinConfig;
      var isSelected = item.value === selectedValue;
      return _react.default.createElement(_menuPanelItem.default, {
        key: item.value,
        itemValue: item.value,
        itemLabel: item.label,
        ariaLabel: item.ariaLabel,
        buttonClassName: buttonClassName,
        isSelected: isSelected,
        focusId: _constants.default.FOCUS_IDS.MENU_ITEM + item.value,
        accentColor: accentColor,
        skinConfig: skinConfig,
        onClick: _this.onMenuItemClick
      });
    });

    _this.onMenuItemClick = _this.onMenuItemClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Handles menu item clicks.
   * @private
   * @param {String} itemValue The value of the menu item that was clicked
   */


  _createClass(MenuPanel, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          contentClassName = _this$props3.contentClassName,
          title = _this$props3.title,
          selectedValue = _this$props3.selectedValue,
          isPopover = _this$props3.isPopover,
          skinConfig = _this$props3.skinConfig,
          menuItems = _this$props3.menuItems;
      var menuClassName = (0, _classnames.default)('oo-menu-panel', className, {
        'oo-menu-popover': isPopover,
        'oo-content-panel': !isPopover
      });

      var accentColor = _utils.default.getPropertyValue(skinConfig, 'general.accentColor', null);

      return _react.default.createElement("div", {
        className: menuClassName
      }, _react.default.createElement(_customScrollArea.default, {
        className: (0, _classnames.default)('oo-menu-panel-content', contentClassName),
        speed: isPopover ? _constants.default.UI.POPOVER_SCROLL_RATE : 1
      }, title && _react.default.createElement("div", {
        className: "oo-menu-panel-title"
      }, title), _react.default.createElement("ul", {
        className: "oo-menu-panel-list",
        role: _constants.default.ARIA_ROLES.MENU
      }, menuItems.map(function (menuItem) {
        return _this2.renderMenuItem(menuItem, selectedValue, accentColor);
      }))));
    }
  }]);

  return MenuPanel;
}(_react.default.Component);

MenuPanel.propTypes = {
  className: _propTypes.default.string,
  contentClassName: _propTypes.default.string,
  buttonClassName: _propTypes.default.string,
  title: _propTypes.default.string,
  selectedValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
  isPopover: _propTypes.default.bool,
  onMenuItemClick: _propTypes.default.func.isRequired,
  onClose: _propTypes.default.func,
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
    label: _propTypes.default.string.isRequired,
    ariaLabel: _propTypes.default.string.isRequired
  })).isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    })
  })
};
MenuPanel.defaultProps = {
  className: '',
  contentClassName: '',
  buttonClassName: '',
  title: '',
  isPopover: false,
  onClose: function onClose() {},
  skinConfig: {}
};
module.exports = (0, _accessibleMenu.default)(MenuPanel);

},{"../constants/constants":69,"./customScrollArea":33,"./higher-order/accessibleMenu":38,"./menuPanelItem":45,"./utils":63,"classnames":86,"prop-types":370,"react":378}],45:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _icon = _interopRequireDefault(require("./icon"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Presentational component that handles the rendering of the menu items that
 * are used by the MenuPanel component. Also handles styling of selected items
 * and click logic
 * @returns {Object} React template
 */
var MenuPanelItem = function MenuPanelItem(_ref) {
  var itemValue = _ref.itemValue,
      itemLabel = _ref.itemLabel,
      ariaLabel = _ref.ariaLabel,
      buttonClassName = _ref.buttonClassName,
      isSelected = _ref.isSelected,
      focusId = _ref.focusId,
      accentColor = _ref.accentColor,
      skinConfig = _ref.skinConfig,
      _onClick = _ref.onClick;
  var itemClassName = (0, _classnames.default)('oo-menu-panel-item', {
    'oo-selected': isSelected
  });
  var itemButtonClassName = (0, _classnames.default)('oo-menu-btn', buttonClassName, {
    'oo-selected': isSelected
  });
  var buttonStyle = {
    color: isSelected ? accentColor : null
  };
  return _react.default.createElement("li", {
    className: itemClassName,
    role: _constants.default.ARIA_ROLES.PRESENTATION
  }, _react.default.createElement(_accessibleButton.default, {
    className: itemButtonClassName,
    style: buttonStyle,
    focusId: focusId,
    role: _constants.default.ARIA_ROLES.MENU_ITEM_RADIO,
    ariaLabel: ariaLabel,
    ariaChecked: isSelected,
    onClick: function onClick() {
      return _onClick(itemValue);
    }
  }, isSelected && _react.default.createElement(_icon.default, {
    skinConfig: skinConfig,
    icon: "selected"
  }), _react.default.createElement("span", {
    className: "oo-menu-btn-label"
  }, itemLabel)));
};

MenuPanelItem.propTypes = {
  itemValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]).isRequired,
  itemLabel: _propTypes.default.string.isRequired,
  ariaLabel: _propTypes.default.string.isRequired,
  buttonClassName: _propTypes.default.string,
  isSelected: _propTypes.default.bool.isRequired,
  focusId: _propTypes.default.string.isRequired,
  accentColor: _propTypes.default.string,
  skinConfig: _propTypes.default.shape({}).isRequired,
  onClick: _propTypes.default.func.isRequired
};
MenuPanelItem.defaultProps = {
  buttonClassName: '',
  accentColor: ''
};
module.exports = MenuPanelItem;

},{"../constants/constants":69,"./accessibleButton":8,"./icon":42,"classnames":86,"prop-types":370,"react":378}],46:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _playbackSpeedButton = _interopRequireDefault(require("./playbackSpeedButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * More options panel
 */
var MoreOptionsPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MoreOptionsPanel, _React$Component);

  function MoreOptionsPanel(props) {
    var _this;

    _classCallCheck(this, MoreOptionsPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MoreOptionsPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startAnimation", function () {
      _this.setState({
        animate: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleShareClick", function () {
      var controller = _this.props.controller;
      controller.toggleShareScreen();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleQualityClick", function () {
      var controller = _this.props.controller;
      controller.toggleScreen(_constants.default.SCREEN.VIDEO_QUALITY_SCREEN);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleDiscoveryClick", function () {
      var controller = _this.props.controller;
      controller.toggleDiscoveryScreen();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClosedCaptionClick", function () {
      var controller = _this.props.controller;
      controller.toggleScreen(_constants.default.SCREEN.CLOSED_CAPTION_SCREEN);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMultiAudioClick", function () {
      var controller = _this.props.controller;

      if (controller && typeof controller.toggleScreen === 'function') {
        controller.toggleScreen(_constants.default.SCREEN.MULTI_AUDIO_SCREEN);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlaybackSpeedClick", function () {
      var controller = _this.props.controller;
      controller.toggleScreen(_constants.default.SCREEN.PLAYBACK_SPEED_SCREEN);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "buildMoreOptionsButtonList", function () {
      var _this$props = _this.props,
          controller = _this$props.controller,
          language = _this$props.language,
          localizableStrings = _this$props.localizableStrings,
          responsiveView = _this$props.responsiveView,
          skinConfig = _this$props.skinConfig;
      var commonButtonProps = {
        language: language,
        localizableStrings: localizableStrings,
        responsiveView: responsiveView,
        skinConfig: skinConfig,
        controller: controller,
        style: {
          fontSize: "".concat(skinConfig.moreOptionsScreen.iconSize, "px")
        },
        getTooltipAlignment: function getTooltipAlignment() {
          return _constants.default.TOOLTIP_ALIGNMENT.CENTER;
        }
      };
      var optionsItemsTemplates = {};
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.QUALITY] = _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.QUALITY,
        className: "oo-quality",
        focusId: _constants.default.CONTROL_BAR_KEYS.QUALITY,
        ariaHidden: true,
        icon: "quality",
        onClick: _this.handleQualityClick
      }));
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.DISCOVERY] = _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.DISCOVERY,
        className: "oo-discovery",
        focusId: _constants.default.CONTROL_BAR_KEYS.DISCOVERY,
        ariaHidden: true,
        icon: "discovery",
        onClick: _this.handleDiscoveryClick
      }));
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.AUDIO_AND_CC] = _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.AUDIO_AND_CC,
        className: "oo-multiaudio",
        focusId: _constants.default.CONTROL_BAR_KEYS.AUDIO_AND_CC,
        ariaHidden: true,
        icon: "audioAndCC",
        onClick: _this.handleMultiAudioClick
      }));
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION] = _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION,
        className: "oo-closed-caption",
        focusId: _constants.default.CONTROL_BAR_KEYS.CLOSED_CAPTION,
        ariaHidden: true,
        icon: "cc",
        onClick: _this.handleClosedCaptionClick
      }));
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED] = _react.default.createElement(_playbackSpeedButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED,
        focusId: _constants.default.CONTROL_BAR_KEYS.PLAYBACK_SPEED,
        ariaHidden: true,
        onClick: _this.handlePlaybackSpeedClick
      }));
      optionsItemsTemplates[_constants.default.CONTROL_BAR_KEYS.SHARE] = _react.default.createElement(_controlButton.default, _extends({}, commonButtonProps, {
        key: _constants.default.CONTROL_BAR_KEYS.SHARE,
        className: "oo-share",
        focusId: _constants.default.CONTROL_BAR_KEYS.SHARE,
        ariaHidden: true,
        icon: "share",
        onClick: _this.handleShareClick
      }));
      var items = controller.state.moreOptionsItems;
      var moreOptionsItems = items.map(function (item) {
        return optionsItemsTemplates[item.name];
      });
      return moreOptionsItems;
    });

    _this.state = {
      animate: false
    };
    return _this;
  }

  _createClass(MoreOptionsPanel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.animateTimer = setTimeout(this.startAnimation, 1);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.animateTimer);
    }
  }, {
    key: "render",
    value: function render() {
      var animate = this.state.animate;
      var moreOptionsItemsClass = (0, _classnames.default)({
        'oo-more-options-items': true,
        'oo-animate-more-options': animate
      });
      var moreOptionsItems = this.buildMoreOptionsButtonList();
      return _react.default.createElement("div", {
        className: "oo-content-panel oo-more-options-panel"
      }, _react.default.createElement("div", {
        className: moreOptionsItemsClass
      }, moreOptionsItems));
    }
  }]);

  return MoreOptionsPanel;
}(_react.default.Component);

MoreOptionsPanel.defaultProps = {
  skinConfig: {
    moreOptionsScreen: {
      iconStyle: {
        active: {
          color: '#FFF',
          opacity: 1
        },
        inactive: {
          color: '#FFF',
          opacity: 0.6
        }
      }
    }
  }
};
module.exports = MoreOptionsPanel;

},{"../constants/constants":69,"./controlButton":31,"./playbackSpeedButton":48,"classnames":86,"react":378}],47:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Template component that is used for buttons that don't have accessibility enabled.
 * The component is picked at runtime by ControlButton depending on the props that
 * were passed to it.
 * @param {Object} props Component's props
 * @returns {Component} React component
 */
var NonAccessibleButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(NonAccessibleButton, _React$Component);

  function NonAccessibleButton() {
    _classCallCheck(this, NonAccessibleButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(NonAccessibleButton).apply(this, arguments));
  }

  _createClass(NonAccessibleButton, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          className = _this$props.className,
          ariaHidden = _this$props.ariaHidden,
          onMouseEnter = _this$props.onMouseEnter,
          onMouseLeave = _this$props.onMouseLeave,
          onClick = _this$props.onClick,
          children = _this$props.children;
      return _react.default.createElement("a", {
        // eslint-disable-line
        style: style,
        className: className,
        "aria-hidden": ariaHidden,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onClick: onClick
      }, children);
    }
  }]);

  return NonAccessibleButton;
}(_react.default.Component);

NonAccessibleButton.defaultProps = {
  style: {},
  className: '',
  ariaHidden: false,
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {},
  onClick: function onClick() {},
  children: []
};
NonAccessibleButton.propTypes = {
  style: _propTypes.default.shape({}),
  className: _propTypes.default.string,
  ariaHidden: _propTypes.default.bool,
  onMouseEnter: _propTypes.default.func,
  onMouseLeave: _propTypes.default.func,
  onClick: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node])
};
module.exports = NonAccessibleButton;

},{"prop-types":370,"react":378}],48:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Playback speed button implementation
 */
var PlaybackSpeedButton =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PlaybackSpeedButton, _React$Component);

  function PlaybackSpeedButton() {
    _classCallCheck(this, PlaybackSpeedButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(PlaybackSpeedButton).apply(this, arguments));
  }

  _createClass(PlaybackSpeedButton, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          controller = _this$props.controller;

      var currentSpeed = _utils.default.getPropertyValue(controller, 'state.playbackSpeedOptions.currentSpeed', 1);

      var ariaLabel = _constants.default.ARIA_LABELS.PLAYBACK_SPEED_OPTION;
      return _react.default.createElement(_controlButton.default, _extends({}, this.props, {
        className: (0, _classnames.default)('oo-playback-speed', className),
        ariaLabel: ariaLabel
      }), _react.default.createElement("span", {
        className: "oo-current-speed oo-icon"
      }, currentSpeed, "x"), children);
    }
  }]);

  return PlaybackSpeedButton;
}(_react.default.Component);

PlaybackSpeedButton.propTypes = {
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      playbackSpeedOptions: _propTypes.default.shape({
        currentSpeed: _propTypes.default.number.isRequired
      })
    })
  }).isRequired
};
module.exports = PlaybackSpeedButton;

},{"../constants/constants":69,"./controlButton":31,"./utils":63,"classnames":86,"prop-types":370,"react":378}],49:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _menuPanel = _interopRequireDefault(require("./menuPanel"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _macros = _interopRequireDefault(require("../constants/macros"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * Playback Speed options menu. This component is used for both the Popover and
 * Screen modes of the menu.
 */
var PlaybackSpeedPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PlaybackSpeedPanel, _React$Component);

  function PlaybackSpeedPanel(props) {
    var _this;

    _classCallCheck(this, PlaybackSpeedPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlaybackSpeedPanel).call(this, props));
    _this.onMenuItemClick = _this.onMenuItemClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Handles menu item clicks.
   * @private
   * @param {String} itemValue The value of the menu item that was clicked
   */


  _createClass(PlaybackSpeedPanel, [{
    key: "onMenuItemClick",
    value: function onMenuItemClick(itemValue) {
      var controller = this.props.controller;
      controller.setPlaybackSpeed(itemValue);
    }
    /**
     * Extracts and normalizes the configured speed options to use for the menu.
     * @private
     * @returns {Array} The array of sorted values to use for the menu items, constrained
     * to min and max values and truncated to 2 decimals
     */

  }, {
    key: "getPlaybackSpeedOptions",
    value: function getPlaybackSpeedOptions() {
      var skinConfig = this.props.skinConfig; // Only process speed options once per component mount

      if (!this.playbackSpeedOptions) {
        if (skinConfig.playbackSpeed.length >= 1) {
          // We take configured values from backlot
          skinConfig.playbackSpeed.options = _toConsumableArray(skinConfig.playbackSpeed);
        } // Get configured values from skin


        this.playbackSpeedOptions = _utils.default.getPropertyValue(skinConfig, 'playbackSpeed.options', _constants.default.PLAYBACK_SPEED.DEFAULT_OPTIONS); // Constrain to min and max values and ensure at most 2 decimals

        this.playbackSpeedOptions = this.playbackSpeedOptions.map(function (option) {
          return _utils.default.sanitizePlaybackSpeed(option);
        }); // Remove duplicates

        this.playbackSpeedOptions = _utils.default.dedupeArray(this.playbackSpeedOptions); // Sort in ascending order

        this.playbackSpeedOptions.sort(function (first, second) {
          return first - second;
        });
      }

      return this.playbackSpeedOptions;
    }
    /**
     * Maps playback speed options to menu item objects that contain the label, aria
     * labe, etc., that will be displayed by the menu panel
     * @private
     * @returns {Array} An array of menu items with the existing playback speed options
     */

  }, {
    key: "getMenuItems",
    value: function getMenuItems() {
      var _this$props = this.props,
          language = _this$props.language,
          localizableStrings = _this$props.localizableStrings;
      var playbackSpeedOptions = this.getPlaybackSpeedOptions();
      var menuItems = playbackSpeedOptions.map(function (option) {
        var itemLabel;
        var ariaLabel;

        if (option === _constants.default.PLAYBACK_SPEED.DEFAULT_VALUE) {
          itemLabel = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.NORMAL_SPEED, localizableStrings);
          ariaLabel = _constants.default.ARIA_LABELS.NORMAL_SPEED;
        } else {
          itemLabel = "".concat(option, "x");
          ariaLabel = _constants.default.ARIA_LABELS.PLAYBACK_SPEED.replace(_macros.default.RATE, option);
        }

        var menuItem = {
          value: option,
          label: itemLabel,
          ariaLabel: ariaLabel
        };
        return menuItem;
      });
      return menuItems;
    }
  }, {
    key: "render",
    value: function render() {
      var menuItems = this.getMenuItems();
      var _this$props2 = this.props,
          isPopover = _this$props2.isPopover,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          controller = _this$props2.controller,
          skinConfig = _this$props2.skinConfig,
          onClose = _this$props2.onClose;

      var selectedValue = _utils.default.getPropertyValue(controller, 'state.playbackSpeedOptions.currentSpeed', _constants.default.UI.DEFAULT_PLAYBACK_SPEED);

      var title = _utils.default.getLocalizedString(language, isPopover ? _constants.default.SKIN_TEXT.PLAYBACK_SPEED : '', localizableStrings);

      return _react.default.createElement(_menuPanel.default, {
        className: "oo-playback-speed-panel",
        title: title,
        selectedValue: selectedValue,
        isPopover: isPopover,
        skinConfig: skinConfig,
        menuItems: menuItems,
        onMenuItemClick: this.onMenuItemClick,
        onClose: onClose
      });
    }
  }]);

  return PlaybackSpeedPanel;
}(_react.default.Component);

PlaybackSpeedPanel.propTypes = {
  isPopover: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  localizableStrings: _propTypes.default.shape({}).isRequired,
  onClose: _propTypes.default.func,
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      playbackSpeedOptions: _propTypes.default.shape({
        currentSpeed: _propTypes.default.number.isRequired
      })
    }),
    setPlaybackSpeed: _propTypes.default.func.isRequired
  }).isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    }),
    playbackSpeed: _propTypes.default.shape({
      options: _propTypes.default.arrayOf(_propTypes.default.number).isRequired
    })
  })
};
PlaybackSpeedPanel.defaultProps = {
  isPopover: false,
  onClose: function onClose() {},
  skinConfig: {}
};
module.exports = PlaybackSpeedPanel;

},{"../constants/constants":69,"../constants/macros":70,"./menuPanel":44,"./utils":63,"prop-types":370,"react":378}],50:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _thumbnailContainer = _interopRequireDefault(require("./thumbnailContainer"));

var _utils = _interopRequireDefault(require("./utils"));

var _macros = _interopRequireDefault(require("../constants/macros"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Scrubbler bar implementation
 */
var ScrubberBar =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ScrubberBar, _React$Component);

  // Using temporary isMounted strategy mentioned in https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html
  function ScrubberBar(props) {
    var _this;

    _classCallCheck(this, ScrubberBar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrubberBar).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_isMounted", false);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getResponsiveUIMultiple", function (responsiveView) {
      var skinConfig = _this.props.skinConfig;
      return skinConfig.responsive.breakpoints[responsiveView].multiplier;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function () {
      _this.setState({
        scrubberBarWidth: _reactDom.default.findDOMNode(_this.refs.scrubberBar).clientWidth,
        // eslint-disable-line
        playheadWidth: _reactDom.default.findDOMNode(_this.refs.playhead).clientWidth // eslint-disable-line

      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayheadMouseDown", function (event) {
      var controller = _this.props.controller;

      if (controller.state.screenToShow === _constants.default.SCREEN.AD_SCREEN) {
        event.preventDefault();
        return;
      }

      controller.startHideControlBarTimer();

      if (event.target.className.match('playhead') && event.type !== 'mousedown') {
        _this.touchInitiated = true;
      }

      if (_this.touchInitiated && event.type !== 'mousedown' || !_this.touchInitiated && event.type === 'mousedown') {
        // since mobile would fire both click and touched events,
        // we need to make sure only one actually does the work
        event.preventDefault();

        if (_this.touchInitiated) {
          event = event.touches[0]; // eslint-disable-line
        } // we enter the scrubbing state to prevent constantly seeking while dragging
        // the playhead icon


        controller.beginSeeking();
        controller.renderSkin();

        if (!_this.lastScrubX) {
          _this.lastScrubX = event.clientX;
        }

        if (!_this.touchInitiated) {
          _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).parentNode.addEventListener('mousemove', _this.handlePlayheadMouseMove); // eslint-disable-line
          // attach a mouseup listener to the document for usability, otherwise scrubbing
          // breaks if your cursor leaves the player element


          document.addEventListener('mouseup', _this.handlePlayheadMouseUp, true);
        } else {
          _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).parentNode.addEventListener('touchmove', _this.handlePlayheadMouseMove); // eslint-disable-line


          document.addEventListener('touchend', _this.handlePlayheadMouseUp, true);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayheadMouseMove", function (event) {
      var _this$props = _this.props,
          controller = _this$props.controller,
          currentPlayhead = _this$props.currentPlayhead,
          duration = _this$props.duration,
          seeking = _this$props.seeking;
      var scrubberBarWidth = _this.state.scrubberBarWidth;
      controller.startHideControlBarTimer();
      event.preventDefault();

      if (seeking && duration > 0) {
        if (_this.touchInitiated) {
          event = event.touches[0]; // eslint-disable-line
        }

        var deltaX = event.clientX - _this.lastScrubX;
        var scrubbingPlayheadX = currentPlayhead * scrubberBarWidth / duration + deltaX;
        controller.updateSeekingPlayhead(scrubbingPlayheadX / scrubberBarWidth * duration);

        _this.setState({
          scrubbingPlayheadX: scrubbingPlayheadX
        });

        _this.lastScrubX = event.clientX;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayheadMouseUp", function (event) {
      if (!_this._isMounted) {
        // eslint-disable-line
        return;
      }

      var _this$props2 = _this.props,
          controller = _this$props2.controller,
          currentPlayhead = _this$props2.currentPlayhead;
      controller.startHideControlBarTimer();
      event.preventDefault(); // stop propagation to prevent it from bubbling up to the skin and pausing

      event.stopPropagation(); // W3C

      event.cancelBubble = true; // eslint-disable-line
      // Remove keyboard focus when clicking on scrubber bar

      var scrubberBar = _reactDom.default.findDOMNode(_this.refs.scrubberBar); // eslint-disable-line


      if (scrubberBar && typeof scrubberBar.blur === 'function') {
        scrubberBar.blur();
      }

      _this.lastScrubX = null;

      if (!_this.touchInitiated) {
        _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).parentNode.removeEventListener('mousemove', _this.handlePlayheadMouseMove); // eslint-disable-line


        document.removeEventListener('mouseup', _this.handlePlayheadMouseUp, true);
      } else {
        _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))).parentNode.removeEventListener('touchmove', _this.handlePlayheadMouseMove); // eslint-disable-line


        document.removeEventListener('touchend', _this.handlePlayheadMouseUp, true);
      }

      controller.seek(currentPlayhead);

      if (_this._isMounted) {
        // eslint-disable-line
        _this.setState({
          currentPlayhead: currentPlayhead,
          scrubbingPlayheadX: 0
        }); // eslint-disable-line


        controller.endSeeking();
      }

      _this.touchInitiated = false;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarKeyDown", function (event) {
      var controller = _this.props.controller;

      switch (event.key) {
        case _constants.default.KEY_VALUES.ARROW_UP:
        case _constants.default.KEY_VALUES.ARROW_RIGHT:
          event.preventDefault();
          controller.accessibilityControls.seekBy(_constants.default.A11Y_CTRLS.SEEK_DELTA, true);
          break;

        case _constants.default.KEY_VALUES.ARROW_DOWN:
        case _constants.default.KEY_VALUES.ARROW_LEFT:
          event.preventDefault();
          controller.accessibilityControls.seekBy(_constants.default.A11Y_CTRLS.SEEK_DELTA, false);
          break;

        default:
          break;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarMouseDown", function (event) {
      var _this$props3 = _this.props,
          controller = _this$props3.controller,
          duration = _this$props3.duration;

      if (controller.state.screenToShow === _constants.default.SCREEN.AD_SCREEN) {
        event.preventDefault();
        return;
      }

      if (event.target.className.match('oo-playhead')) {
        return;
      }

      if (_this.touchInitiated && event.type === 'mousedown') {
        return;
      }

      var offsetX = 0;
      _this.touchInitiated = event.type === 'touchstart';

      if (_this.touchInitiated) {
        offsetX = event.targetTouches[0].pageX - event.target.getBoundingClientRect().left;
      } else {
        offsetX = event.nativeEvent.offsetX === undefined ? event.nativeEvent.layerX : event.nativeEvent.offsetX;
      }

      _this.setState({
        scrubbingPlayheadX: offsetX
      });

      var scrubberBarWidth = _this.state.scrubberBarWidth;
      controller.updateSeekingPlayhead(offsetX / scrubberBarWidth * duration);

      _this.handlePlayheadMouseDown(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarMouseMove", function (event) {
      _this.handleScrubberBarMouseOver(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarMouseOver", function (event) {
      var _this$props4 = _this.props,
          controller = _this$props4.controller,
          skinConfig = _this$props4.skinConfig;
      if (!skinConfig.controlBar.scrubberBar.thumbnailPreview) return;
      if (controller.state.screenToShow === _constants.default.SCREEN.AD_SCREEN) return;

      if (_this.isMobile) {
        return;
      }

      if (event.target.className.match('oo-playhead')) {
        return;
      }

      controller.setScrubberBarHoverState(true);

      _this.setState({
        hoveringX: event.nativeEvent.offsetX
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarMouseOut", function () {
      var controller = _this.props.controller;
      if (!controller.state.thumbnails) return;
      controller.setScrubberBarHoverState(false);

      _this.setState({
        hoveringX: 0
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleScrubberBarMouseLeave", function () {
      var controller = _this.props.controller;
      controller.setScrubberBarHoverState(false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getAriaValueText", function () {
      var ariaValueText;
      var _this$props5 = _this.props,
          currentPlayhead = _this$props5.currentPlayhead,
          duration = _this$props5.duration,
          isLiveStream = _this$props5.isLiveStream;

      var timeDisplayValues = _utils.default.getTimeDisplayValues(currentPlayhead, duration, isLiveStream);

      if (isLiveStream) {
        if (timeDisplayValues.totalTime) {
          ariaValueText = _constants.default.ARIA_LABELS.TIME_DISPLAY_DVR.replace(_macros.default.CURRENT_TIME, timeDisplayValues.currentTime);
          ariaValueText = ariaValueText.replace(_macros.default.TOTAL_TIME, timeDisplayValues.totalTime);
        } else {
          ariaValueText = _constants.default.ARIA_LABELS.TIME_DISPLAY_LIVE;
        }
      } else {
        ariaValueText = _constants.default.ARIA_LABELS.TIME_DISPLAY.replace(_macros.default.CURRENT_TIME, timeDisplayValues.currentTime);
        ariaValueText = ariaValueText.replace(_macros.default.TOTAL_TIME, timeDisplayValues.totalTime);
      }

      return ariaValueText;
    });

    _this.lastScrubX = null;
    var _controller = _this.props.controller;
    _this.isMobile = _controller.state.isMobile;
    _this.touchInitiated = false;
    _this.state = {
      scrubberBarWidth: 0,
      playheadWidth: 0,
      scrubbingPlayheadX: 0,
      hoveringX: 0,
      transitionedDuringSeek: false
    };
    return _this;
  }

  _createClass(ScrubberBar, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var seeking = this.props.seeking;

      if (seeking) {
        this.setState({
          transitionedDuringSeek: true
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._isMounted = true; // eslint-disable-line

      this.handleResize();
    }
    /**
     * Reflect in the state if we've got seeking
     * @param {Object} nextProps - the next props react object
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var transitionedDuringSeek = this.state.transitionedDuringSeek;
      var seeking = nextProps.seeking;
      var componentWidth = this.props.componentWidth;

      if (transitionedDuringSeek && !seeking) {
        this.setState({
          transitionedDuringSeek: false
        });
      }

      if (nextProps.componentWidth !== componentWidth) {
        this.handleResize();
      }
    }
    /**
     * Trigger resize if requested
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var forceResize = this.props.forceResize;

      if (forceResize) {
        this.handleResize();
      }
    }
    /**
     * Remove event listeners for mobile devices
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false; // eslint-disable-line

      if (!this.isMobile) {
        _reactDom.default.findDOMNode(this).parentNode.removeEventListener('mousemove', this.handlePlayheadMouseMove); // eslint-disable-line


        document.removeEventListener('mouseup', this.handlePlayheadMouseUp, true);
      } else {
        _reactDom.default.findDOMNode(this).parentNode.removeEventListener('touchmove', this.handlePlayheadMouseMove); // eslint-disable-line


        document.removeEventListener('touchend', this.handlePlayheadMouseUp, true);
      }
    }
    /**
     * Get multiplier parameter for specified UI breakpoint
     * @param {string} responsiveView breakpoint value
     * @returns {number} the mutiplier value
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          audioOnly = _this$props6.audioOnly,
          buffered = _this$props6.buffered,
          controller = _this$props6.controller,
          currentPlayhead = _this$props6.currentPlayhead,
          duration = _this$props6.duration,
          skinConfig = _this$props6.skinConfig;
      var scrubberBarStyle = {
        backgroundColor: skinConfig.controlBar.scrubberBar.backgroundColor
      };
      var hundred = 100;
      var bufferedIndicatorStyle = {
        width: "".concat(Math.min(parseFloat(buffered) / parseFloat(duration) * hundred, hundred), "%"),
        backgroundColor: skinConfig.controlBar.scrubberBar.bufferedColor
      };
      var playedIndicatorStyle = {
        width: "".concat(Math.min(parseFloat(currentPlayhead) / parseFloat(duration) * hundred, hundred), "%"),
        backgroundColor: skinConfig.controlBar.scrubberBar.playedColor ? skinConfig.controlBar.scrubberBar.playedColor : skinConfig.general.accentColor
      };
      var playheadStyle = {
        backgroundColor: skinConfig.controlBar.scrubberBar.playedColor ? skinConfig.controlBar.scrubberBar.playedColor : skinConfig.general.accentColor
      };
      var playheadPaddingStyle = {};
      var _this$state = this.state,
          hoveringX = _this$state.hoveringX,
          transitionedDuringSeek = _this$state.transitionedDuringSeek,
          scrubbingPlayheadX = _this$state.scrubbingPlayheadX,
          scrubberBarWidth = _this$state.scrubberBarWidth,
          playheadWidth = _this$state.playheadWidth;

      if (!transitionedDuringSeek) {
        if (scrubbingPlayheadX && scrubbingPlayheadX !== 0) {
          playheadPaddingStyle.left = scrubbingPlayheadX;
        } else {
          playheadPaddingStyle.left = parseFloat(currentPlayhead) / parseFloat(duration) * scrubberBarWidth;
        }

        playheadPaddingStyle.left = Math.max(Math.min(scrubberBarWidth - Number.parseInt(playheadWidth, 0) / 2, playheadPaddingStyle.left), 0);
        if (Number.isNaN(playheadPaddingStyle.left)) playheadPaddingStyle.left = 0;
      }

      var playheadMouseDown = this.handlePlayheadMouseDown;
      var scrubberBarMouseDown = this.handleScrubberBarMouseDown;
      var scrubberBarMouseOver = this.handleScrubberBarMouseOver;
      var scrubberBarMouseOut = this.handleScrubberBarMouseOut;
      var scrubberBarMouseMove = this.handleScrubberBarMouseMove;
      var playedIndicatorClassName = 'oo-played-indicator';
      var playheadClassName = 'oo-playhead';

      if (controller.state.screenToShow === _constants.default.SCREEN.AD_SCREEN) {
        playheadClassName += ' oo-ad-playhead';
        playedIndicatorClassName += ' oo-played-ad-indicator';
        playheadMouseDown = null;
        scrubberBarStyle.backgroundColor = skinConfig.controlBar.adScrubberBar.backgroundColor;
        bufferedIndicatorStyle.backgroundColor = skinConfig.controlBar.adScrubberBar.bufferedColor;
        playedIndicatorStyle.backgroundColor = skinConfig.controlBar.adScrubberBar.playedColor;
      }

      var hoverTime = 0;
      var hoverPosition = 0;
      var hoveredIndicatorStyle = null;
      var hovering = false;
      var thumbnailsContainer = null;

      if (controller.state.thumbnails && (scrubbingPlayheadX || this.lastScrubX || hoveringX)) {
        var vrViewingDirection = {
          yaw: 0,
          roll: 0,
          pitch: 0
        };

        if (controller && controller.state && controller.state.vrViewingDirection) {
          vrViewingDirection = controller.state.vrViewingDirection; // eslint-disable-line
        }

        var fullscreen = false;

        if (controller && controller.state && controller.state.fullscreen) {
          fullscreen = controller.state.fullscreen; // eslint-disable-line
        }

        var videoVr = false;

        if (controller && controller.videoVr) {
          videoVr = controller.videoVr; // eslint-disable-line
        }

        var isCarousel = false;

        if (scrubbingPlayheadX) {
          hoverPosition = scrubbingPlayheadX;
          hoverTime = scrubbingPlayheadX / scrubberBarWidth * duration;
          playheadClassName += ' oo-playhead-scrubbing';
          isCarousel = true;
        } else if (this.lastScrubX) {
          // to show thumbnail when clicking on playhead
          hoverPosition = currentPlayhead * scrubberBarWidth / duration;
          hoverTime = currentPlayhead;
          playheadClassName += ' oo-playhead-scrubbing';
        } else if (hoveringX) {
          hoverPosition = hoveringX;
          hoverTime = hoveringX / scrubberBarWidth * duration;
          hoveredIndicatorStyle = {
            width: "".concat(Math.min(parseFloat(hoverTime) / parseFloat(duration) * hundred, hundred), "%"),
            backgroundColor: skinConfig.controlBar.scrubberBar.playedColor ? skinConfig.controlBar.scrubberBar.playedColor : skinConfig.general.accentColor
          };
          hovering = true;
          playheadClassName += ' oo-playhead-hovering';
        }

        thumbnailsContainer = _react.default.createElement(_thumbnailContainer.default, {
          isCarousel: isCarousel,
          thumbnails: controller.state.thumbnails,
          duration: duration,
          hoverPosition: hoverPosition,
          hoverTime: hoverTime > 0 ? hoverTime : 0,
          scrubberBarWidth: scrubberBarWidth,
          videoVr: videoVr,
          fullscreen: fullscreen,
          vrViewingDirection: vrViewingDirection
        });
      }

      var scrubberBarClass = (0, _classnames.default)({
        'oo-scrubber-bar': true,
        'oo-scrubber-bar-hover': hovering,
        'oo-scrubber-bar-video': !audioOnly
      });
      var ariaValueText = this.getAriaValueText();
      return _react.default.createElement("div", {
        // eslint-disable-line
        className: "oo-scrubber-bar-container",
        ref: "scrubberBarContainer" // eslint-disable-line
        ,
        onMouseOver: scrubberBarMouseOver,
        onMouseOut: scrubberBarMouseOut,
        onMouseLeave: this.handleScrubberBarMouseLeave,
        onMouseMove: scrubberBarMouseMove
      }, thumbnailsContainer, _react.default.createElement("div", {
        // eslint-disable-line
        className: "oo-scrubber-bar-padding",
        ref: "scrubberBarPadding" // eslint-disable-line
        ,
        onMouseDown: scrubberBarMouseDown,
        onTouchStart: scrubberBarMouseDown
      }, _react.default.createElement("div", {
        ref: "scrubberBar" // eslint-disable-line
        ,
        className: scrubberBarClass,
        style: scrubberBarStyle,
        role: "slider",
        "aria-label": _constants.default.ARIA_LABELS.SEEK_SLIDER,
        "aria-valuemin": "0",
        "aria-valuemax": duration,
        "aria-valuenow": _utils.default.ensureNumber(currentPlayhead, 0).toFixed(2),
        "aria-valuetext": ariaValueText,
        "data-focus-id": _constants.default.FOCUS_IDS.SCRUBBER_BAR,
        tabIndex: "0",
        onKeyDown: this.handleScrubberBarKeyDown
      }, _react.default.createElement("div", {
        className: "oo-buffered-indicator",
        style: bufferedIndicatorStyle
      }), _react.default.createElement("div", {
        className: "oo-hovered-indicator",
        style: hoveredIndicatorStyle
      }), _react.default.createElement("div", {
        className: playedIndicatorClassName,
        style: playedIndicatorStyle
      }), _react.default.createElement("div", {
        // eslint-disable-line
        className: "oo-playhead-padding",
        style: playheadPaddingStyle,
        onMouseDown: playheadMouseDown,
        onTouchStart: playheadMouseDown
      }, _react.default.createElement("div", {
        ref: "playhead" // eslint-disable-line
        ,
        className: playheadClassName,
        style: playheadStyle
      })))));
    }
  }]);

  return ScrubberBar;
}(_react.default.Component);

ScrubberBar.propTypes = {
  audioOnly: _propTypes.default.bool,
  buffered: _propTypes.default.number,
  controller: _propTypes.default.shape({}).isRequired,
  duration: _propTypes.default.number,
  forceResize: _propTypes.default.bool,
  isLiveStream: _propTypes.default.bool,
  currentPlayhead: _propTypes.default.number,
  seeking: _propTypes.default.bool,
  skinConfig: _propTypes.default.shape({}),
  componentWidth: _propTypes.default.number
};
ScrubberBar.defaultProps = {
  audioOnly: false,
  buffered: 0,
  componentWidth: 0,
  currentPlayhead: 0,
  duration: 0,
  forceResize: false,
  isLiveStream: false,
  seeking: false,
  skinConfig: {
    controlBar: {
      scrubberBar: {
        backgroundColor: 'rgba(5,175,175,1)',
        bufferedColor: 'rgba(127,5,127,1)',
        playedColor: 'rgba(67,137,5,1)'
      },
      adScrubberBar: {
        backgroundColor: 'rgba(175,175,5,1)',
        bufferedColor: 'rgba(127,5,127,1)',
        playedColor: 'rgba(5,63,128,1)'
      }
    }
  }
};
module.exports = ScrubberBar;

},{"../constants/constants":69,"../constants/macros":70,"./thumbnailContainer":59,"./utils":63,"classnames":86,"prop-types":370,"react":378,"react-dom":374}],51:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Panel component for Share Screen.
 */
var SharePanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SharePanel, _React$Component);

  function SharePanel(props) {
    var _this;

    _classCallCheck(this, SharePanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SharePanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getActivePanel", function () {
      var activeTab = _this.state.activeTab;
      var _this$props = _this.props,
          assetId = _this$props.assetId,
          playerParam = _this$props.playerParam,
          skinConfig = _this$props.skinConfig;

      if (activeTab === _this.tabs.SHARE) {
        var socialContent = _toConsumableArray(new Set(_utils.default.getPropertyValue(skinConfig, 'shareScreen.socialContent', [])));

        var shareButtons = [];
        socialContent.forEach(function (shareButton) {
          switch (shareButton) {
            case 'twitter':
              shareButtons.push(_react.default.createElement("a", {
                key: "twitter",
                className: "oo-twitter",
                onClick: _this.handleTwitterClick
              })); // eslint-disable-line

              break;

            case 'facebook':
              shareButtons.push(_react.default.createElement("a", {
                key: "facebook",
                className: "oo-facebook",
                onClick: _this.handleFacebookClick
              })); // eslint-disable-line

              break;

            case 'google+':
              shareButtons.push(_react.default.createElement("a", {
                key: "google+",
                className: "oo-google-plus",
                onClick: _this.handleGPlusClick
              })); // eslint-disable-line

              break;

            case 'email':
              shareButtons.push(_react.default.createElement("a", {
                key: "email",
                className: "oo-email-share",
                onClick: _this.handleEmailClick
              })); // eslint-disable-line

              break;

            default:
              break;
          }
        }, _assertThisInitialized(_assertThisInitialized(_this)));
        return _react.default.createElement("div", {
          className: "oo-share-tab-panel"
        }, shareButtons);
      }

      var iframeURL;

      if (activeTab === _this.tabs.EMBED) {
        try {
          iframeURL = skinConfig.shareScreen.embed.source.replace('<ASSET_ID>', assetId).replace('<PLAYER_ID>', playerParam.playerBrandingId).replace('<PUBLISHER_ID>', playerParam.pcode);
        } catch (err) {
          iframeURL = '';
        }

        return _react.default.createElement("div", {
          className: "oo-share-tab-panel"
        }, _react.default.createElement("textarea", {
          className: "oo-form-control oo-embed-form",
          rows: "3",
          value: iframeURL,
          readOnly: true
        }));
      }

      return null;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleEmailClick", function (event) {
      var _this$props2 = _this.props,
          contentTree = _this$props2.contentTree,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings;
      event.preventDefault();

      var emailBody = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.EMAIL_BODY, localizableStrings);

      var mailToUrl = 'mailto:';
      mailToUrl += "?subject=".concat(encodeURIComponent(contentTree.title));
      mailToUrl += "&body=".concat(encodeURIComponent(emailBody + window.location.href)); // location.href = mailToUrl; //same window
      // TODO: Add html5-common to html5-skin?

      if (OO.isIos && OO.isSafari) {
        document.location = mailToUrl;
      } else {
        var emailWindow = window.open(mailToUrl, 'email', 'height=315,width=780'); // new window

        var twoSeconds = 2000;
        setTimeout(function () {
          try {
            // If we can't access href, a web client has taken over and this will throw
            // an exception, preventing the window from being closed.
            var test = emailWindow.location.href; // eslint-disable-line

            emailWindow.close();
          } catch (error) {
            console.log('email send error - ', error);
          } // Generous 2 second timeout to give the window time to redirect if it's going to a web client

        }, twoSeconds);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFacebookClick", function () {
      var facebookUrl = 'http://www.facebook.com/sharer.php';
      facebookUrl += "?u=".concat(encodeURIComponent(window.location.href));
      window.open(facebookUrl, 'facebook window', 'height=315,width=780');
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleGPlusClick", function () {
      var gPlusUrl = 'https://plus.google.com/share';
      gPlusUrl += "?url=".concat(encodeURIComponent(window.location.href));
      window.open(gPlusUrl, 'google+ window', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTwitterClick", function () {
      var twitterUrl = 'https://twitter.com/intent/tweet';
      var contentTree = _this.props.contentTree;
      twitterUrl += "?text=".concat(encodeURIComponent("".concat(contentTree.title, ": ")));
      twitterUrl += "&url=".concat(encodeURIComponent(window.location.href));
      window.open(twitterUrl, 'twitter window', 'height=300,width=750');
    });

    var _skinConfig = _this.props.skinConfig;

    var shareContent = _utils.default.getPropertyValue(_skinConfig, 'shareScreen.shareContent');

    var _socialContent = _utils.default.getPropertyValue(_skinConfig, 'shareScreen.socialContent', []);

    var _activeTab = shareContent ? shareContent[0] : null; // If no social buttons are specified, default to the first tab
    // that isn't the 'social' tab, since it will be hidden


    if (shareContent && !_socialContent.length) {
      for (var index = 0; index < shareContent.length; index += 1) {
        if (shareContent[index] !== 'social') {
          _activeTab = shareContent[index];
          break;
        }
      }
    }

    _this.tabs = {
      SHARE: 'social',
      EMBED: 'embed'
    };
    _this.state = {
      activeTab: _activeTab
    };
    return _this;
  }
  /**
   * Build and return active panel
   * @returns {Object} React Component
   */


  _createClass(SharePanel, [{
    key: "showPanel",

    /**
     * Show the specified panel
     * @param {string} panelToShow - panel to get shown
     */
    value: function showPanel(panelToShow) {
      this.setState({
        activeTab: panelToShow
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          language = _this$props3.language,
          localizableStrings = _this$props3.localizableStrings,
          skinConfig = _this$props3.skinConfig;
      var activeTab = this.state.activeTab;

      var shareContent = _utils.default.getPropertyValue(skinConfig, 'shareScreen.shareContent');

      var socialContent = _utils.default.getPropertyValue(skinConfig, 'shareScreen.socialContent', []);

      if (!shareContent) return null;
      var showEmbedTab = !!shareContent.find(function (element) {
        return element === _this2.tabs.EMBED;
      });
      var showShareTab = !!shareContent.find(function (element) {
        return element === _this2.tabs.SHARE && socialContent.length;
      });
      var shareTab = (0, _classnames.default)({
        'oo-share-tab': true,
        'oo-active': activeTab === this.tabs.SHARE,
        'oo-hidden': !showShareTab
      });
      var embedTab = (0, _classnames.default)({
        'oo-embed-tab': true,
        'oo-active': activeTab === this.tabs.EMBED,
        'oo-hidden': !showEmbedTab
      });

      var shareString = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.SHARE, localizableStrings);

      var embedString = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.EMBED, localizableStrings);

      return _react.default.createElement("div", {
        className: "oo-content-panel oo-share-panel"
      }, _react.default.createElement("div", {
        className: "oo-tab-row"
      }, _react.default.createElement("a", {
        // eslint-disable-line
        className: shareTab,
        onClick: this.showPanel.bind(this, this.tabs.SHARE)
      }, shareString), _react.default.createElement("a", {
        // eslint-disable-line
        className: embedTab,
        onClick: this.showPanel.bind(this, this.tabs.EMBED)
      }, embedString)), this.getActivePanel());
    }
  }]);

  return SharePanel;
}(_react.default.Component);

SharePanel.propTypes = {
  assetId: _propTypes.default.string,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  playerParam: _propTypes.default.shape({}),
  skinConfig: _propTypes.default.shape({}),
  contentTree: _propTypes.default.shape({})
};
SharePanel.defaultProps = {
  assetId: '',
  language: 'en',
  localizableStrings: {},
  playerParam: {},
  skinConfig: {},
  contentTree: {
    title: ''
  }
};
module.exports = SharePanel;

},{"../constants/constants":69,"./utils":63,"classnames":86,"prop-types":370,"react":378}],52:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controlButton = _interopRequireDefault(require("./controlButton"));

var _holdControlButton = _interopRequireDefault(require("./holdControlButton"));

var _preserveKeyboardFocus = _interopRequireDefault(require("./higher-order/preserveKeyboardFocus"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _macros = _interopRequireDefault(require("../constants/macros"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * The implemenation of controls to skip asset
 */
var SkipControls =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SkipControls, _React$Component);

  function SkipControls(props) {
    var _this;

    _classCallCheck(this, SkipControls);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SkipControls).call(this, props));
    _this.storeRef = _this.storeRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onPreviousVideo = _this.onPreviousVideo.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onNextVideo = _this.onNextVideo.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onSkipBackward = _this.onSkipBackward.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onSkipForward = _this.onSkipForward.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.isAtVideoEdge = _this.isAtVideoEdge.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onMouseEnter = _this.onMouseEnter.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onPlayPauseClick = _this.onPlayPauseClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Fired when the component is mounted. Notifies its parent about it's position
   * and dimensions (client rect).
   * @private
   */


  _createClass(SkipControls, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var onMount = this.props.onMount;

      if (this.domElement && typeof onMount === 'function') {
        var clientRect = this.domElement.getBoundingClientRect();
        onMount(clientRect);
      }
    }
    /**
     * Previous Video button click handler.
     * @private
     */

  }, {
    key: "onPreviousVideo",
    value: function onPreviousVideo() {
      var controller = this.props.controller;

      if (typeof controller.rewindOrRequestPreviousVideo === 'function') {
        controller.rewindOrRequestPreviousVideo();
      }
    }
    /**
     * Next Video button click handler.
     * @private
     */

  }, {
    key: "onNextVideo",
    value: function onNextVideo() {
      var controller = this.props.controller;

      if (typeof controller.requestNextVideo === 'function') {
        controller.requestNextVideo();
      }
    }
    /**
     * Skip Backward button click handler.
     * @private
     */

  }, {
    key: "onSkipBackward",
    value: function onSkipBackward() {
      var _this$props = this.props,
          a11yControls = _this$props.a11yControls,
          skinConfig = _this$props.skinConfig;

      if (typeof a11yControls.seekBy === 'function') {
        var skipTimes = _utils.default.getSkipTimes(skinConfig);

        a11yControls.seekBy(skipTimes.backward, false, true);
      }
    }
    /**
     * Skip Forward button click handler.
     * @private
     */

  }, {
    key: "onSkipForward",
    value: function onSkipForward() {
      var _this$props2 = this.props,
          a11yControls = _this$props2.a11yControls,
          skinConfig = _this$props2.skinConfig;

      if (typeof a11yControls.seekBy === 'function') {
        var skipTimes = _utils.default.getSkipTimes(skinConfig);

        a11yControls.seekBy(skipTimes.forward, true, true);
      }
    }
    /**
     * Handles the mouseenter event. Given that the SkipControls have pointer-events
     * set to 'none' in order to allow clicking through them, this event is only fired
     * when the mouse is over a button. Whenever this happens we cancel the auto-hide
     * controls timer.
     * @private
     */

  }, {
    key: "onMouseEnter",
    value: function onMouseEnter() {
      var controller = this.props.controller;
      controller.cancelTimer();
    }
    /**
     * Play/Pause button click handler.
     * @private
     */

  }, {
    key: "onPlayPauseClick",
    value: function onPlayPauseClick() {
      var controller = this.props.controller;
      controller.togglePlayPause();
    }
    /**
     * Parses the skin.json's skip button configuration and returns the ids (button
     * names from the skin config) of the enabled buttons sorted by index in ascending order.
     * @private
     * @returns {array} An array of button objects. Each object contains the id and index
     * of the button.
     */

  }, {
    key: "getSortedButtonEntries",
    value: function getSortedButtonEntries() {
      var _this2 = this;

      var _this$props3 = this.props,
          buttonConfig = _this$props3.buttonConfig,
          skinConfig = _this$props3.skinConfig;

      var buttons = buttonConfig || _utils.default.getPropertyValue(skinConfig, 'skipControls.buttons', {}); // Find the ids and indexes of all enabled buttons


      var sorted = Object.keys(buttons).filter(function (buttonId) {
        return _this2.shouldDisplayButton(buttonId, buttons[buttonId]);
      }).map(function (buttonId) {
        return {
          id: buttonId,
          index: buttons[buttonId].index
        };
      }).sort(function (current, next) {
        return current.index - next.index;
      });
      return sorted;
    }
    /**
     * Gets a map which contains templates for each of the available buttons in
     * this component.
     * @private
     * @returns {object} An object whose keys are the ids of the skip buttons (as
     * defined in the skin.json) and whose values are the button components that
     * match each id.
     */

  }, {
    key: "getButtonTemplate",
    value: function getButtonTemplate() {
      var buttonTemplate = {};
      var buttonStyle = {};
      var _this$props4 = this.props,
          config = _this$props4.config,
          controller = _this$props4.controller,
          isInactive = _this$props4.isInactive,
          skinConfig = _this$props4.skinConfig;

      var skipTimes = _utils.default.getSkipTimes(skinConfig);

      var skipBackwardAriaLabel = _constants.default.ARIA_LABELS.SKIP_BACKWARD.replace(_macros.default.SECONDS, skipTimes.backward);

      var skipForwardAriaLabel = _constants.default.ARIA_LABELS.SKIP_FORWARD.replace(_macros.default.SECONDS, skipTimes.forward); // Note that the button elements are still in the DOM even when the controls
      // are hidden. When controls are inactive we disable pointer events so that
      // the user won't accidentally trigger a button when bringing up the controls
      // on touch devices.


      if (isInactive) {
        buttonStyle.pointerEvents = 'none';
      }

      var playButtonDetails = _utils.default.getPlayButtonDetails(controller.state.playerState);

      var duration = _utils.default.getPropertyValue(controller, 'state.duration');

      buttonTemplate[_constants.default.SKIP_CTRLS_KEYS.PREVIOUS_VIDEO] = _react.default.createElement(_controlButton.default, _extends({}, this.props, {
        key: _constants.default.SKIP_CTRLS_KEYS.PREVIOUS_VIDEO,
        focusId: _constants.default.SKIP_CTRLS_KEYS.PREVIOUS_VIDEO,
        style: buttonStyle,
        className: "oo-previous-video",
        icon: "previous",
        ariaLabel: _constants.default.ARIA_LABELS.PREVIOUS_VIDEO,
        disabled: !config.hasPreviousVideos,
        onClick: this.onPreviousVideo
      }));
      buttonTemplate[_constants.default.SKIP_CTRLS_KEYS.SKIP_BACKWARD] = _react.default.createElement(_holdControlButton.default, _extends({}, this.props, {
        key: _constants.default.SKIP_CTRLS_KEYS.SKIP_BACKWARD,
        focusId: _constants.default.SKIP_CTRLS_KEYS.SKIP_BACKWARD,
        style: buttonStyle,
        className: "oo-center-button oo-skip-backward",
        icon: "replay",
        ariaLabel: skipBackwardAriaLabel,
        disabled: !duration,
        onClick: this.onSkipBackward
      }), _react.default.createElement("span", {
        className: "oo-btn-counter"
      }, skipTimes.backward));
      buttonTemplate[_constants.default.SKIP_CTRLS_KEYS.SKIP_FORWARD] = _react.default.createElement(_holdControlButton.default, _extends({}, this.props, {
        key: _constants.default.SKIP_CTRLS_KEYS.SKIP_FORWARD,
        focusId: _constants.default.SKIP_CTRLS_KEYS.SKIP_FORWARD,
        style: buttonStyle,
        className: "oo-center-button oo-skip-forward",
        icon: "forward",
        ariaLabel: skipForwardAriaLabel,
        disabled: this.isAtVideoEdge() || !duration,
        onClick: this.onSkipForward
      }), _react.default.createElement("span", {
        className: "oo-btn-counter"
      }, skipTimes.forward));
      buttonTemplate[_constants.default.SKIP_CTRLS_KEYS.NEXT_VIDEO] = _react.default.createElement(_controlButton.default, _extends({}, this.props, {
        key: _constants.default.SKIP_CTRLS_KEYS.NEXT_VIDEO,
        focusId: _constants.default.SKIP_CTRLS_KEYS.NEXT_VIDEO,
        style: buttonStyle,
        className: "oo-next-video",
        icon: "next",
        ariaLabel: _constants.default.ARIA_LABELS.NEXT_VIDEO,
        disabled: !config.hasNextVideos,
        onClick: this.onNextVideo
      }));
      buttonTemplate[_constants.default.SKIP_CTRLS_KEYS.PLAY_PAUSE] = _react.default.createElement(_controlButton.default, _extends({}, this.props, {
        key: _constants.default.CONTROL_BAR_KEYS.PLAY_PAUSE,
        className: "oo-play-pause",
        focusId: _constants.default.CONTROL_BAR_KEYS.PLAY_PAUSE,
        ariaLabel: playButtonDetails.ariaLabel,
        icon: playButtonDetails.icon,
        onClick: this.onPlayPauseClick
      }));
      return buttonTemplate;
    }
    /**
     * Stores a ref to this component's main element.
     * @private
     * @param {HTMLElement} domElement - the real DOM element
     */

  }, {
    key: "storeRef",
    value: function storeRef(domElement) {
      this.domElement = domElement;
    }
    /**
     * Determines whether or not the current video is at the end (VOD) or at the
     * live edge (DVR Live Streams) based on the playhead state and duration.
     * @private
     * @returns {Boolean} True if the video is at the video end/live edge, false otherwise.
     */

  }, {
    key: "isAtVideoEdge",
    value: function isAtVideoEdge() {
      var _this$props5 = this.props,
          controller = _this$props5.controller,
          currentPlayhead = _this$props5.currentPlayhead;

      var isLiveStream = _utils.default.getPropertyValue(controller, 'state.isLiveStream', false);

      var duration = _utils.default.getPropertyValue(controller, 'state.duration', 0);

      var sanitizedCurrentPlayhead = _utils.default.ensureNumber(currentPlayhead, 0);

      var isVideoEdge = isLiveStream ? Math.abs(sanitizedCurrentPlayhead - duration) < 1 : sanitizedCurrentPlayhead >= duration;
      return isVideoEdge;
    }
    /**
     * Determines whether or not the button with the particular id can be displayed
     * considering the current player state and configuration.
     * @private
     * @param {string} buttonId The id of the button we want to check
     * @param {object} buttonConfig The configuration object from the skin config for the given button
     * @returns {boolean} True if the button should be displayed, false otherwise
     */

  }, {
    key: "shouldDisplayButton",
    value: function shouldDisplayButton(buttonId, buttonConfig) {
      var _this$props6 = this.props,
          config = _this$props6.config,
          controller = _this$props6.controller,
          forceShowButtons = _this$props6.forceShowButtons;
      var isSingleVideo = !config.hasPreviousVideos && !config.hasNextVideos;

      var duration = _utils.default.getPropertyValue(controller, 'state.duration');

      var isPrevNextButton = buttonId === _constants.default.SKIP_CTRLS_KEYS.PREVIOUS_VIDEO || buttonId === _constants.default.SKIP_CTRLS_KEYS.NEXT_VIDEO;
      var isSkipButton = buttonId === _constants.default.SKIP_CTRLS_KEYS.SKIP_BACKWARD || buttonId === _constants.default.SKIP_CTRLS_KEYS.SKIP_FORWARD;

      if (buttonConfig && buttonConfig.enabled === false && (isPrevNextButton || isSkipButton)) {
        return false;
      }

      var isDisabled = !forceShowButtons && (isSkipButton && !duration || isPrevNextButton && isSingleVideo || !(buttonConfig && buttonConfig.enabled));
      return !isDisabled;
    }
  }, {
    key: "render",
    value: function render() {
      var buttons = this.getSortedButtonEntries(); // Nothing to render if we don't have buttons

      if (!buttons.length) {
        return null;
      }

      var _this$props7 = this.props,
          className = _this$props7.className,
          isInactive = _this$props7.isInactive,
          isInBackground = _this$props7.isInBackground,
          onFocus = _this$props7.onFocus,
          onBlur = _this$props7.onBlur;
      var finalClassName = (0, _classnames.default)('oo-skip-controls', className, {
        'oo-inactive': isInactive,
        'oo-in-background': isInBackground
      });
      var buttonTemplate = this.getButtonTemplate();
      return _react.default.createElement("div", {
        ref: this.storeRef,
        className: finalClassName,
        onMouseEnter: this.onMouseEnter,
        onFocus: onFocus,
        onBlur: onBlur
      }, buttons.map(function (button) {
        return buttonTemplate[button.id];
      }));
    }
  }]);

  return SkipControls;
}(_react.default.Component);

SkipControls.propTypes = {
  className: _propTypes.default.string,
  maxWidth: _propTypes.default.number,
  forceShowButtons: _propTypes.default.bool,
  buttonConfig: _propTypes.default.shape({}),
  isInactive: _propTypes.default.bool,
  isInBackground: _propTypes.default.bool,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  responsiveView: _propTypes.default.string.isRequired,
  skinConfig: _propTypes.default.shape({}).isRequired,
  currentPlayhead: _propTypes.default.number.isRequired,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  config: _propTypes.default.shape({
    hasPreviousVideos: _propTypes.default.bool.isRequired,
    hasNextVideos: _propTypes.default.bool.isRequired
  }).isRequired,
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      isMobile: _propTypes.default.bool.isRequired,
      isLiveStream: _propTypes.default.bool.isRequired,
      duration: _propTypes.default.number.isRequired,
      scrubberBar: _propTypes.default.shape({
        isHovering: _propTypes.default.bool
      })
    }),
    rewindOrRequestPreviousVideo: _propTypes.default.func.isRequired,
    requestNextVideo: _propTypes.default.func.isRequired,
    setFocusedControl: _propTypes.default.func.isRequired,
    startHideControlBarTimer: _propTypes.default.func.isRequired,
    cancelTimer: _propTypes.default.func.isRequired,
    togglePlayPause: _propTypes.default.func.isRequired
  }).isRequired,
  a11yControls: _propTypes.default.shape({
    seekBy: _propTypes.default.func.isRequired
  })
};
SkipControls.defaultProps = {
  className: '',
  maxWidth: 0,
  forceShowButtons: false,
  buttonConfig: undefined,
  isInactive: false,
  isInBackground: false,
  language: 'en',
  localizableStrings: {},
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  a11yControls: {
    seekBy: function seekBy() {}
  }
};
module.exports = (0, _preserveKeyboardFocus.default)(SkipControls);

},{"../constants/constants":69,"../constants/macros":70,"./controlButton":31,"./higher-order/preserveKeyboardFocus":40,"./holdControlButton":41,"./utils":63,"classnames":86,"prop-types":370,"react":378}],53:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _macros = _interopRequireDefault(require("../constants/macros"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Represents slider component
 */
var Slider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider(_props) {
    var _this;

    _classCallCheck(this, Slider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider).call(this, _props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getAriaValues", function () {
      var aria = {};
      var _this$props = _this.props,
          maxValue = _this$props.maxValue,
          minValue = _this$props.minValue,
          settingName = _this$props.settingName,
          usePercentageForAria = _this$props.usePercentageForAria,
          value = _this$props.value;

      if (usePercentageForAria) {
        aria.valueMin = 0;
        aria.valueMax = 100;
        aria.valueNow = _utils.default.ensureNumber(value, 0) * 100 / _utils.default.ensureNumber(maxValue, 1);
        aria.valueText = _constants.default.ARIA_LABELS.SLIDER_VALUE_TEXT;
        aria.valueText = aria.valueText.replace(_macros.default.PERCENT, aria.valueNow).replace(_macros.default.SETTING, settingName);
      } else {
        aria.valueMin = minValue;
        aria.valueMax = maxValue;
        aria.valueNow = value;
        aria.valueText = "".concat(aria.valueNow, " ").concat(settingName);
      }

      return aria;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getNextSliderValue", function (forward) {
      var sign = forward ? 1 : -1;
      var _this$props2 = _this.props,
          minValue = _this$props2.minValue,
          maxValue = _this$props2.maxValue,
          value = _this$props2.value,
          step = _this$props2.step;
      var delta = _utils.default.ensureNumber(value) + _utils.default.ensureNumber(step, 1) * sign;

      var min = _utils.default.ensureNumber(minValue, -Infinity);

      var max = _utils.default.ensureNumber(maxValue, Infinity);

      var result = _utils.default.toFixedNumber(_utils.default.constrainToRange(delta, min, max), 2);

      return result;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setupValueObserver", function (target) {
      if (!target || !window.MutationObserver) {
        return null;
      }

      var observer = new window.MutationObserver(_this.triggerOnChangeForIe);
      var observerConfig = {
        attributes: true,
        attributeFilter: ['value']
      };
      observer.observe(target, observerConfig);
      return observer;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleSliderColoring", function (props) {
      if (_utils.default.isEdge()) {
        return;
      }

      var input = _this.refs[_this.props.itemRef]; // eslint-disable-line

      var style = window.getComputedStyle(input, null);
      var colorBeforeThumb = style.getPropertyValue('border-left-color');
      var colorAfterThumb = style.getPropertyValue('border-right-color');
      var value = (props.value - props.minValue) / (props.maxValue - props.minValue);
      input.style.backgroundImage = ['-webkit-gradient(', 'linear, ', 'left top, ', 'right top, ', "color-stop(".concat(value, ", ").concat(colorBeforeThumb, "), "), "color-stop(".concat(value, ", ").concat(colorAfterThumb, ")"), ')'].join('');
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "changeValue", function (event) {
      if (!event.target) {
        return;
      }

      var value = _utils.default.ensureNumber(event.target.value, 0); // These browsers might return a super small fractional number instead of 0
      // in some cases, this is a workaround for that.


      if (_utils.default.isIE() || _utils.default.isEdge()) {
        value = _utils.default.toFixedNumber(value, 2);
      }

      var onChange = _this.props.onChange;

      if (event.type === 'change' && !_utils.default.isIE()) {
        onChange(value);

        _this.handleSliderColoring(_this.props);
      } else if (_utils.default.isIE()) {
        onChange(value);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "triggerOnChangeForIe", function () {
      var domElement = _this.refs[_this.props.itemRef]; // eslint-disable-line

      var onChange = _this.props.onChange;

      if (domElement) {
        // Note that we use the attribute's value, rather than the element's value
        // property, which seems to have the wrong value some times.
        var newValue = _utils.default.ensureNumber(domElement.getAttribute('value'), 0);

        onChange(newValue);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseDown", function () {
      _this.setState({
        isDragging: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseUp", function (event) {
      _utils.default.blurOnMouseUp(event);

      _this.setState({
        isDragging: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMouseMove", function (event) {
      if (_utils.default.isIE()) {
        _this.changeValue(event);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
      var _this$props3 = _this.props,
          minValue = _this$props3.minValue,
          maxValue = _this$props3.maxValue,
          value = _this$props3.value;

      switch (event.key) {
        case _constants.default.KEY_VALUES.ARROW_UP:
        case _constants.default.KEY_VALUES.ARROW_RIGHT:
          event.target.setAttribute('value', _this.getNextSliderValue(true));
          break;

        case _constants.default.KEY_VALUES.ARROW_DOWN:
        case _constants.default.KEY_VALUES.ARROW_LEFT:
          event.target.setAttribute('value', _this.getNextSliderValue(false));
          break;

        case _constants.default.KEY_VALUES.HOME:
          event.target.setAttribute('value', _utils.default.ensureNumber(minValue, value));
          break;

        case _constants.default.KEY_VALUES.END:
          event.target.setAttribute('value', _utils.default.ensureNumber(maxValue, value));
          break;

        default:
          break;
      }
    });

    _this.state = {
      isDragging: false
    };
    return _this;
  }

  _createClass(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleSliderColoring(this.props);

      if (_utils.default.isIE()) {
        this.valueObserver = this.setupValueObserver(this.refs[this.props.itemRef]); // eslint-disable-line
      }
    }
    /**
     * Fire slider coloring if value changed
     * @param {Object} nextProps - the next props object
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var value = this.props.value;

      if (nextProps.value !== value) {
        this.handleSliderColoring(nextProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.valueObserver && typeof this.valueObserver.disconnect === 'function') {
        this.valueObserver.disconnect();
      }
    }
    /**
     * Uses the slider settings to generate the values for the different aria attributes
     * associated with sliders. Will format values as a percentage if this.props.usePercentageForAria
     * is set to true.
     * @private
     * @returns {Object} An object with the following properties: valueMin, valueMax, valueNow, valueText.
     */

  }, {
    key: "render",
    value: function render() {
      var aria = this.getAriaValues();
      var _this$props4 = this.props,
          ariaLabel = _this$props4.ariaLabel,
          className = _this$props4.className,
          focusId = _this$props4.focusId,
          itemRef = _this$props4.itemRef,
          minValue = _this$props4.minValue,
          maxValue = _this$props4.maxValue,
          step = _this$props4.step,
          value = _this$props4.value;
      var isDragging = this.state.isDragging;
      var finalClassName = (0, _classnames.default)('oo-slider', className, {
        'oo-dragging': isDragging
      });
      return _react.default.createElement("input", {
        type: "range",
        ref: itemRef,
        className: finalClassName,
        min: minValue,
        max: maxValue,
        value: value,
        step: step,
        "data-focus-id": focusId,
        tabIndex: "0",
        "aria-label": ariaLabel,
        "aria-valuemin": aria.valueMin,
        "aria-valuemax": aria.valueMax,
        "aria-valuenow": aria.valueNow,
        "aria-valuetext": aria.valueText,
        role: _constants.default.ARIA_ROLES.SLIDER,
        onMouseDown: this.onMouseDown,
        onMouseUp: this.onMouseUp,
        onChange: this.changeValue,
        onClick: this.changeValue,
        onMouseMove: this.onMouseMove,
        onKeyDown: _utils.default.isIE() ? this.onKeyDown : null
      });
    }
  }]);

  return Slider;
}(_react.default.Component);

Slider.propTypes = {
  focusId: _propTypes.default.string,
  value: _propTypes.default.number,
  minValue: _propTypes.default.number,
  maxValue: _propTypes.default.number,
  step: _propTypes.default.number,
  onChange: _propTypes.default.func,
  ariaLabel: _propTypes.default.string,
  usePercentageForAria: _propTypes.default.bool,
  settingName: _propTypes.default.string,
  className: _propTypes.default.string,
  itemRef: _propTypes.default.string
};
var radix = 36;
var len = 10;
Slider.defaultProps = {
  ariaLabel: '',
  className: '',
  focusId: Math.random().toString(radix).substr(2, len),
  itemRef: '',
  minValue: 0,
  maxValue: 15,
  onChange: function onChange() {},
  settingName: '',
  step: 1,
  usePercentageForAria: false,
  value: 0
};
module.exports = Slider;

},{"../constants/constants":69,"../constants/macros":70,"./utils":63,"classnames":86,"prop-types":370,"react":378}],54:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Spinner = function Spinner(props) {
  var loadingImage = props.loadingImage;
  return _react.default.createElement("div", {
    className: "oo-spinner-screen"
  }, _react.default.createElement("div", {
    className: "oo-spinner-wrapper"
  }, _react.default.createElement("img", {
    src: loadingImage,
    className: "oo-spinner",
    alt: "spinner"
  })));
};

Spinner.propTypes = {
  loadingImage: _propTypes.default.string.isRequired
};
module.exports = Spinner;

},{"prop-types":370,"react":378}],55:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _accessibleButton = _interopRequireDefault(require("./accessibleButton"));

var _accessibleMenu = _interopRequireDefault(require("./higher-order/accessibleMenu"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _icon = _interopRequireDefault(require("./icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Tabs implementation
 * @see https://github.com/pedronauck/react-simpletabs
 */
var TabsProto =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TabsProto, _React$Component);

  function TabsProto(props) {
    var _this;

    _classCallCheck(this, TabsProto);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabsProto).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getSelectedPanel", function () {
      var tabActive = _this.state.tabActive;
      var children = _this.props.children;
      var index = tabActive - 1;
      var panel = children[index];
      return _react.default.createElement("div", {
        ref: "tab-panel" // eslint-disable-line
        ,
        className: "tab-panel",
        role: _constants.default.ARIA_ROLES.TAB_PANEL
      }, panel);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getMenuItems", function () {
      var _this$props = _this.props,
          children = _this$props.children,
          skinConfig = _this$props.skinConfig;

      if (!children) {
        throw new Error('Tabs must contain at least one Tabs.Panel');
      }

      var menuItems = children.map(function (panel) {
        return typeof panel === 'function' ? panel() : panel;
      }).filter(function (panel) {
        return panel;
      }).map(function (panel, index) {
        var tabIndex = index + 1;
        var ref = "tab-menu-".concat(tabIndex);
        var title = panel.props.title;
        var activeTabStyle = {};
        var tabActive = _this.state.tabActive;
        var isSelected = tabActive === tabIndex;
        var classes = (0, _classnames.default)('tabs-menu-item', "tabs-menu-item-".concat(index), {
          'is-active': isSelected
        }); // accent color

        if (isSelected && skinConfig.general.accentColor) {
          var activeMenuColor = 'solid ';
          activeMenuColor += skinConfig.general.accentColor;
          activeTabStyle = {
            borderBottom: activeMenuColor
          };
        }

        return _react.default.createElement("li", {
          ref: ref,
          key: index // eslint-disable-line
          ,
          className: classes,
          role: _constants.default.ARIA_ROLES.PRESENTATION
        }, _react.default.createElement(_accessibleButton.default // eslint-disable-line
        , {
          style: activeTabStyle,
          className: "tabs-menu-item-btn",
          ariaLabel: title,
          ariaSelected: isSelected,
          role: _constants.default.ARIA_ROLES.TAB,
          onClick: function onClick(event) {
            return _this.setActive(tabIndex, event);
          },
          onMouseOver: _this.highlight,
          onMouseOut: _this.removeHighlight,
          onFocus: _this.onMenuItemFocus
        }, title));
      });
      return _react.default.createElement("div", {
        className: "tabs-navigation",
        ref: function ref(element) {
          _this.tabsNavigationElement = element;
        },
        tabIndex: "-1"
      }, _react.default.createElement("ul", {
        className: "tabs-menu",
        role: _constants.default.ARIA_ROLES.TAB_LIST,
        "aria-label": _constants.default.ARIA_LABELS.CAPTION_OPTIONS
      }, menuItems));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "highlight", function (event) {
      var skinConfig = _this.props.skinConfig;

      if (skinConfig.general.accentColor) {
        event.target.style.color = skinConfig.general.accentColor; // eslint-disable-line
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "removeHighlight", function (event) {
      var skinConfig = _this.props.skinConfig;

      if (skinConfig.general.accentColor) {
        event.target.style.color = ''; // eslint-disable-line
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuItemFocus", function (event) {
      if (event.currentTarget) {
        _this.scrollIntoViewIfNeeded(event.currentTarget);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setActive", function (index, event) {
      event.preventDefault();
      var _this$props2 = _this.props,
          onAfterChange = _this$props2.onAfterChange,
          onBeforeChange = _this$props2.onBeforeChange;
      var selectedPanel = _this.refs['tab-panel']; // eslint-disable-line

      var selectedTabMenu = _this.refs["tab-menu-".concat(index)]; // eslint-disable-line


      if (onBeforeChange) {
        var cancel = onBeforeChange(index, selectedPanel, selectedTabMenu);

        if (cancel === false) {
          return;
        }
      }

      _this.setState({
        tabActive: index
      }, function () {
        if (onAfterChange) {
          onAfterChange(index, selectedPanel, selectedTabMenu);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLeftChevronClick", function (event) {
      event.preventDefault();

      if (_this.tabsNavigationElement) {
        _this.tabsNavigationElement.scrollLeft -= 30;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleRightChevronClick", function (event) {
      event.preventDefault();

      if (_this.tabsNavigationElement) {
        _this.tabsNavigationElement.scrollLeft += 30;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "scrollIntoViewIfNeeded", function (menuItem) {
      if (!_this.tabsNavigationElement || !menuItem || typeof menuItem.clientWidth === 'undefined') {
        return;
      } // Element is at a position that starts before the current navigation's scroll
      // position. This will cause the element to be cut-off, so we set the scroll position
      // to the value of the element's offset.


      if (menuItem.offsetLeft < _this.tabsNavigationElement.scrollLeft) {
        _this.tabsNavigationElement.scrollLeft = menuItem.offsetLeft;
      } else {
        var menuItemRightEdge = menuItem.offsetLeft + menuItem.clientWidth; // getBoundingClientRect().width returns the unrounded clientWidth. However, jsdom won't allow us to set clientWidth,
        // but we can mock getBoundingClientRect.

        var tabsNavigationElementClientWidth = _this.tabsNavigationElement.clientWidth || _this.tabsNavigationElement.getBoundingClientRect().width;

        var maxVisiblePoint = _this.tabsNavigationElement.scrollLeft + tabsNavigationElementClientWidth; // Element overflows from the currently visible navigation area. Adjust the
        // navigation's scroll value so that the whole menu item fits inside the visible area.

        if (menuItemRightEdge > maxVisiblePoint) {
          _this.tabsNavigationElement.scrollLeft += menuItemRightEdge - maxVisiblePoint;
        }
      }
    });

    var _tabActive = _this.props.tabActive;
    _this.state = {
      tabActive: _tabActive
    };
    return _this;
  }

  _createClass(TabsProto, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var tabActive = this.state.tabActive;
      var onMount = this.props.onMount;
      var index = tabActive;
      var selectedPanel = this.refs['tab-panel']; // eslint-disable-line

      var selectedMenu = this.refs["tab-menu-".concat(index)]; // eslint-disable-line

      if (onMount) {
        onMount(index, selectedPanel, selectedMenu);
      }
    }
    /**
     * Change the state if active tab changed
     * @param {Object} newProps - new props object
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      var tabActive = this.props.tabActive;

      if (newProps.tabActive && newProps.tabActive !== tabActive) {
        this.setState({
          tabActive: newProps.tabActive
        });
      }
    }
    /**
     * Provide the panel selected currently
     * @returns {Object} React Component object
     */

  }, {
    key: "render",
    value: function render() {
      var className = this.props.className;
      var classNames = (0, _classnames.default)('tabs', className);
      var showScrollButtons = this.props.showScrollButtons;
      var leftScrollButton = (0, _classnames.default)({
        'oo-left-tab-button': true,
        'oo-left-tab-button-active': showScrollButtons
      });
      var rightScrollButton = (0, _classnames.default)({
        'oo-right-tab-button': true,
        'oo-right-tab-button-active': showScrollButtons
      });
      return _react.default.createElement("div", {
        className: classNames
      }, this.getMenuItems(), this.getSelectedPanel(), _react.default.createElement("a", {
        // eslint-disable-line
        className: leftScrollButton,
        ref: "leftChevron" // eslint-disable-line
        ,
        role: _constants.default.ARIA_ROLES.PRESENTATION,
        onClick: this.handleLeftChevronClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "left"
      }))), _react.default.createElement("a", {
        // eslint-disable-line
        className: rightScrollButton,
        ref: "rightChevron" // eslint-disable-line
        ,
        role: _constants.default.ARIA_ROLES.PRESENTATION,
        onClick: this.handleRightChevronClick
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "right"
      }))));
    }
  }]);

  return TabsProto;
}(_react.default.Component);

TabsProto.propTypes = {
  className: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object]),
  tabActive: _propTypes.default.number,
  onMount: _propTypes.default.func,
  onBeforeChange: _propTypes.default.func,
  onAfterChange: _propTypes.default.func,
  children: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.element]).isRequired
};
TabsProto.defaultProps = {
  className: '',
  onMount: function onMount() {},
  onBeforeChange: function onBeforeChange() {},
  onAfterChange: function onAfterChange() {},
  tabActive: 1
};
var Tabs = (0, _accessibleMenu.default)(TabsProto, {
  selector: '.tabs-menu',
  useRovingTabindex: true
});
module.exports = Tabs;

Tabs.Panel = function (props) {
  var children = props.children;
  return _react.default.createElement("span", null, children);
};

Tabs.Panel.propTypes = {
  title: _propTypes.default.string.isRequired,
  // eslint-disable-line
  children: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.element]).isRequired
};

},{"../constants/constants":69,"./accessibleButton":8,"./higher-order/accessibleMenu":38,"./icon":42,"classnames":86,"prop-types":370,"react":378}],56:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseFontSize = 1.0;
/**
 * Display component for video text tracks
 */

var TextTrackPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TextTrackPanel, _React$Component);

  function TextTrackPanel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TextTrackPanel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextTrackPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "colorMap", {
      White: '255,255,255',
      Blue: '0,0,255',
      Magenta: '255,0,255',
      Green: '0,255,0',
      Yellow: '255,255,0',
      Red: '255,0,0',
      Cyan: '0,255,255',
      Black: '0,0,0',
      Transparent: '0,0,0'
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fontTypeMap", {
      'Monospaced Serif': '"Courier New", Courier, "Nimbus Mono L", "Cutive Mono", monospace',
      'Proportional Serif': '"Times New Roman", Times, Georgia, Cambria, "PT Serif Caption", serif',
      'Monospaced Sans-Serif': '"Deja Vu Sans Mono", "Lucida Console", Monaco, Consolas, "PT Mono", monospace',
      'Proportional Sans-Serif': 'Roboto, "Arial Unicode Ms", Arial, Helvetica, Verdana, "PT Sans Caption", sans-serif',
      Casual: '"Comic Sans MS", Impact, Handlee, fantasy',
      Cursive: '"Monotype Corsiva", "URW Chancery L", "Apple Chancery", "Dancing Script", cursive',
      'Small Capitals': '"Arial Unicode Ms", Arial, Helvetica, Verdana, "Marcellus SC", sans-serif'
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fontVariantMap", {
      'Monospaced Serif': 'normal',
      'Proportional Serif': 'normal',
      'Monospaced Sans-Serif': 'normal',
      'Proportional Sans-Serif': 'normal',
      Casual: 'normal',
      Cursive: 'normal',
      'Small Capitals': 'small-caps'
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fontSizeMap", {
      Small: {
        xs: "".concat(baseFontSize * 0.8, "em"),
        // eslint-disable-line no-magic-numbers
        sm: "".concat(baseFontSize * 1.0, "em"),
        // eslint-disable-line no-magic-numbers
        md: "".concat(baseFontSize * 1.2, "em"),
        // eslint-disable-line no-magic-numbers
        lg: "".concat(baseFontSize * 1.4, "em") // eslint-disable-line no-magic-numbers

      },
      Medium: {
        xs: "".concat(baseFontSize * 1.2, "em"),
        // eslint-disable-line no-magic-numbers
        sm: "".concat(baseFontSize * 1.4, "em"),
        // eslint-disable-line no-magic-numbers
        md: "".concat(baseFontSize * 1.6, "em"),
        // eslint-disable-line no-magic-numbers
        lg: "".concat(baseFontSize * 1.8, "em") // eslint-disable-line no-magic-numbers

      },
      Large: {
        xs: "".concat(baseFontSize * 1.6, "em"),
        // eslint-disable-line no-magic-numbers
        sm: "".concat(baseFontSize * 1.8, "em"),
        // eslint-disable-line no-magic-numbers
        md: "".concat(baseFontSize * 2.0, "em"),
        // eslint-disable-line no-magic-numbers
        lg: "".concat(baseFontSize * 2.2, "em") // eslint-disable-line no-magic-numbers

      },
      'Extra Large': {
        xs: "".concat(baseFontSize * 2.0, "em"),
        // eslint-disable-line no-magic-numbers
        sm: "".concat(baseFontSize * 2.2, "em"),
        // eslint-disable-line no-magic-numbers
        md: "".concat(baseFontSize * 2.4, "em"),
        // eslint-disable-line no-magic-numbers
        lg: "".concat(baseFontSize * 2.6, "em") // eslint-disable-line no-magic-numbers

      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "textEnhancementMap", {
      Uniform: 'none',
      Depressed: '1px 1px white',
      Raised: '-1px -1px white, -3px 0px 5px black',
      Shadow: '2px 2px 2px #1a1a1a'
      /**
       * Build CSS of the window
       * @param {string} color - a color of the window
       * @param {number} opacity - an opacity of the window
       * @returns {Object} CSS rules
       */

    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "buildWindowBackgroundStyle", function (color, opacity) {
      var correctedOpacity = color === 'Transparent' ? 0 : opacity;
      return {
        backgroundColor: "rgba(".concat(_this.colorMap[color], ",").concat(correctedOpacity, ")")
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "buildTextStyle", function (color, opacity, fontType, fontSize, textEnhancement, direction) {
      var responsiveView = _this.props.responsiveView;
      var styles = {
        color: "rgba(".concat(_this.colorMap[color], ",").concat(opacity, ")"),
        fontFamily: _this.fontTypeMap[fontType],
        fontVariant: _this.fontVariantMap[fontType],
        fontSize: _this.fontSizeMap[fontSize][responsiveView],
        textShadow: _this.textEnhancementMap[textEnhancement]
      };

      if (direction) {
        styles.direction = direction;
      }

      return styles;
    });

    return _this;
  }

  _createClass(TextTrackPanel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          closedCaptionOptions = _this$props.closedCaptionOptions,
          cueText = _this$props.cueText,
          direction = _this$props.direction,
          isInBackground = _this$props.isInBackground;

      if (!cueText) {
        return null;
      }

      var className = (0, _classnames.default)('oo-text-track-container', {
        'oo-in-background': isInBackground
      });
      return _react.default.createElement("div", {
        className: className
      }, _react.default.createElement("div", {
        className: "oo-text-track-window",
        style: this.buildWindowBackgroundStyle(closedCaptionOptions.windowColor, closedCaptionOptions.windowOpacity)
      }, _react.default.createElement("div", {
        className: "oo-text-track-background",
        style: this.buildWindowBackgroundStyle(closedCaptionOptions.backgroundColor, closedCaptionOptions.backgroundOpacity)
      }, _react.default.createElement("div", {
        className: "oo-text-track",
        dir: "auto",
        style: this.buildTextStyle(closedCaptionOptions.textColor, closedCaptionOptions.textOpacity, closedCaptionOptions.fontType, closedCaptionOptions.fontSize, closedCaptionOptions.textEnhancement, direction)
      }, _react.default.createElement("span", {
        dangerouslySetInnerHTML: _utils.default.createMarkup(cueText)
      })))));
    }
  }]);

  return TextTrackPanel;
}(_react.default.Component);

TextTrackPanel.propTypes = {
  cueText: _propTypes.default.string,
  isInBackground: _propTypes.default.bool,
  closedCaptionOptions: _propTypes.default.shape({
    textColor: _propTypes.default.string,
    windowColor: _propTypes.default.string,
    backgroundColor: _propTypes.default.string,
    textOpacity: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    backgroundOpacity: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    windowOpacity: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    fontType: _propTypes.default.string,
    fontSize: _propTypes.default.string,
    textEnhancement: _propTypes.default.string
  }),
  direction: _propTypes.default.string,
  responsiveView: _propTypes.default.string
};
TextTrackPanel.defaultProps = {
  cueText: null,
  isInBackground: false,
  closedCaptionOptions: {
    textColor: 'White',
    windowColor: 'Transparent',
    backgroundColor: 'Black',
    textOpacity: 1,
    backgroundOpacity: 0.6,
    windowOpacity: 0,
    fontType: 'Proportional Sans-Serif',
    fontSize: 'Medium',
    textEnhancement: 'Uniform'
  },
  direction: '',
  responsiveView: 'md'
};
module.exports = TextTrackPanel;

},{"./utils":63,"classnames":86,"prop-types":370,"react":378}],57:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Thumbnail component
 */
var Thumbnail =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Thumbnail, _React$Component);

  function Thumbnail() {
    _classCallCheck(this, Thumbnail);

    return _possibleConstructorReturn(this, _getPrototypeOf(Thumbnail).apply(this, arguments));
  }

  _createClass(Thumbnail, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var onRef = this.props.onRef;
      onRef(this);
    }
    /**
     * Update the component only if specific props got updated
     * @param {Object} nextProps - React next props object
     * @returns {boolean} the decision
     */

  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      var _this$props = this.props,
          fullscreen = _this$props.fullscreen,
          hoverPosition = _this$props.hoverPosition,
          imageWidth = _this$props.imageWidth,
          videoVr = _this$props.videoVr,
          vrViewingDirection = _this$props.vrViewingDirection;
      var updateHoverPositon = nextProps.hoverPosition !== hoverPosition;
      var updateFullscreen = nextProps.fullscreen !== fullscreen && videoVr;
      var updateVrViewDirection = nextProps.vrViewingDirection !== vrViewingDirection;
      var updateImageWidth = nextProps.imageWidth !== imageWidth;
      return updateHoverPositon || updateFullscreen || updateVrViewDirection || updateImageWidth;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onRef = this.props.onRef;
      onRef(undefined);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          thumbnailStyle = _this$props2.thumbnailStyle,
          time = _this$props2.time,
          videoVr = _this$props2.videoVr;
      var thumbnailClassName = videoVr ? 'oo-thumbnail oo-thumbnail-vr' : 'oo-thumbnail';
      return _react.default.createElement("div", {
        className: "oo-scrubber-thumbnail-container"
      }, _react.default.createElement("div", {
        className: thumbnailClassName,
        ref: "thumbnail" // eslint-disable-line
        ,
        style: thumbnailStyle
      }, _react.default.createElement("div", {
        className: "oo-thumbnail-time"
      }, time)));
    }
  }]);

  return Thumbnail;
}(_react.default.Component);

Thumbnail.defaultProps = {
  thumbnails: {},
  thumbnailStyle: {},
  hoverPosition: 0,
  duration: 0,
  hoverTime: 0,
  vrViewingDirection: {
    yaw: 0,
    roll: 0,
    pitch: 0
  },
  videoVr: false,
  fullscreen: false,
  onRef: function onRef() {},
  positionY: 0,
  positionX: 0,
  imageWidth: 0,
  time: ''
};
Thumbnail.propTypes = {
  duration: _propTypes.default.number,
  // eslint-disable-line
  hoverPosition: _propTypes.default.number,
  hoverTime: _propTypes.default.number,
  // eslint-disable-line
  onRef: _propTypes.default.func,
  thumbnails: _propTypes.default.shape({}),
  thumbnailStyle: _propTypes.default.shape({}),
  vrViewingDirection: _propTypes.default.shape({
    yaw: _propTypes.default.number,
    roll: _propTypes.default.number,
    pitch: _propTypes.default.number
  }),
  time: _propTypes.default.string,
  positionY: _propTypes.default.number,
  // eslint-disable-line
  positionX: _propTypes.default.number,
  // eslint-disable-line
  imageWidth: _propTypes.default.number,
  videoVr: _propTypes.default.bool,
  fullscreen: _propTypes.default.bool
};
module.exports = Thumbnail;

},{"prop-types":370,"react":378}],58:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * ThumbnailCarousel component
 */
var ThumbnailCarousel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ThumbnailCarousel, _React$Component);

  function ThumbnailCarousel(props) {
    var _this;

    _classCallCheck(this, ThumbnailCarousel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThumbnailCarousel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "findThumbnailsAfter", function (data) {
      var start = (data.scrubberBarWidth + data.centerWidth) / 2;
      var thumbnailsAfter = [];

      for (var position = data.pos + 1, index = 0; position < data.timeSlices.length; position += 1, index += 1) {
        var left = start + data.padding + index * (data.imgWidth + data.padding);

        if (left + data.imgWidth <= data.scrubberBarWidth) {
          var width = data.width;
          var thumbs = data.thumbnails.data.thumbnails[data.timeSlices[position]];

          var thumbStyle = _this.getThumbnailsCarouselStyles(thumbs, width);

          thumbStyle.left = left;
          thumbStyle.top = data.top;
          thumbnailsAfter.push(_react.default.createElement("div", {
            className: "oo-thumbnail-carousel-image",
            key: position,
            ref: "thumbnailCarousel" // eslint-disable-line
            ,
            style: thumbStyle
          }));
        }
      }

      return thumbnailsAfter;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "findThumbnailsBefore", function (data) {
      var start = (data.scrubberBarWidth - data.centerWidth) / 2;
      var thumbnailsBefore = [];

      for (var position = data.pos - 1, index = 0; position >= 0; position -= 1, index += 1) {
        var left = start - (index + 1) * (data.imgWidth + data.padding);

        if (left >= 0) {
          var width = data.width;
          var thumbs = data.thumbnails.data.thumbnails[data.timeSlices[position]];

          var thumbStyle = _this.getThumbnailsCarouselStyles(thumbs, width);

          thumbStyle.left = left;
          thumbStyle.top = data.top;
          thumbnailsBefore.push(_react.default.createElement("div", {
            className: "oo-thumbnail-carousel-image",
            key: position,
            ref: "thumbnailCarousel" // eslint-disable-line
            ,
            style: thumbStyle
          }));
        }
      }

      return thumbnailsBefore;
    });

    _this.carouselPositionX = 0;
    _this.carouselPositionY = 0;
    _this.state = {
      thumbnailWidth: 0,
      thumbnailHeight: 0,
      centerThumbnailWidth: 0,
      centerThumbnailHeight: 0,
      thumbnailPadding: 6
    };
    return _this;
  }

  _createClass(ThumbnailCarousel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          onRef = _this$props.onRef,
          thumbnailWidth = _this$props.thumbnailWidth,
          thumbnailHeight = _this$props.thumbnailHeight,
          thumbnailCarouselWidth = _this$props.thumbnailCarouselWidth,
          thumbnailCarouselHeight = _this$props.thumbnailCarouselHeight;
      onRef(this);

      var thumbnail = _reactDom.default.findDOMNode(this.refs.thumbnailCarousel); // eslint-disable-line


      var carousel = _reactDom.default.findDOMNode(this.refs.thumbnail); // eslint-disable-line


      var thumbnailStylePadding = thumbnail ? window.getComputedStyle(thumbnail, null).getPropertyValue('padding') : 0;
      thumbnailStylePadding = parseFloat(thumbnailStylePadding); // convert css px to number

      var thumbnailPadding = this.state.thumbnailPadding;
      var thumbnailPaddingSanitized = !Number.isNaN(thumbnailStylePadding) ? thumbnailStylePadding : thumbnailPadding;

      if (!thumbnail || !carousel) {
        return;
      }

      if (thumbnail.clientWidth && carousel.clientWidth) {
        this.setState({
          thumbnailWidth: thumbnail.clientWidth,
          thumbnailHeight: thumbnail.clientHeight,
          centerThumbnailWidth: carousel.clientWidth,
          centerThumbnailHeight: carousel.clientHeight,
          thumbnailPadding: thumbnailPaddingSanitized
        });
        return;
      }

      var thumbnailStyleWidth = Number.parseFloat(window.getComputedStyle(thumbnail, null).getPropertyValue('width')); // convert css px to number

      var thumbnailWidthSanitized = !Number.isNaN(thumbnailStyleWidth) ? thumbnailStyleWidth : Number.parseInt(thumbnailWidth, 0);
      var thumbnailStyleHeight = Number.parseFloat(window.getComputedStyle(thumbnail, null).getPropertyValue('height')); // convert css px to number

      var thumbnailHeightSanitized = !Number.isNaN(thumbnailStyleHeight) ? thumbnailStyleHeight : parseInt(thumbnailHeight, 0);
      var carouselStyleWidth = Number.parseFloat(window.getComputedStyle(carousel, null).getPropertyValue('width')); // convert css px to number

      var carouselWidth = !Number.isNaN(carouselStyleWidth) ? carouselStyleWidth : Number.parseInt(thumbnailCarouselWidth, 0);
      var carouselStyleHeight = Number.parseFloat(window.getComputedStyle(carousel, null).getPropertyValue('height')); // convert css px to number

      var carouselHeight = !Number.isNaN(carouselStyleHeight) ? carouselStyleHeight : Number.parseInt(thumbnailCarouselHeight, 0);
      this.setState({
        thumbnailWidth: thumbnailWidthSanitized,
        thumbnailHeight: thumbnailHeightSanitized,
        centerThumbnailWidth: carouselWidth,
        centerThumbnailHeight: carouselHeight,
        thumbnailPadding: thumbnailPaddingSanitized
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var onRef = this.props.onRef;
      onRef(undefined);
    }
    /**
     * @description get styles for carousel thumbnails
     * @param {object} thumbs - carousel thumbnails
     * @param {number} width - carousel width
     * @returns {object} object with values for bg url and bg size, position and repeat for vr video
     */

  }, {
    key: "getThumbnailsCarouselStyles",
    value: function getThumbnailsCarouselStyles(thumbs, width) {
      var thumbStyle = {};
      var thumb = thumbs[width];
      var _this$props2 = this.props,
          setBgPositionVr = _this$props2.setBgPositionVr,
          thumbnailCarouselHeight = _this$props2.thumbnailCarouselHeight,
          thumbnailCarouselWidth = _this$props2.thumbnailCarouselWidth,
          videoVr = _this$props2.videoVr,
          vrViewingDirection = _this$props2.vrViewingDirection;

      if (videoVr) {
        var widthVr = _constants.default.THUMBNAIL.THUMBNAIL_CAROUSEL_VR_RATIO * width;

        if (thumbs[widthVr] !== undefined && thumbs[widthVr].width !== undefined && thumbs[widthVr].width < _constants.default.THUMBNAIL.MAX_VR_THUMBNAIL_CAROUSEL_BG_WIDTH) {
          thumb = thumbs[widthVr];
        }
      }

      var thumbUrl = thumb.url;

      if (_utils.default.isValidString(thumbUrl)) {
        thumbStyle.backgroundImage = "url('".concat(thumbUrl, "')");
      }

      if (videoVr) {
        var bgWidth = thumb.width;
        var bgHeight = thumb.height;
        var carouselParams = {
          yaw: vrViewingDirection.yaw,
          pitch: vrViewingDirection.pitch,
          imageWidth: bgWidth,
          imageHeight: bgHeight,
          thumbnailWidth: thumbnailCarouselWidth,
          thumbnailHeight: thumbnailCarouselHeight
        };
        var carouselBgPositions = setBgPositionVr(carouselParams);

        if (carouselBgPositions) {
          this.carouselPositionX = carouselBgPositions.positionX;
          this.carouselPositionY = carouselBgPositions.positionY;
        }

        thumbStyle.backgroundRepeat = 'repeat no-repeat';
        thumbStyle.backgroundSize = "".concat(bgWidth, "px ").concat(bgHeight, "px");
        thumbStyle.backgroundPosition = "".concat(this.carouselPositionX, "px ").concat(this.carouselPositionY, "px");
      }

      return thumbStyle;
    }
    /**
     * Find thumbnails following after specified
     * @param {Object} data - the specific data object to iterate through
     * @returns {Array} the array of DOM elements with thumbs
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          centralThumbnail = _this$props3.centralThumbnail,
          scrubberBarWidth = _this$props3.scrubberBarWidth,
          thumbnails = _this$props3.thumbnails,
          thumbnailStyle = _this$props3.thumbnailStyle,
          videoVr = _this$props3.videoVr,
          time = _this$props3.time;
      var _this$state = this.state,
          centerThumbnailWidth = _this$state.centerThumbnailWidth,
          thumbnailHeight = _this$state.thumbnailHeight,
          thumbnailPadding = _this$state.thumbnailPadding,
          thumbnailWidth = _this$state.thumbnailWidth,
          centerThumbnailHeight = _this$state.centerThumbnailHeight;
      var data = {
        thumbnails: thumbnails,
        timeSlices: thumbnails.data.available_time_slices,
        width: thumbnails.data.available_widths[0],
        imgWidth: thumbnailWidth,
        centerWidth: centerThumbnailWidth,
        scrubberBarWidth: scrubberBarWidth,
        top: centerThumbnailHeight - thumbnailHeight,
        pos: centralThumbnail.pos,
        padding: thumbnailPadding
      };
      var thumbnailsBefore = this.findThumbnailsBefore(data);
      var thumbnailsAfter = this.findThumbnailsAfter(data);
      var thumbnailClassName = 'oo-thumbnail-carousel-center-image';

      if (videoVr) {
        thumbnailClassName += ' oo-thumbnail-vr';
      }

      var thumbnailStyleSanitized = {};

      if (thumbnailStyle !== null && _typeof(thumbnailStyle) === 'object') {
        Object.assign(thumbnailStyleSanitized, thumbnailStyle);
      }

      thumbnailStyleSanitized.left = (data.scrubberBarWidth - data.centerWidth) / 2;
      return _react.default.createElement("div", {
        className: "oo-scrubber-carousel-container"
      }, thumbnailsBefore, _react.default.createElement("div", {
        className: thumbnailClassName,
        ref: "thumbnail" // eslint-disable-line
        ,
        style: thumbnailStyleSanitized
      }, _react.default.createElement("div", {
        className: "oo-thumbnail-carousel-time"
      }, time)), thumbnailsAfter);
    }
  }]);

  return ThumbnailCarousel;
}(_react.default.Component);

ThumbnailCarousel.propTypes = {
  onRef: _propTypes.default.func,
  time: _propTypes.default.string,
  thumbnails: _propTypes.default.shape({}),
  centralThumbnail: _propTypes.default.shape({}),
  thumbnailStyle: _propTypes.default.shape({}),
  scrubberBarWidth: _propTypes.default.number,
  vrViewingDirection: _propTypes.default.shape({
    yaw: _propTypes.default.number,
    roll: _propTypes.default.number,
    pitch: _propTypes.default.number
  }),
  videoVr: _propTypes.default.bool,
  setBgPositionVr: _propTypes.default.func,
  thumbnailCarouselWidth: _propTypes.default.number,
  thumbnailCarouselHeight: _propTypes.default.number,
  thumbnailWidth: _propTypes.default.number,
  thumbnailHeight: _propTypes.default.number
};
ThumbnailCarousel.defaultProps = {
  onRef: function onRef() {},
  time: '',
  thumbnails: {},
  centralThumbnail: {},
  thumbnailStyle: {},
  setBgPositionVr: function setBgPositionVr() {},
  scrubberBarWidth: 0,
  thumbnailCarouselWidth: 0,
  thumbnailCarouselHeight: 0,
  vrViewingDirection: {
    yaw: 0,
    roll: 0,
    pitch: 0
  },
  videoVr: false,
  thumbnailWidth: 0,
  thumbnailHeight: 0
};
module.exports = ThumbnailCarousel;

},{"../constants/constants":69,"./utils":63,"prop-types":370,"react":378,"react-dom":374}],59:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _thumbnail = _interopRequireDefault(require("./thumbnail"));

var _thumbnailCarousel = _interopRequireDefault(require("./thumbnailCarousel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Thumbnail component
 */
var ThumbnailContainer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ThumbnailContainer, _React$Component);

  function ThumbnailContainer(props) {
    var _this;

    _classCallCheck(this, ThumbnailContainer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThumbnailContainer).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onRef", function (ref) {
      _this.child = ref;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setThumbnailSizesVr", function () {
      if (_this.child == null || _typeof(_this.child) !== 'object') {
        return;
      }

      _this.setThumbnailSize('thumbnail', 'thumbnailWidth', 'thumbnailHeight');

      var isCarousel = _this.props.isCarousel;

      if (isCarousel) {
        _this.setThumbnailSize('thumbnailCarousel', 'thumbnailCarouselWidth', 'thumbnailCarouselHeight');
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setThumbnailSize", function (refName, widthName, heightName) {
      if (!_this.child.refs || !_this.child.refs[refName]) {
        return;
      }

      var width = _utils.default.getClientWidth(_this.child.refs[refName]);

      var height = _utils.default.getClientHeight(_this.child.refs[refName]);

      if (width) {
        _this[widthName] = width;
      }

      if (height) {
        _this[heightName] = height;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setImageSizes", function () {
      var _this$props = _this.props,
          duration = _this$props.duration,
          hoverTime = _this$props.hoverTime,
          thumbnails = _this$props.thumbnails,
          videoVr = _this$props.videoVr;

      var thumbnail = _utils.default.findThumbnail(thumbnails, hoverTime, duration, videoVr);

      if (thumbnail == null || _typeof(thumbnail) !== 'object') {
        return;
      }

      var imageWidth = thumbnail.imageWidth,
          imageHeight = thumbnail.imageHeight;

      if (!imageWidth || !imageHeight) {
        return;
      }

      if (imageWidth > _constants.default.THUMBNAIL.MAX_VR_THUMBNAIL_BG_WIDTH) {
        imageWidth = _constants.default.THUMBNAIL.MAX_VR_THUMBNAIL_BG_WIDTH;
        imageHeight = imageHeight * _constants.default.THUMBNAIL.MAX_VR_THUMBNAIL_BG_WIDTH / imageWidth;
      }

      _this.imageWidth = imageWidth;
      _this.imageHeight = imageHeight;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setBgPositionVr", function (params) {
      if (!params) {
        return null;
      }

      var yaw = _utils.default.ensureNumber(params.yaw, 0);

      var pitch = _utils.default.ensureNumber(params.pitch, 0);

      var imageWidth = _utils.default.ensureNumber(params.imageWidth, 0);

      var imageHeight = _utils.default.ensureNumber(params.imageHeight, 0);

      var thumbnailWidth = _utils.default.ensureNumber(params.thumbnailWidth, 0); // this.thumbnailWidth;


      var thumbnailHeight = _utils.default.ensureNumber(params.thumbnailHeight, 0); // this.thumbnailHeight;


      yaw = _this.getCurrentYawVr(yaw);
      pitch = pitch >= 360 ? 0 : pitch;
      var positionY = -((imageHeight - thumbnailHeight) / 2 - pitch);
      var bottomCoordinate = -(imageHeight - thumbnailHeight);

      if (positionY > 0) {
        positionY = 0;
      } else if (positionY < bottomCoordinate) {
        positionY = bottomCoordinate;
      }

      var positionX = -(imageWidth - thumbnailWidth / 2 - imageWidth * yaw / 360);
      return {
        positionX: positionX,
        positionY: positionY
      };
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getCurrentYawVr", function (yaw) {
      var direction = yaw <= -360 ? -1 : 1;
      var ratio = ~~(direction * yaw / 360); // eslint-disable-line

      var coef = yaw - direction * ratio * 360;
      return coef;
    });

    _this.child = null;
    _this.positionY = 0;
    _this.positionX = 0;
    _this.imageWidth = 0;
    _this.imageHeight = 0;
    _this.thumbnailWidth = 0;
    _this.thumbnailHeight = 0;
    _this.thumbnailCarouselWidth = 0;
    _this.thumbnailCarouselHeight = 0;
    return _this;
  }

  _createClass(ThumbnailContainer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          videoVr = _this$props2.videoVr,
          vrViewingDirection = _this$props2.vrViewingDirection;

      if (!videoVr) {
        return;
      }

      this.setThumbnailSizesVr();
      this.setImageSizes();
      var yaw = vrViewingDirection.yaw,
          pitch = vrViewingDirection.pitch;
      var params = {
        yaw: yaw,
        pitch: pitch,
        imageWidth: this.imageWidth,
        imageHeight: this.imageHeight,
        thumbnailWidth: this.thumbnailWidth,
        thumbnailHeight: this.thumbnailHeight
      };
      var positions = this.setBgPositionVr(params);

      if (positions) {
        this.positionX = positions.positionX;
        this.positionY = positions.positionY;
      }
    }
    /**
     * For VR viewing mode track if vr direction changed
     * @param {Object} nextProps - react next props
     */

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this$props3 = this.props,
          videoVr = _this$props3.videoVr,
          vrViewingDirection = _this$props3.vrViewingDirection;

      if (vrViewingDirection === nextProps.vrViewingDirection || !videoVr) {
        return;
      }

      var _nextProps$vrViewingD = nextProps.vrViewingDirection,
          yaw = _nextProps$vrViewingD.yaw,
          pitch = _nextProps$vrViewingD.pitch;
      var params = {
        yaw: yaw,
        pitch: pitch,
        imageWidth: this.imageWidth,
        imageHeight: this.imageHeight,
        thumbnailWidth: this.thumbnailWidth,
        thumbnailHeight: this.thumbnailHeight
      };
      var positions = this.setBgPositionVr(params);

      if (positions) {
        this.positionX = positions.positionX;
        this.positionY = positions.positionY;
      }
    }
    /**
     * For VR mode update the position
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var videoVr = this.props.videoVr;

      if (!videoVr || this.child == null || _typeof(this.child) !== 'object') {
        return;
      }

      if (this.child.refs && this.child.refs.thumbnail) {
        var newThumbnailWidth = _utils.default.getClientWidth(this.child.refs.thumbnail);

        var newThumbnailHeight = _utils.default.getClientHeight(this.child.refs.thumbnail);

        if (newThumbnailWidth !== this.thumbnailWidth || newThumbnailHeight !== this.thumbnailHeight) {
          this.thumbnailWidth = newThumbnailWidth;
          this.thumbnailHeight = newThumbnailHeight;
          var vrViewingDirection = this.props.vrViewingDirection;
          var yaw = vrViewingDirection.yaw,
              pitch = vrViewingDirection.pitch;
          var params = {
            yaw: yaw,
            pitch: pitch,
            imageWidth: this.imageWidth,
            imageHeight: this.imageHeight,
            thumbnailWidth: this.thumbnailWidth,
            thumbnailHeight: this.thumbnailHeight
          };
          var positions = this.setBgPositionVr(params);

          if (positions) {
            this.positionX = positions.positionX;
            this.positionY = positions.positionY;
          }
        }
      }

      var isCarousel = this.props.isCarousel;

      if (!isCarousel || !this.child.refs || !this.child.refs.thumbnailCarousel) {
        return;
      }

      var newThumbnailCarouselWidth = _utils.default.getClientWidth(this.child.refs.thumbnailCarousel);

      var newThumbnailCarouselHeight = _utils.default.getClientHeight(this.child.refs.thumbnailCarousel);

      if (newThumbnailCarouselWidth !== this.thumbnailCarouselWidth) {
        this.thumbnailCarouselWidth = newThumbnailCarouselWidth;
      }

      if (newThumbnailCarouselHeight !== this.thumbnailCarouselHeight) {
        this.thumbnailCarouselHeight = newThumbnailCarouselHeight;
      }
    }
    /**
     * assign DOM object to a this.child once appeared
     * @param {Object} ref - the DOM object reference
     */

  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          duration = _this$props4.duration,
          fullscreen = _this$props4.fullscreen,
          hoverPosition = _this$props4.hoverPosition,
          hoverTime = _this$props4.hoverTime,
          isCarousel = _this$props4.isCarousel,
          scrubberBarWidth = _this$props4.scrubberBarWidth,
          thumbnails = _this$props4.thumbnails,
          videoVr = _this$props4.videoVr,
          vrViewingDirection = _this$props4.vrViewingDirection;
      var time = Number.isFinite(Number.parseInt(hoverTime, 0)) ? _utils.default.formatSeconds(Number.parseInt(hoverTime, 0)) : null;
      var thumbnail = null;

      var centralThumbnail = _utils.default.findThumbnail(thumbnails, hoverTime, duration, videoVr);

      var thumbnailStyle = {};
      thumbnailStyle.left = hoverPosition;

      if (_utils.default.isValidString(centralThumbnail.url)) {
        thumbnailStyle.backgroundImage = "url('".concat(centralThumbnail.url, "')");
      }

      if (videoVr) {
        thumbnailStyle.backgroundSize = "".concat(this.imageWidth, "px ").concat(this.imageHeight, "px");
        thumbnailStyle.backgroundPosition = "".concat(this.positionX, "px ").concat(this.positionY, "px");
      }

      if (isCarousel) {
        thumbnail = _react.default.createElement(_thumbnailCarousel.default, {
          onRef: this.onRef,
          time: time,
          thumbnails: thumbnails,
          duration: duration,
          hoverTime: hoverTime,
          scrubberBarWidth: scrubberBarWidth,
          hoverPosition: hoverPosition,
          vrViewingDirection: vrViewingDirection,
          videoVr: videoVr,
          fullscreen: fullscreen,
          imageWidth: this.imageWidth,
          setBgPositionVr: this.setBgPositionVr,
          thumbnailCarouselWidth: this.thumbnailCarouselWidth,
          thumbnailCarouselHeight: this.thumbnailCarouselHeight,
          centralThumbnail: centralThumbnail,
          thumbnailStyle: thumbnailStyle
        });
      } else {
        thumbnail = _react.default.createElement(_thumbnail.default, {
          onRef: this.onRef,
          time: time,
          thumbnails: thumbnails,
          hoverPosition: hoverPosition,
          duration: duration,
          hoverTime: hoverTime,
          vrViewingDirection: vrViewingDirection,
          videoVr: videoVr,
          fullscreen: fullscreen,
          positionY: this.positionY,
          positionX: this.positionX,
          imageWidth: this.imageWidth,
          thumbnailStyle: thumbnailStyle
        });
      }

      return _react.default.createElement("div", {
        className: "oo-scrubber-thumbnail-wrapper"
      }, thumbnail);
    }
  }]);

  return ThumbnailContainer;
}(_react.default.Component);

ThumbnailContainer.defaultProps = {
  isCarousel: false,
  thumbnails: {},
  hoverPosition: 0,
  duration: 0,
  hoverTime: 0,
  vrViewingDirection: {
    yaw: 0,
    roll: 0,
    pitch: 0
  },
  videoVr: false,
  fullscreen: false,
  scrubberBarWidth: 0
};
ThumbnailContainer.propTypes = {
  vrViewingDirection: _propTypes.default.shape({
    yaw: _propTypes.default.number,
    roll: _propTypes.default.number,
    pitch: _propTypes.default.number
  }),
  thumbnails: _propTypes.default.shape({}),
  hoverPosition: _propTypes.default.number,
  hoverTime: _propTypes.default.number,
  duration: _propTypes.default.number,
  scrubberBarWidth: _propTypes.default.number,
  isCarousel: _propTypes.default.bool,
  videoVr: _propTypes.default.bool,
  fullscreen: _propTypes.default.bool
};
module.exports = ThumbnailContainer;

},{"../constants/constants":69,"./thumbnail":57,"./thumbnailCarousel":58,"./utils":63,"prop-types":370,"react":378}],60:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The tooltip component
 */
var Tooltip =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  // eslint-disable-line
  function Tooltip(props) {
    var _this;

    _classCallCheck(this, Tooltip);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "verticalOffset", 80);

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "pointerAlignment", {
      left: '10%',
      center: '45%',
      right: '85%'
    });

    _this.state = {
      visible: false
    };
    _this.onMouseOver = _this.onMouseOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onMouseLeave = _this.onMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getAlignment = _this.getAlignment.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(Tooltip, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.parentElement = (_reactDom.default.findDOMNode(this) || {}).parentElement; // eslint-disable-line

      if (this.parentElement) {
        this.parentElement.addEventListener('mouseover', this.onMouseOver);
        this.parentElement.addEventListener('mouseleave', this.onMouseLeave);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.parentElement) {
        this.parentElement.removeEventListener('mouseover', this.onMouseOver);
        this.parentElement.removeEventListener('mouseleave', this.onMouseLeave);
      }
    }
    /**
     * Change visiblity on mouse over
     */

  }, {
    key: "onMouseOver",
    value: function onMouseOver() {
      this.setState({
        visible: true
      });
    }
    /**
     * Change visiblity on mouse out
     */

  }, {
    key: "onMouseLeave",
    value: function onMouseLeave() {
      this.setState({
        visible: false
      });
    }
    /**
     * return the alignment
     * @returns {string} the alignment
     */

  }, {
    key: "getAlignment",
    value: function getAlignment() {
      var _this$props = this.props,
          getAlignment = _this$props.getAlignment,
          parentKey = _this$props.parentKey;

      if (typeof getAlignment === 'function') {
        return getAlignment(parentKey) || _constants.default.TOOLTIP_ALIGNMENT.CENTER;
      }

      return _constants.default.TOOLTIP_ALIGNMENT.CENTER;
    }
    /**
     * Build the container style
     * @param {string} bottom - the bottom position
     * @param {boolean} visible - if the container is visible
     * @param {number} responsivenessMultiplier - the multiplier of a responsive design
     * @param {string} alignment - the alignment
     * @returns {Object} the CSS object
     */

  }, {
    key: "getContainerStyle",
    value: function getContainerStyle(bottom, visible, responsivenessMultiplier, alignment) {
      var verticalAlignment = this.verticalOffset * responsivenessMultiplier;
      var alignmentStyle = {
        left: {
          left: 0,
          transform: "translate(0,".concat(verticalAlignment, "%)"),
          WebkitTransform: "translate(0,".concat(verticalAlignment, "%)")
        },
        center: {
          left: '50%',
          transform: "translate(-50%,".concat(verticalAlignment, "%)"),
          WebkitTransform: "translate(-50%,".concat(verticalAlignment, "%)")
        },
        right: {
          right: 0,
          transform: "translate(0,".concat(verticalAlignment, "%)"),
          WebkitTransform: "translate(0,".concat(verticalAlignment, "%)")
        }
      };
      var style = {
        position: 'absolute',
        color: 'white',
        fontFamily: '"Roboto Condensed", sans-serif',
        opacity: visible ? '0.75' : '0',
        fontWeight: 'normal',
        bottom: bottom,
        transition: '1s',
        visibility: visible ? 'visible' : 'hidden'
      };
      return (0, _deepmerge.default)(alignmentStyle[alignment], style);
    }
    /**
     * Build the CSS style of a bounding box
     * @param {number} responsivenessMultiplier - the multiplier of a responsive design
     * @returns {Object} the CSS object
     */

  }, {
    key: "getBoxStyle",
    value: function getBoxStyle(responsivenessMultiplier) {
      // eslint-disable-line
      return {
        borderRadius: '3px',
        fontSize: '15px',
        textShadow: 'none',
        background: 'black',
        paddingTop: 8 * responsivenessMultiplier,
        // eslint-disable-line
        paddingRight: 20 * responsivenessMultiplier,
        // eslint-disable-line
        paddingBottom: 8 * responsivenessMultiplier,
        // eslint-disable-line
        paddingLeft: 20 * responsivenessMultiplier // eslint-disable-line

      };
    }
    /**
     * Get the style of the pointer
     * @param {string} alignment - the alignment of a tooltip
     * @returns {Object} the CSS object
     */

  }, {
    key: "getPointerStyle",
    value: function getPointerStyle(alignment) {
      return {
        position: 'absolute',
        borderLeft: '5px solid transparent',
        borderRight: '5px solid transparent',
        borderTop: '5px solid black',
        left: this.pointerAlignment[alignment]
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          bottom = _this$props2.bottom,
          enabled = _this$props2.enabled,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          responsivenessMultiplier = _this$props2.responsivenessMultiplier,
          text = _this$props2.text;
      var visible = this.state.visible;

      if (!enabled) {
        return null;
      }

      var alignment = this.getAlignment();
      return _react.default.createElement("div", {
        className: "oo-tooltip-container",
        style: {
          position: 'relative'
        }
      }, _react.default.createElement("div", {
        className: "oo-tooltip",
        style: this.getContainerStyle(bottom, visible, responsivenessMultiplier, alignment)
      }, _react.default.createElement("div", {
        style: this.getBoxStyle(responsivenessMultiplier)
      }, _utils.default.getLocalizedString(language, text, localizableStrings)), _react.default.createElement("div", {
        style: this.getPointerStyle(alignment)
      })));
    }
  }]);

  return Tooltip;
}(_react.default.Component);

Tooltip.propTypes = {
  enabled: _propTypes.default.bool,
  parentKey: _propTypes.default.string.isRequired,
  text: _propTypes.default.string,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  getAlignment: _propTypes.default.func,
  responsivenessMultiplier: _propTypes.default.number,
  bottom: _propTypes.default.number
};
Tooltip.defaultProps = {
  enabled: false,
  getAlignment: function getAlignment() {},
  text: '',
  language: 'en',
  localizableStrings: {},
  responsivenessMultiplier: 1,
  bottom: 0
};
module.exports = Tooltip;

},{"../constants/constants":69,"./utils":63,"deepmerge":361,"prop-types":370,"react":378,"react-dom":374}],61:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _icon = _interopRequireDefault(require("./icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The unmute icon component
 */
var UnmuteIcon =
/*#__PURE__*/
function (_React$Component) {
  _inherits(UnmuteIcon, _React$Component);

  function UnmuteIcon(props) {
    var _this;

    _classCallCheck(this, UnmuteIcon);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnmuteIcon).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "unmuteClick", function (event) {
      event.stopPropagation();
      var controller = _this.props.controller;
      controller.handleMuteClick();
    });

    _this.state = {
      collapseTime: 2000
    };
    return _this;
  }

  _createClass(UnmuteIcon, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var controller = this.props.controller;
      var collapseTime = this.state.collapseTime;
      var expanded = !controller.state.volumeState.unmuteIconCollapsed;

      if (expanded) {
        clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
          controller.state.volumeState.unmuteIconCollapsed = true;

          _this2.setState({});
        }, collapseTime);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeout);
    }
    /**
     * The AdScreen currently uses the mouseup event to handle ad clickthroughs,
     * otherwise stopping propagation on the click event should've been enough
     * @param {Object} event - the mouseUp event object
     */

  }, {
    key: "onMouseUp",
    value: function onMouseUp(event) {
      // eslint-disable-line
      event.stopPropagation();
    }
    /**
     * Clicking on this button shouldn't trigger clicks on parent components
     * @param {Object} event - the click event object
     */

  }, {
    key: "render",
    value: function render() {
      var controller = this.props.controller;
      var volumeIcon;
      var volumeAriaLabel;

      if (controller.state.volumeState.muted) {
        volumeIcon = 'volumeOff';
        volumeAriaLabel = _constants.default.ARIA_LABELS.UNMUTE;
      } else {
        volumeIcon = 'volume';
        volumeAriaLabel = _constants.default.ARIA_LABELS.MUTE;
      }

      var expanded = !controller.state.volumeState.unmuteIconCollapsed;
      var myClass = (0, _classnames.default)({
        'oo-unmute': true,
        'oo-expanded': expanded
      });
      return _react.default.createElement("button", {
        className: myClass,
        onClick: this.unmuteClick,
        onMouseUp: this.onMouseUp,
        type: "button",
        tabIndex: "0",
        "aria-label": volumeAriaLabel
      }, _react.default.createElement("div", {
        className: "oo-unmute-icon-wrapper"
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: volumeIcon,
        ref: "volumeIcon" // eslint-disable-line

      }))), expanded ? _react.default.createElement("div", {
        className: "oo-unmute-message"
      }, _constants.default.SKIN_TEXT.SELECT_TO_UNMUTE) : null);
    }
  }]);

  return UnmuteIcon;
}(_react.default.Component);

UnmuteIcon.propTypes = {
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      volumeState: _propTypes.default.shape({
        muted: _propTypes.default.bool,
        unmuteIconCollapsed: _propTypes.default.bool
      })
    })
  }).isRequired
};
module.exports = UnmuteIcon;

},{"../constants/constants":69,"./icon":42,"classnames":86,"prop-types":370,"react":378}],62:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("./utils"));

var _closeButton = _interopRequireDefault(require("./closeButton"));

var _countDownClock = _interopRequireDefault(require("./countDownClock"));

var _icon = _interopRequireDefault(require("./icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The UpNext panel component
 */
var UpNextPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(UpNextPanel, _React$Component);

  function UpNextPanel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, UpNextPanel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UpNextPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "closeUpNextPanel", function () {
      var controller = _this.props.controller;
      controller.upNextDismissButtonClicked();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleStartUpNextClick", function (event) {
      event.preventDefault();
      var _this$props = _this.props,
          controller = _this$props.controller,
          upNextInfo = _this$props.upNextInfo; // Use the same way as sending out the click event on discovery content

      var asset = upNextInfo.upNextData;
      var customData = {
        source: _constants.default.SCREEN.UP_NEXT_SCREEN,
        countdown: 0,
        autoplay: true
      };
      var eventData = {
        clickedVideo: asset,
        custom: customData,
        metadata: _utils.default.getDiscoveryEventData(1, 1, _constants.default.UI_TAG.UP_NEXT, asset, customData)
      };
      controller.sendDiscoveryClickEvent(eventData, false);
    });

    return _this;
  }

  _createClass(UpNextPanel, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          currentPlayhead = _this$props2.currentPlayhead,
          language = _this$props2.language,
          localizableStrings = _this$props2.localizableStrings,
          skinConfig = _this$props2.skinConfig,
          upNextInfo = _this$props2.upNextInfo;

      var upNextString = _utils.default.getLocalizedString(language, _constants.default.SKIN_TEXT.UP_NEXT, localizableStrings);

      var thumbnailStyle = {};

      if (_utils.default.isValidString(upNextInfo.upNextData.preview_image_url)) {
        thumbnailStyle.backgroundImage = "url('".concat(upNextInfo.upNextData.preview_image_url, "')");
      }

      return _react.default.createElement("div", {
        className: "oo-up-next-panel"
      }, _react.default.createElement("a", {
        // eslint-disable-line
        className: "oo-up-next-content",
        onClick: this.handleStartUpNextClick,
        style: thumbnailStyle
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "play"
      }))), _react.default.createElement("div", {
        className: "oo-content-metadata"
      }, _react.default.createElement("div", {
        className: "oo-up-next-title"
      }, _react.default.createElement(_countDownClock.default, _extends({}, this.props, {
        timeToShow: skinConfig.upNext.timeToShow,
        currentPlayhead: currentPlayhead
      })), _react.default.createElement("div", {
        className: "oo-up-next-title-text oo-text-truncate"
      }, upNextString, ":", ' ', _react.default.createElement("span", {
        dangerouslySetInnerHTML: _utils.default.createMarkup(upNextInfo.upNextData.name)
      }))), _react.default.createElement("div", {
        className: "oo-content-description oo-text-truncate",
        dangerouslySetInnerHTML: _utils.default.createMarkup(upNextInfo.upNextData.description)
      })), _react.default.createElement(_closeButton.default, _extends({}, this.props, {
        cssClass: "oo-up-next-close-btn",
        closeAction: this.closeUpNextPanel
      })));
    }
  }]);

  return UpNextPanel;
}(_react.default.Component);

UpNextPanel.propTypes = {
  upNextInfo: _propTypes.default.shape({
    upNextData: _propTypes.default.shape({
      preview_image_url: _propTypes.default.string,
      name: _propTypes.default.string,
      description: _propTypes.default.string
    })
  }),
  skinConfig: _propTypes.default.shape({
    upNext: _propTypes.default.shape({
      timeToShow: _propTypes.default.number
    }),
    icons: _propTypes.default.objectOf(_propTypes.default.object)
  }),
  controller: _propTypes.default.shape({})
};
UpNextPanel.defaultProps = {
  skinConfig: {
    upNext: {
      timeToShow: 10
    },
    icons: {
      play: {
        fontStyleClass: 'oo-icon oo-icon-play'
      },
      dismiss: {
        fontStyleClass: 'oo-icon oo-icon-close'
      }
    }
  },
  upNextInfo: {
    upNextData: {}
  },
  controller: {
    upNextDismissButtonClicked: function upNextDismissButtonClicked() {},
    sendDiscoveryClickEvent: function sendDiscoveryClickEvent() {}
  }
};
module.exports = UpNextPanel;

},{"../constants/constants":69,"./closeButton":13,"./countDownClock":32,"./icon":42,"./utils":63,"prop-types":370,"react":378}],63:[function(require,module,exports){
"use strict";

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isValid = function isValid(item) {
  var valid = item && item.location === 'moreOptions' || item.location === 'controlBar' && item.whenDoesNotFit && item.minWidth !== undefined && item.minWidth >= 0;
  return valid;
};

var isCollapsable = function isCollapsable(item) {
  return item.location === 'controlBar' && item.whenDoesNotFit && item.whenDoesNotFit !== 'keep';
};

var collapseLastItemMatching = function collapseLastItemMatching(results, item, usedWidthDirty) {
  var index = results.fit.lastIndexOf(item);
  var usedWidth = usedWidthDirty;

  if (index > -1) {
    results.fit.splice(index, 1);
    results.overflow.unshift(item);

    if (item.minWidth) {
      usedWidth -= item.minWidth;
    }
  }

  return usedWidth;
};

var collapse = function collapse(barWidth, orderedItems, responsiveUIMultiple) {
  var result = {
    fit: orderedItems.slice(),
    overflow: []
  };
  var usedWidth = orderedItems.reduce(function (memo, value) {
    return memo + responsiveUIMultiple * value.minWidth;
  }, 0);

  for (var index = orderedItems.length - 1; index >= 0; index -= 1) {
    var item = orderedItems[index];

    if (item.location === 'moreOptions') {
      usedWidth = collapseLastItemMatching(result, item, usedWidth);
    }

    if (usedWidth > barWidth && isCollapsable(item)) {
      usedWidth = collapseLastItemMatching(result, item, usedWidth);
    }
  }

  return result;
};

var isMergeableObject = function isMergeableObject(val) {
  var nonNullObject = val && _typeof(val) === 'object';
  return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
};

var emptyTarget = function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
};

var cloneIfNecessary = function cloneIfNecessary(value, optionsArgument) {
  var clone = optionsArgument && optionsArgument.clone === true;
  return clone && isMergeableObject(value) ? (0, _deepmerge.default)(emptyTarget(value), value, optionsArgument) : value;
};

var Utils = {};
/**
 * Searches for focusable elements inside domElement and gives focus to the first one
 * found. Focusable elements are assumed to be those with the data-focus-id attribute which is
 * used for various purposes in this project. If the excludeClass parameter is passed, elements
 * that have a matching class will be excluded from the search.
 * @function autoFocusFirstElement
 * @param {HTMLElement} domElement A DOM element that contains the element we want to focus.
 * @param {String} excludeClass A single className that we want the search query to filter out.
 */

Utils.autoFocusFirstElement = function (domElement, excludeClass) {
  if (!domElement || typeof domElement.querySelector !== 'function') {
    return;
  }

  var query = "[".concat(_constants.default.KEYBD_FOCUS_ID_ATTR, "]");

  if (excludeClass) {
    query += ":not(.".concat(excludeClass, ")");
  }

  var firstFocusableElement = domElement.querySelector(query);

  if (firstFocusableElement && typeof firstFocusableElement.focus === 'function') {
    firstFocusableElement.focus();
  }
};
/**
 * Some browsers give focus to buttons after click, which leaves them highlighted.
 * This can be used to override the browsers' default behavior.
 *
 * @function blurOnMouseUp
 * @param {Event} event MouseUp event object.
 */


Utils.blurOnMouseUp = function (event) {
  if (event && event.currentTarget && typeof event.currentTarget.blur === 'function') {
    event.currentTarget.blur();
  }
};
/**
 * Converts a value to a number or returns null if it can't be converted or is not finite value.
 *
 * @function ensureNumber
 * @param {Object} value The value to convert.
 * @param {Number} defaultValue A default value to return when the input is not a valid number.
 * @returns {Number} The Number equivalent of value if it can be converted and is finite.
 * When value doesn't meet the criteria the function will return either defaultValue (if provided) or null.
 */


Utils.ensureNumber = function (value, defaultValue) {
  var number = Number(value);

  if (!Number.isFinite(number)) {
    return typeof defaultValue === 'undefined' ? null : defaultValue;
  }

  return number;
};
/**
 * Ensures that a number falls within a specified range. When a number is outside of
 * a range the function will return either the minimum or maximum allowed value depending on the case.
 *
 * @function constrainToRange
 * @param {Number} value The numerical value to constrain.
 * @param {Number} min The minimum value of the range.
 * @param {Number} max The maximum value of the range.
 * @returns {Number} The Number equivalent of value if it falls between min and max,
 * min if it falls below, max if it falls above.
 */


Utils.constrainToRange = function (value, min, max) {
  value = Utils.ensureNumber(value, 0); // eslint-disable-line

  min = Utils.ensureNumber(min, 0); // eslint-disable-line

  max = Utils.ensureNumber(max, 0); // eslint-disable-line

  return Math.min(Math.max(min, value), max);
};
/**
 * Same as Number.toFixed(), except that it returns a Number instead of a string.
 * @function toFixedNumber
 * @param {Object} value The numerical value to process.
 * @param {Number} digits The number of digits to appear after the decimal point.
 * @returns {Number} The equivalent of value with the specified precision. Will return 0 if value is not a valid number.
 */


Utils.toFixedNumber = function (value, digits) {
  var result = Utils.ensureNumber(value, 0);
  result = Utils.ensureNumber(result.toFixed(digits));
  return result;
};
/**
 * Returns the currentTime and totalTime values in HH:MM format that can be used for
 * a video time display UI or for ARIA labels.
 * Note that the meaning of these values changes depending on the type of video:
 * VOD
 *  currentTime: Formatted value of current playhead
 *  totalTime: Formatted value of video duration
 * Live - No DVR
 *  currentTime: Empty string
 *  totalTime: Empty string
 * Live - DVR - useNegativeDvrOffset === true
 *  currentTime: Formatted value of the negative offset from the live playhead. Empty string if playhead is at the Live position
 *  totalTime: Empty string
 * Live - DVR - useNegativeDvrOffset === false
 *  currentTime: Formatted value of the current playhead relative to max time shift
 *  totalTime: Formatted value of the total duration of the DVR window
 * NOTE:
 * Either property can be returned as an empty string if the parameters don't match the requirements.
 *
 * @function getTimeDisplayValues
 * @param {Number} currentPlayhead The current value of the playhead in seconds.
 * @param {Number} duration The total duration of the video in seconds. Should be -0 or Infinity for Live videos with no DVR.
 * @param {Boolean} isLiveStream Indicates whether the video is a livestream or not.
 * @param {Number} useNegativeDvrOffset Whether to display DVR progress as a negative offset value or not.
 * @returns {Object} An object with currentTime and totalTime properties in HH:MM format. Either of these
 * might be an empty string depending on the conditions above.
 */


Utils.getTimeDisplayValues = function (currentPlayhead, duration, isLiveStream, useNegativeDvrOffset) {
  currentPlayhead = Utils.ensureNumber(currentPlayhead); // eslint-disable-line

  duration = Utils.ensureNumber(duration, 0); // eslint-disable-line

  var currentTime = '';
  var totalTime = '';
  var currentPlayheadInt = parseInt(currentPlayhead, 10);
  var currentPlayheadTime = Number.isFinite(currentPlayheadInt) ? Utils.formatSeconds(currentPlayheadInt) : null;
  var timeShift = (currentPlayhead || 0) - duration;

  if (duration) {
    totalTime = Utils.formatSeconds(duration);
  }

  if (isLiveStream) {
    // Checking timeShift < 1 second (not === 0) as processing of the click after we
    // rewinded and then went live may take some time.
    var isLiveNow = Math.abs(timeShift) < 1;

    if (useNegativeDvrOffset) {
      // We don't show current time unless there is a time shift when using
      // negative DVR offset
      currentTime = isLiveNow ? '' : Utils.formatSeconds(timeShift);
    } else {
      // When not using negative DVR offset, DVR progress is shown in the usual
      // "current time of total time" format, with total time set to the size of DVR window
      currentTime = isLiveNow ? totalTime : Utils.formatSeconds(Math.ceil(duration + timeShift));
    }
  } else {
    currentTime = currentPlayheadTime;
  } // Total time is not displayed when using negative DVR offset, only the
  // timeshift is shown


  if (useNegativeDvrOffset) {
    totalTime = isLiveStream ? '' : totalTime;
  }

  return {
    currentTime: currentTime,
    totalTime: totalTime
  };
};
/**
 * Returns a standard object containing fields required for discovery event data.

  * @function getDiscoveryEventData
  * @param {Number} assetPosition The position of the discovery asset in the carousel
  * @param {Number} pageSize  The total number of discovery assets in the carousel shown
  * @param {String} uiTag UI tag of the element that generated the discovery event
  * @param {Object} asset Object containing the asset data, including embed code and context
  * @param {Object} customData Object containing custom data for the discovery event
  * @returns {Object} An object with the discovery event data.
  */


Utils.getDiscoveryEventData = function (assetPosition, pageSize, uiTag, asset, customData) {
  var assetData = {
    embed_code: asset.embed_code,
    idType: _constants.default.DISCOVERY.ID_TYPE,
    ooyalaDiscoveryContext: Utils.getDiscoveryContext(asset)
  };
  var eventData = {
    customData: customData,
    asset: assetData,
    contentSource: _constants.default.DISCOVERY.SOURCE,
    assetPosition: assetPosition,
    pageSize: pageSize,
    uiTag: uiTag
  };
  return eventData;
};
/**
* Gets the ooyalaDiscovery context for a discovery asset. If asset has bucket info instead of
* ooyalaDiscovery context, decode bucket info and convert to discovery context
*
* @function getDiscoveryContext
* @param {Object} discoveryAsset - The discovery asset data
* @returns {Object} This ooyala discovery context
*/


Utils.getDiscoveryContext = function (discoveryAsset) {
  if (discoveryAsset == null) {
    return {};
  } // If a discovery context is already attached, no need to do any conversion


  if (discoveryAsset.ooyalaDiscoveryContext != null) {
    return discoveryAsset.ooyalaDiscoveryContext;
  }

  if (discoveryAsset.bucket_info == null) {
    return {};
  } // Remove the first char that indicates the bucket number


  var bucketInfo = JSON.parse(discoveryAsset.bucket_info.substring(1)); // Decode the Base64 data and parse as JSON

  var bucketDecode = JSON.parse(window.atob(bucketInfo.encoded)); // Return the new context with converted bucket info

  return {
    version: '1',
    data: bucketDecode
  };
};
/*
  * Sorts the qualities provided by the BITRATE_INFO_AVAILABLE event in descending
  * order by bitrate and then by resolution.
  * @function sortQualitiesByBitrate
  * @param {Array} qualities The array of qualities in the format provided by the BITRATE_INFO_AVAILABLE event.
  * @returns {Array} A new array with the qualities sorted in descending order by bitrate and then resolution.
  */


Utils.sortQualitiesByBitrate = function (qualitiesDirty) {
  // Avoid modifying the array that was passed
  var qualities = Array.isArray(qualitiesDirty) ? qualitiesDirty.slice() : []; // Sort bitrates by resolution and then by bitrate in descending order

  qualities.sort(function (currentVal, nextVal) {
    var current = currentVal || {};
    var next = nextVal || {};
    var bitrateA = Utils.ensureNumber(current.bitrate, 0);
    var bitrateB = Utils.ensureNumber(next.bitrate, 0);
    var resolutionA = Utils.ensureNumber(current.width, 1) * Utils.ensureNumber(current.height, 1);
    var resolutionB = Utils.ensureNumber(next.width, 1) * Utils.ensureNumber(next.height, 1); // When both bitrates are equal the difference will be falsy (zero) and
    // the second condition (resolution) will be used instead

    return bitrateB - bitrateA || resolutionB - resolutionA;
  });
  return qualities;
};
/**
 * Gets the values of skip forward/back times configured in skin.json. The values
 * from the skin config are processed in order to ensure valid values: Numbers are
 * converted to integers and constrained to allowed minimum and maximums. Falls
 * back to default values when none are specified.
 * @function getSkipTimes
 * @param {Object} skinConfig - configuration for skin
 * @returns {Object} An object with two properties, 'forward' and 'backward',
 * which represent the amount of seconds to skip in each respective direction.
 */


Utils.getSkipTimes = function (skinConfig) {
  var skipTimes = {};
  skipTimes.backward = Utils.getPropertyValue(skinConfig, 'skipControls.skipBackwardTime');
  skipTimes.forward = Utils.getPropertyValue(skinConfig, 'skipControls.skipForwardTime'); // Use default values if not valid numbers

  skipTimes.backward = Utils.ensureNumber(skipTimes.backward, _constants.default.UI.DEFAULT_SKIP_BACKWARD_TIME);
  skipTimes.forward = Utils.ensureNumber(skipTimes.forward, _constants.default.UI.DEFAULT_SKIP_FORWARD_TIME); // Ensure integer value and constrain to allowed min/max

  skipTimes.backward = Utils.constrainToRange(Math.floor(skipTimes.backward), _constants.default.UI.MIN_SKIP_TIME, _constants.default.UI.MAX_SKIP_TIME);
  skipTimes.forward = Utils.constrainToRange(Math.floor(skipTimes.forward), _constants.default.UI.MIN_SKIP_TIME, _constants.default.UI.MAX_SKIP_TIME);
  return skipTimes;
};
/**
 * Ensures that the given value is a valid playback speed by doing the following:
 * - Defaulting to 1 for unparseable values
 * - Constraining to max and min allowed playback speeds (done by default, but can be disabled)
 * - Truncating to at most two decimals
 * @private
 * @param {*} playbackSpeed The playback speed value that we want to sanitize
 * @param {Boolean} ignoreMinMax Will not constrain to minimum and maximum values when true
 * @returns {Number} A number which is the sanitized version of the value provided
 */


Utils.sanitizePlaybackSpeed = function (playbackSpeed, ignoreMinMax) {
  var sanitizedSpeed = Utils.ensureNumber(playbackSpeed, _constants.default.PLAYBACK_SPEED.DEFAULT_VALUE);

  if (!ignoreMinMax) {
    // TODO:
    // Read values from OO.CONSTANTS once these are available in html5-common
    sanitizedSpeed = Utils.constrainToRange(sanitizedSpeed, _constants.default.PLAYBACK_SPEED.MIN, _constants.default.PLAYBACK_SPEED.MAX);
  }

  sanitizedSpeed = Utils.toFixedNumber(sanitizedSpeed, 2);
  return sanitizedSpeed;
};
/**
 * Removes duplicate values from an array.
 * @private
 * @param {Array} array The array that we want to dedupe
 * @returns {Array} A new array that contains only the unique values from the array parameter
 */


Utils.dedupeArray = function (array) {
  if (!Array.isArray(array)) {
    return [];
  }

  var result = array.filter(function (element, index, arr) {
    return arr.indexOf(element) === index;
  });
  return result;
};
/**
 * Determines whether a mouse cursor represented by its clientX and clientY
 * properties is inside a DOM element contained within the given DOMRect.
 * @function isMouseInsideRect
 * @param {Object} mousePosition An object with the clientX and clientY coordinates of the mouse pointer.
 * @param {DOMRect} clientRect DOMRect returned by an element's getBoundingClientRect() function
 * @returns {Boolean} True if the mouse is inside the element, false otherwise
 */


Utils.isMouseInsideRect = function (mousePosition, clientRect) {
  if (!mousePosition || !clientRect) {
    return false;
  }

  if (mousePosition.clientX >= clientRect.left && mousePosition.clientX <= clientRect.right && mousePosition.clientY >= clientRect.top && mousePosition.clientY <= clientRect.bottom) {
    return true;
  }

  return false;
};
/**
 * Returns a number that represents the current moment in time. Falls back to
 * Date.now() in platforms that don't support window.performance, which means that
 * the value could be relative to either the Unix epoch or the page load. For
 * this reason, values returned by this function should only be used for calculating
 * elapsed times.
 * @function getCurrentTimestamp
 * @returns {Number} A value in milliseconds that will be either performance.now() or
 * Date.now, depending on whether or not window.performance is available.
 */


Utils.getCurrentTimestamp = function () {
  if (window.performance && typeof window.performance.now === 'function') {
    return window.performance.now();
  }

  return Date.now();
};
/**
 * Trims the given text to fit inside of the given element, truncating with ellipsis.
 *
 * @function truncateTextToWidth
 * @param {DOMElement} element - The DOM Element to fit text inside
 * @param {String} text - The string to trim
 * @returns {String} String truncated to fit the width of the element
 */


Utils.truncateTextToWidth = function (element, text) {
  var testText = document.createElement('span');
  testText.style.visibility = 'hidden';
  testText.style.position = 'absolute';
  testText.style.top = '0';
  testText.style.left = '0';
  testText.style.whiteSpace = 'nowrap';
  testText.innerHTML = text;
  element.appendChild(testText);
  var actualWidth = element.clientWidth || element.getBoundingClientRect().width;
  var textWidth = testText.scrollWidth;
  var truncatedText = '';

  if (textWidth > actualWidth * 1.8) {
    // eslint-disable-line
    var truncPercent = actualWidth / textWidth;
    var newWidth = Math.floor(truncPercent * text.length) * 1.8 - 3; // eslint-disable-line

    truncatedText = "".concat(text.slice(0, newWidth), "...");
  } else {
    truncatedText = text;
  }

  element.removeChild(testText);
  return truncatedText;
};
/**
 * Returns a shallow clone of the object given
 *
 * @function clone
 * @param {Object} object - Object to be cloned
 * @returns {Object} Clone of the given object
 */


Utils.clone = function (object) {
  var clonedObj = {};

  for (var key in object) {
    // eslint-disable-line
    if (object.hasOwnProperty(key)) {
      // eslint-disable-line
      clonedObj[key] = object[key];
    }
  }

  return clonedObj;
};
/**
 * Clones the given object and merges in the keys and values of the second object.
 * Attributes in the cloned original will be overwritten.
 *
 * @function extend
 * @param {Object} original - Object to be extended
 * @param {Object} toMerge - Object with properties to be merged in
 * @returns {Object} Cloned and merged object
 */


Utils.extend = function (original, toMerge) {
  var extendedObject = Utils.clone(original);

  for (var key in toMerge) {
    // eslint-disable-line
    if (toMerge.hasOwnProperty(key)) {
      // eslint-disable-line
      extendedObject[key] = toMerge[key];
    }
  }

  return extendedObject;
};
/**
 * Convert raw seconds into human friendly HH:MM format
 *
 * @function formatSeconds
 * @param {integer} time The time to format in seconds
 * @returns {String} The time as a string in the HH:MM format
 */


Utils.formatSeconds = function (time) {
  var timeInSeconds = Math.abs(time);
  var secInMinute = 60;
  var secInHour = 3600;
  var seconds = parseInt(timeInSeconds, 10) % secInMinute;
  var hours = parseInt(timeInSeconds / secInHour, 10);
  var minutes = parseInt((timeInSeconds - hours * secInHour) / secInMinute, 10);

  if (hours < 10) {
    hours = "0".concat(hours);
  }

  if (minutes < 10) {
    minutes = "0".concat(minutes);
  }

  if (seconds < 10) {
    seconds = "0".concat(seconds);
  }

  var timeStr = parseInt(hours, 10) > 0 ? "".concat(hours, ":").concat(minutes, ":").concat(seconds) : "".concat(minutes, ":").concat(seconds);

  if (time >= 0) {
    return timeStr;
  }

  return "-".concat(timeStr);
};
/**
 * Check if the current browser is Safari
 *
 * @function isSafari
 * @returns {Boolean} Whether the browser is Safari or not
 */


Utils.isSafari = function () {
  return !!window.navigator.userAgent.match(/AppleWebKit/) && !window.navigator.userAgent.match(/Chrome/);
};
/**
 * Check if the current browser is Chrome
 *
 * @function isChrome
 * @returns {Boolean} Whether the browser is Chrome or not
 */


Utils.isChrome = function () {
  return !!window.navigator.userAgent.match(/Chrome/) && !!window.navigator.vendor.match(/Google Inc/);
};
/**
 * Check if the current browser is Edge
 *
 * @function isEdge
 * @returns {Boolean} Whether the browser is Edge or not
 */


Utils.isEdge = function () {
  return !!window.navigator.userAgent.match(/Edge/);
};
/**
 * Check if the current browser is Internet Explorer
 *
 * @function isIE
 * @returns {Boolean} Whether the browser is IE or not
 */


Utils.isIE = function () {
  return !!window.navigator.userAgent.match(/MSIE/) || !!window.navigator.userAgent.match(/Trident/);
};
/**
 * Check if the current device is Android
 *
 * @function isAndroid
 * @returns {Boolean} Whether the browser is running on Android or not
 */


Utils.isAndroid = function () {
  return !!window.navigator.appVersion.match(/Android/);
};
/**
 * Check if the current device is iOS
 *
 * @function isIos
 * @returns {Boolean} Whether the device is iOS or not
 */


Utils.isIos = function () {
  return !!window.navigator.platform.match(/(iPhone|iPad|iPod)/);
};
/**
 * Check if the current device is an iPhone
 *
 * @function isIPhone
 * @returns {Boolean} Whether the device is an iPhone or not
 */


Utils.isIPhone = function () {
  return !!window.navigator.platform.match(/(iPhone|iPod)/);
};
/**
 * Check if the current device is a mobile device
 *
 * @function isMobile
 * @returns {Boolean} Whether the browser device a mobile device or not
 */


Utils.isMobile = function () {
  return Utils.isAndroid() || Utils.isIos();
};
/**
 * Get type of user device.
 *
 * @returns {string} - name of the user device, may be one of the values 'desktop', 'phone' or 'tablet'.
 */


Utils.getUserDevice = function () {
  var device = 'desktop';
  var userAgent = window.navigator.userAgent;

  if (userAgent) {
    var lowerUserAgent = userAgent.toLowerCase();

    if (/(mobi|ipod|phone|blackberry|opera mini|fennec|minimo|symbian|psp|nintendo ds|archos|skyfire|puffin|blazer|bolt|gobrowser|iris|maemo|semc|teashark|uzard)/.test(lowerUserAgent)) {
      device = 'phone';
    } else if (/(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(lowerUserAgent)) {
      device = 'tablet';
    }
  }

  return device;
};
/**
 * Check if the current browser is Internet Explorer 10
 *
 * @function isIE10
 * @returns {Boolean} Whether the browser is IE10 or not
 */


Utils.isIE10 = function () {
  return !!window.navigator.userAgent.match(/MSIE 10/);
};
/**
 * Determine the best language to use for localization
 *
 * @function getLanguageToUse
 * @param {Object} skinConfig - The skin configuration file to read languages from
 * @param {Object} playerParam - Page-level params
 * @returns {String} The ISO code of the language to use
 */


Utils.getLanguageToUse = function (skinConfig, playerParam) {
  if (!skinConfig) {
    return '';
  }

  var localization = skinConfig.localization;
  var userBrowserLanguage;
  var isLanguageCodeInAvailablelLanguageFile = false;
  var isUseBrowserLanguage = playerParam && playerParam['useBrowserLanguage']; // eslint-disable-line
  // if useUserBrowserLanguage is set to true, use language from user browser settings

  if (isUseBrowserLanguage) {
    userBrowserLanguage = Utils.getUserBrowserLanguage();
    isLanguageCodeInAvailablelLanguageFile = !!localization && Utils.isLanguageCodeInAvailablelLanguageFile(localization.availableLanguageFile, userBrowserLanguage);
  }

  if (!userBrowserLanguage || !localization || !isLanguageCodeInAvailablelLanguageFile) {
    // if useUserBrowserLanguage is not set to true or
    // useUserBrowserLanguage is set to true but browser language is not checkable or
    // there is no browser language in availableLanguageFile
    return Utils.getDefaultLanguage(localization);
  }

  return userBrowserLanguage;
};
/**
 * @param {Object} localization - location configuration object
 * @param {String} localization.defaultLanguage - value for default language
 * @returns {String} defaultLanguage - language code from file "skin.json" (
 * before executing function "onSkinMetaDataFetched") or language code that was set
 * in the page-level parameters (after executing function "onSkinMetaDataFetched")
 */


Utils.getDefaultLanguage = function (localization) {
  var defaultLanguage = !!localization && localization.defaultLanguage;
  return defaultLanguage || '';
};
/**
 *
 * @returns {String} two-digit value of an user's system language or an empty string
 */


Utils.getUserBrowserLanguage = function () {
  // Examples of valid language codes are: "en", "en-US", "de", "fr", etc.
  var _window = window,
      navigator = _window.navigator;
  var language;

  if (navigator) {
    language = navigator.language // "language" property returns the language of the browser application in
    // Firefox, Opera, Google Chrome and Safari
    || navigator.userLanguage // "userLanguage" property returns the current Regional and Language settings
    // of the operating system in
    // Internet Explorer and the language of the browser application in Opera
    || navigator.systemLanguage // "systemLanguage" property returns the language edition of the operating system in
    // Internet Explorer
    ;
  }

  return language ? language.substr(0, 2).toLowerCase() : ''; // remove lang sub-code
};
/**
 *
 * @param {Array} availableLanguageList - array of objects of language code values
 * with the key "language"
 * @param {string} languageCode - two-digit value of the language
 * @returns {Boolean} "true" if the corresponding language code "languageCode" is
 * in the array of available languages "availableLanguageList",
 * otherwise "false"
 */


Utils.isLanguageCodeInAvailablelLanguageFile = function (availableLanguageList, languageCode) {
  if (!(availableLanguageList && Array.isArray(availableLanguageList) && languageCode)) {
    return false;
  }

  return availableLanguageList.some(function (languageObj) {
    return languageObj.language === languageCode;
  });
};
/**
 * Get the localized string for a given localization key
 *
 * @function getLocalizedString
 * @param {String} language - ISO code of the language to use
 * @param {String} stringId - The key of the localized string to retrieve
 * @param {Object} localizedStrings - Mapping of string keys to localized values
 * @returns {String} The localizted string
 */


Utils.getLocalizedString = function (language, stringId, localizedStrings) {
  try {
    return localizedStrings[language][stringId] || stringId;
  } catch (error) {
    return stringId;
  }
};
/**
 * Get the countdown string that shows the time until a given future timestamp
 *
 * @function getStartCountdown
 * @param {Number} countdownTimestampDirty - The Unix timestamp for the asset flight time start
 * @returns {String} The countdown time string
 */


Utils.getStartCountdown = function (countdownTimestampDirty) {
  var dayString = 'day';
  var hourString = 'hour';
  var minuteString = 'minute';
  var hoursInDay = 24;
  var mSecInHour = 3600000;
  var mSecInMinute = 60000;
  var countdownTimestamp = countdownTimestampDirty;

  try {
    if (countdownTimestamp < 0) {
      return '';
    }

    var days = Math.floor(countdownTimestamp / (hoursInDay * mSecInHour));

    if (days !== 1) {
      dayString += 's';
    }

    countdownTimestamp -= days * hoursInDay * mSecInHour;
    var hours = Math.floor(countdownTimestamp / mSecInHour);

    if (hours !== 1) {
      hourString += 's';
    }

    countdownTimestamp -= hours * mSecInHour;
    var minutes = Math.floor(countdownTimestamp / mSecInMinute);

    if (minutes !== 1) {
      minuteString += 's';
    }

    return "".concat(days, " ").concat(dayString, ", ").concat(hours, " ").concat(hourString, ", and ").concat(minutes, " ").concat(minuteString);
  } catch (error) {
    return '';
  }
};
/**
 * Safely gets the value of an object's nested property.
 *
 * @function getPropertyValue
 * @param {Object} object - The object we want to extract the property form
 * @param {String} propertyPath - A path that points to a nested property in the object with a form like 'prop.nestedProp1.nestedProp2'
 * @param {Object} defaultValue - (Optional) A default value to return when the property is undefined
 * @returns {Object|String|Number} - The value of the nested property, the default value if nested property is undefined. If the value is null, null will be returned.
 */


Utils.getPropertyValue = function (object, propertyPath, defaultValue) {
  var value = null;
  var currentObject = object;
  var currentProp = null;

  try {
    var props = propertyPath.split('.');

    for (var index = 0; index < props.length; index += 1) {
      currentProp = props[index];
      currentObject = value = currentObject[currentProp]; // eslint-disable-line
    }

    if (typeof value === 'undefined') {
      return defaultValue;
    }

    return value;
  } catch (err) {
    return defaultValue;
  }
};
/**
 * Converts string value to number (needed for backwards compatibility of skin.json parameters)
 *
 * @function convertStringToInt
 * @param {String} propertyDirty - string value
 * @returns {Number} - number
 */


Utils.convertStringToNumber = function (propertyDirty) {
  var property = propertyDirty;

  if (property.toString().indexOf('%') > -1) {
    property = parseInt(property, 0) / 100;
  }

  return Number.isFinite(Number(property)) ? Number(property) : 0;
};
/**
 * Determines whether an element contains a class or not.
 * TODO:
 * classList.contains is much better for this purpose, but our current version
 * of React Test Utils generates events with a null classList, which results in
 * broken unit tests.
 *
 * @param {DOMElement} element The DOM element which we want to check
 * @param {String} className The name of the class we want to match
 * @returns {Boolean} True if the element contains the given class, false otherwise
 */


Utils.elementHasClass = function (element, className) {
  if (!element) {
    return false;
  }

  return " ".concat(element.className, " ").indexOf(" ".concat(className, " ")) > -1;
};
/**
 * Returns the icon element associated with an event (usually mouseover or mouseout),
 * which can be either the event's target element itself or a child of the target element.
 * The icon is matched with a class name.
 * This is needed in order to circumvent a Firefox issue that prevents mouse events from
 * being triggered in elements that are children of buttons (such as icons).
 *
 * @param {String} domEvent The event whose icon element we want to extract
 * @param {String} iconClass The class that will be used to match the icon element
 * @returns {Object} The element that has been identified as the icon, or null if none was found
 */


Utils.getEventIconElement = function (domEvent, iconClass) {
  var iconElement = null;
  var classToMatch = iconClass || 'oo-icon';
  var currentTarget = domEvent ? domEvent.currentTarget : null;

  if (currentTarget) {
    // Check to see if the target itself is the icon, otherwise get
    // the first icon child
    if (Utils.elementHasClass(currentTarget, classToMatch)) {
      iconElement = currentTarget;
    } else {
      iconElement = currentTarget.querySelector(".".concat(classToMatch));
    }
  }

  return iconElement;
};
/**
 * Highlight the given element for hover effects
 *
 * @function Highlight
 * @param {DOMElement} target - The element to Highlight
 * @param {number} opacity - opacity of the element
 * @param {string} color - color of the element
 */


Utils.highlight = function (target, opacity, color) {
  target.style.opacity = opacity; // eslint-disable-line

  target.style.color = color; // eslint-disable-line
  // HEADSUP
  // This is currently the same style as the one used in _mixins.scss.
  // We should change both styles whenever we update Utils.

  target.style.textShadow = '0px 0px 3px rgba(255, 255, 255, 0.5), ' // eslint-disable-line
  + '0px 0px 6px rgba(255, 255, 255, 0.5), ' + '0px 0px 9px rgba(255, 255, 255, 0.5)';
};
/**
 * Remove the highlight effect of the given element
 *
 * @function removeHighlight
 * @param {DOMElement} target - The element to remove the highlight effect from
 * @param {number} opacity - The opacity to return the element to
 * @param {string} color - The color to return the element to
 */


Utils.removeHighlight = function (target, opacity, color) {
  target.style.opacity = opacity; // eslint-disable-line

  target.style.color = color; // eslint-disable-line

  target.style.textShadow = ''; // eslint-disable-line
};
/**
 * Determine which buttons should be shown in the control bar given the width of the player<br/>
 * Note: items which do not meet the item spec will be removed and not appear in the results.
 *
 * @function collapse
 * @param {Number} barWidth - Width of the control bar
 * @param {Object[]} orderedItems - array of left to right ordered items. Each item meets the skin's "button" schema.
 * @param {number} responsiveUIMultiple -
 * @returns {Object} An object of the structure {fit:[], overflow:[]} where the fit object is
 *   an array of buttons that fit in the control bar and overflow are the ones that should be hidden
 */


Utils.collapse = function (barWidth, orderedItems, responsiveUIMultiple) {
  if (window.isNaN(barWidth) || barWidth === undefined) {
    // eslint-disable-line
    return orderedItems;
  }

  if (!orderedItems) {
    return [];
  }

  var validItems = orderedItems.filter(function (item) {
    return isValid(item);
  });
  return collapse(barWidth, validItems, responsiveUIMultiple);
};
/**
 * Find thumbnail image URL and its index that correspond to given time value
 *
 * @function findThumbnail
 * @param {Object} thumbnails - metadata object containing information about thumbnails
 * @param {Number} hoverTime - time value to find thumbnail for
 * @param {Number} duration - duration of the video
 * @param {Boolean} isVideoVr - if video is vr
 * @returns {Object} object that contains URL and index of requested thumbnail
 */


Utils.findThumbnail = function (thumbnails, hoverTime, duration, isVideoVr) {
  var timeSlices = thumbnails.data.available_time_slices;
  var width = thumbnails.data.available_widths[0]; // choosing the lowest size

  if (isVideoVr && width < _constants.default.THUMBNAIL.MAX_VR_THUMBNAIL_BG_WIDTH) {
    // it is necessary to take bigger image for showing part of the image
    // so choose not the lowest size but bigger one, the best width is 380
    var index = thumbnails.data.available_widths.length - 1 >= _constants.default.THUMBNAIL.THUMBNAIL_VR_RATIO ? _constants.default.THUMBNAIL.THUMBNAIL_VR_RATIO : thumbnails.data.available_widths.length - 1;
    width = thumbnails.data.available_widths[index];
  }

  var position = Math.floor(hoverTime / duration * timeSlices.length);
  position = Math.min(position, timeSlices.length - 1);
  position = Math.max(position, 0);
  var selectedTimeSlice = null;
  var selectedPosition = position;

  if (timeSlices[position] >= hoverTime) {
    var _timeSlices = _slicedToArray(timeSlices, 1);

    selectedTimeSlice = _timeSlices[0];

    for (var _index = position; _index >= 0; _index -= 1) {
      if (timeSlices[_index] <= hoverTime) {
        selectedTimeSlice = timeSlices[_index];
        selectedPosition = _index;
        break;
      }
    }
  } else {
    selectedTimeSlice = timeSlices[timeSlices.length - 1];

    for (var _index2 = position; _index2 < timeSlices.length; _index2 += 1) {
      if (timeSlices[_index2] === hoverTime) {
        selectedTimeSlice = timeSlices[_index2];
        selectedPosition = _index2;
        break;
      } else if (timeSlices[_index2] > hoverTime) {
        selectedTimeSlice = timeSlices[_index2 - 1];
        selectedPosition = _index2 - 1;
        break;
      }
    }
  }

  var selectedThumbnail = thumbnails.data.thumbnails[selectedTimeSlice][width].url;
  var imageWidth = thumbnails.data.thumbnails[selectedTimeSlice][width].width;
  var imageHeight = thumbnails.data.thumbnails[selectedTimeSlice][width].height;
  return {
    url: selectedThumbnail,
    pos: selectedPosition,
    imageWidth: imageWidth,
    imageHeight: imageHeight
  };
};
/**
 * Check if the current browser is on a touch enabled device.
 * Function from https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/
 *
 * @function browserSupportsTouch
 * @returns {Boolean} Whether or not the browser supports touch events.
 */


Utils.browserSupportsTouch = function () {
  return 'ontouchstart' in window || window.navigator.maxTouchPoints > 0 || window.navigator.msMaxTouchPoints > 0;
};
/**
 * Creates wrapper object with sanitized html. This marked data can subsequently be passed into dangerouslySetInnerHTML
 * See https://facebook.github.io/react/tips/dangerously-set-inner-html.html
 *
 * @function createMarkup
 * @param {String} html - html to be sanitized
 * @returns {Object} Wrapper object for sanitized markup.
 */


Utils.createMarkup = function (html) {
  return {
    __html: html
  };
};
/**
 * Deep merge arrays and array values
 *
 * @function arrayDeepMerge
 * @param {Array} target - An array that will receive new items if additional items are passed
 * @param {Array} source - An array containing additional items to merge into target
 * @param {Object} optionsArgument - parameters passed to parent DeepMerge function, i.e. -
 *        arrayMerge - https://github.com/KyleAMathews/deepmerge#arraymerge
 *        clone - https://github.com/KyleAMathews/deepmerge#clone
 *        arrayUnionBy - key used to compare Objects being merged, i.e. button name
 *        arrayFusion - method used to merge arrays ['replace', 'deepmerge']
 *        buttonArrayFusion - method used to merge button array ['replace', 'prepend', 'deepmerge']
 *        arraySwap - swaps target/source
 * @returns {Array} new merged array with items from both target and source
 */


Utils.arrayDeepMerge = function (target, source, optionsArgument) {
  if (source && source.length) {
    // if source is button and buttonArrayFusion is 'replace', return source w/o merge
    if (source[0][optionsArgument.arrayUnionBy] && optionsArgument.buttonArrayFusion === 'replace') {
      return source;
    } // if source is not button and arrayFusion is 'replace', return source w/o merge


    if (!source[0][optionsArgument.arrayUnionBy] && optionsArgument.arrayFusion !== 'deepmerge') {
      return source;
    }
  }

  var targetArray = optionsArgument.arraySwap ? source : target;
  var sourceArray = optionsArgument.arraySwap ? target : source;
  var uniqueSourceArray = sourceArray.slice(); // array used to keep track of objects that do not exist in target

  var destination = targetArray.slice();
  sourceArray.forEach(function (sourceItem, index) {
    if (typeof destination[index] === 'undefined') {
      destination[index] = cloneIfNecessary(sourceItem, optionsArgument);
    } else if (isMergeableObject(sourceItem)) {
      // custom merge for buttons array, used to maintain source sort order
      if (sourceItem[optionsArgument.arrayUnionBy]) {
        targetArray.forEach(function (targetItem, subIndex) {
          // gracefully merge buttons by name
          if (sourceItem[optionsArgument.arrayUnionBy] === targetItem[optionsArgument.arrayUnionBy]) {
            var targetObject = optionsArgument.arraySwap ? sourceItem : targetItem;
            var sourceObject = optionsArgument.arraySwap ? targetItem : sourceItem;
            destination[subIndex] = (0, _deepmerge.default)(targetObject, sourceObject, optionsArgument); // prunes uniqueSourceArray to unique items not in target

            if (optionsArgument.buttonArrayFusion === 'prepend' && uniqueSourceArray && uniqueSourceArray.length) {
              for (var x in uniqueSourceArray) {
                // eslint-disable-line
                if (uniqueSourceArray[x][optionsArgument.arrayUnionBy] === sourceItem[optionsArgument.arrayUnionBy]) {
                  uniqueSourceArray.splice(x, 1);
                  break;
                }
              }
            }
          }
        });
      } else {
        destination[index] = (0, _deepmerge.default)(targetArray[index], sourceItem, optionsArgument);
      }
    } else if (targetArray.indexOf(sourceItem) === -1) {
      destination.push(cloneIfNecessary(sourceItem, optionsArgument));
    }
  }); // prepend uniqueSourceArray array of unique items to buttons after flexible space

  if (optionsArgument.buttonArrayFusion === 'prepend' && uniqueSourceArray && uniqueSourceArray.length) {
    var flexibleSpaceIndex = null; // find flexibleSpace btn index

    for (var y in destination) {
      // eslint-disable-line
      if (destination[y][optionsArgument.arrayUnionBy] === 'flexibleSpace') {
        flexibleSpaceIndex = Number.parseInt(y, 0);
        break;
      }
    } // loop through uniqueSourceArray array, add unique objects
    // to destination array after flexible space btn


    if (flexibleSpaceIndex) {
      flexibleSpaceIndex += 1; // after flexible space

      for (var z in uniqueSourceArray) {
        // eslint-disable-line
        destination.splice(flexibleSpaceIndex, 0, uniqueSourceArray[z]);
      }
    } else {
      destination = destination.concat(uniqueSourceArray);
    }
  }

  return destination;
};
/**
 * Checks if string is valid
 *
 * @function isValidString
 * @param {String} src - string to be validated
 * @returns {Boolean} true if string is valid, false if not
 */


Utils.isValidString = function (src) {
  return src && (typeof src === 'string' || src instanceof String);
};
/**
 * Returns sanitized config data
 *
 * @function sanitizeConfigData
 * @param {Object} data to be sanitized
 * @returns {Object} data if data is valid, empty object if not
 */


Utils.sanitizeConfigData = function (data) {
  if (data && !Array.isArray(data)) {
    return data;
  }
  // MCKA:custom
  OOV4.log('Invalid player configuration json data: ', data);
  return {};
};
/**
 * Returns whether the OS can render the skin
 * @returns {[boolean]} true if the OS can render the skin.
 */


Utils.canRenderSkin = function () {
  return !(OO.isIphone && OO.iosMajorVersion < 10);
};
/**
 * @description - returns the correct coordinates of events depending on the platform
 * @param {Event} event - event
 * @returns {object} - coordinates x, y
 */


Utils.getCoords = function (event) {
  var coords = {};
  var isMobileTouhes = (OO.isIos || OO.isAndroid) && event.touches && !!event.touches.length;

  if (isMobileTouhes) {
    coords.x = event.touches[0].pageX; // eslint-disable-line

    coords.y = event.touches[0].pageY; // eslint-disable-line
  } else {
    coords.x = event.pageX; // eslint-disable-line

    coords.y = event.pageY; // eslint-disable-line
  }

  return coords;
};
/**
 * get mobile device orientation type
 * @returns {string} - one of the following:
 * "portrait-primary"
 * "portrait-secondary" (portrait upside down)
 * "landscape-primary"
 * "landscape-secondary" (landscape upside down)
 */


Utils.getOrientationType = function () {
  var orientationType = window.screen.orientation;

  if (orientationType && orientationType !== null && _typeof(orientationType) === 'object') {
    orientationType = orientationType.type;
  } else {
    orientationType = window.screen.mozOrientation || window.screen.msOrientation;
  }

  return orientationType;
};
/**
 * if device orientation is portrait set "landscape-primary" orientation for the device
 * @returns {boolean} - true if "landscape-primary" orientation was set, returns false in otherwise
 */


Utils.setLandscapeScreenOrientation = function () {
  var orientationType = Utils.getOrientationType();

  if (orientationType && (orientationType === 'portrait-secondary' || orientationType === 'portrait-primary')) {
    var landscapeOrientation = 'landscape-primary';
    var _window2 = window,
        screen = _window2.screen;

    if (screen.orientation && screen.orientation.lock) {
      // chrome browser
      screen.orientation.lock(landscapeOrientation);
    } else if (screen.lockOrientation) {
      // other
      screen.lockOrientation(landscapeOrientation);
    } else if (screen.mozLockOrientation) {
      // ff
      screen.mozLockOrientation(landscapeOrientation);
    } else if (screen.msLockOrientation) {
      // ie
      screen.msLockOrientation(landscapeOrientation);
    } else {
      return false;
    }

    return true;
  }

  return false;
};
/**
 * Gets the client width of an element. Retrieves clientWidth if it is exists, otherwise will
 * get the width from the getBoundingClientRect
 * getBoundingClientRect().width returns the unrounded clientWidth. However, jsdom won't allow us to set clientWidth,
 * but we can mock getBoundingClientRect
 * @param {Object} element The element to retrieve the client width
 * @returns {*|number} The client width of the element. Returns false if the element does not exist
 */


Utils.getClientWidth = function (element) {
  return element && (element.clientWidth || element.getBoundingClientRect().width);
};
/**
 * Gets the client height of an element. Retrieves clientWidth if it is exists, otherwise will
 * get the height from the getBoundingClientRect
 * getBoundingClientRect().height returns the unrounded clientHeight. However, jsdom won't allow us to set clientHeight,
 * but we can mock getBoundingClientRect.
 * @param {Object} element The element to retrieve the client height
 * @returns {*|number} The client height of the element. Returns false if the element does not exist
 */


Utils.getClientHeight = function (element) {
  return element && (element.clientHeight || element.getBoundingClientRect().height);
};
/**
 * Gets the icon, aria label, and button tooltip for the play icon based on the current player state.
 * @param {string} playerState The current player state
 * @returns {object} icon - the icon to display
 *                   ariaLabel - the aria label to display
 *                   buttonTooltip - the button tooltip to display
 */


Utils.getPlayButtonDetails = function (playerState) {
  var playIcon;
  var playPauseAriaLabel;
  var playBtnTooltip;

  if (playerState === _constants.default.STATE.PLAYING) {
    playIcon = 'pause';
    playPauseAriaLabel = _constants.default.ARIA_LABELS.PAUSE;
    playBtnTooltip = _constants.default.SKIN_TEXT.PAUSE;
  } else if (playerState === _constants.default.STATE.END) {
    playIcon = 'replay';
    playPauseAriaLabel = _constants.default.ARIA_LABELS.REPLAY;
    playBtnTooltip = _constants.default.SKIN_TEXT.REPLAY;
  } else {
    playIcon = 'play';
    playPauseAriaLabel = _constants.default.ARIA_LABELS.PLAY;
    playBtnTooltip = _constants.default.SKIN_TEXT.PLAY;
  }

  return {
    icon: playIcon,
    ariaLabel: playPauseAriaLabel,
    buttonTooltip: playBtnTooltip
  };
};

module.exports = Utils;

},{"../constants/constants":69,"deepmerge":361}],64:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _menuPanel = _interopRequireDefault(require("./menuPanel"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _macros = _interopRequireDefault(require("../constants/macros"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Panel component for video quality selection
 */
var VideoQualityPanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(VideoQualityPanel, _React$Component);

  function VideoQualityPanel(props) {
    var _this;

    _classCallCheck(this, VideoQualityPanel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoQualityPanel).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onMenuItemClick", function (itemValue) {
      var controller = _this.props.controller;
      controller.sendVideoQualityChangeEvent({
        id: itemValue
      });

      _this.setState({
        selectedValue: itemValue
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getBitrateButtons", function () {
      var bitrateButtons = [];
      var _this$props = _this.props,
          skinConfig = _this$props.skinConfig,
          videoQualityOptions = _this$props.videoQualityOptions;
      var availableBitrates = videoQualityOptions.availableBitrates;
      var label = '';
      var availableResolution = null;
      var availableBitrate = null;
      var qualityTextFormat = skinConfig.controlBar && skinConfig.controlBar.qualitySelection && skinConfig.controlBar.qualitySelection.format ? skinConfig.controlBar.qualitySelection.format : _constants.default.QUALITY_SELECTION.FORMAT.BITRATE;
      var showResolution = qualityTextFormat.indexOf(_constants.default.QUALITY_SELECTION.FORMAT.RESOLUTION) >= 0;
      var showBitrate = qualityTextFormat.indexOf(_constants.default.QUALITY_SELECTION.FORMAT.BITRATE) >= 0;
      var qualityText = null;
      var ariaLabel = null;
      var resolutions = {};

      if (showResolution) {
        // Group into buckets so we can assign quality tiers
        availableBitrates.forEach(function (bitrate) {
          if (typeof bitrate.height === 'number') {
            if (!resolutions[bitrate.height]) {
              resolutions[bitrate.height] = [];
            }

            resolutions[bitrate.height].push(bitrate);
          }
        }); // sort by ascending bitrate

        for (var res in resolutions) {
          // eslint-disable-line
          if (resolutions.hasOwnProperty(res)) {
            // eslint-disable-line
            resolutions[res].sort(function (current, next) {
              return current.bitrate - next.bitrate;
            });
          }
        }
      } // available bitrates


      var bitratePrecision = 1000;
      var three = 3;
      availableBitrates.forEach(function (bitrate) {
        if (bitrate.id === _constants.default.QUALITY_SELECTION.AUTO_QUALITY) {
          bitrateButtons.unshift({
            value: _constants.default.QUALITY_SELECTION.AUTO_QUALITY,
            label: _constants.default.SKIN_TEXT.AUTO_QUALITY,
            ariaLabel: _constants.default.ARIA_LABELS.AUTO_QUALITY
          });
        } else {
          label = null;
          availableResolution = null;
          availableBitrate = null;
          qualityText = null;
          ariaLabel = null;

          if (typeof bitrate.height === 'number') {
            availableResolution = bitrate.height;
          }

          if (typeof bitrate.bitrate === 'number') {
            var suffix = 'kbps';
            availableBitrate = Math.round(bitrate.bitrate / bitratePrecision);

            if (availableBitrate >= bitratePrecision) {
              availableBitrate = Math.round(availableBitrate / 10) / 100;
              suffix = 'mbps';
            }

            availableBitrate += " ".concat(suffix);
          } else {
            availableBitrate = bitrate.bitrate;
          }

          if (showResolution && showBitrate && typeof availableResolution === 'number' && availableBitrate) {
            qualityText = _constants.default.QUALITY_SELECTION.TEXT.RESOLUTION_BITRATE;
          } else if (showBitrate && availableBitrate) {
            qualityText = _constants.default.QUALITY_SELECTION.TEXT.BITRATE_ONLY;
          } else if (showResolution && typeof availableResolution === 'number') {
            qualityText = _constants.default.QUALITY_SELECTION.TEXT.RESOLUTION_ONLY;
          }

          switch (qualityText) {
            case _constants.default.QUALITY_SELECTION.TEXT.RESOLUTION_BITRATE:
              label = qualityText.replace(_macros.default.BITRATE, availableBitrate).replace(_macros.default.RESOLUTION, availableResolution);
              ariaLabel = label;
              break;

            case _constants.default.QUALITY_SELECTION.TEXT.RESOLUTION_ONLY:
              if (resolutions[availableResolution] && resolutions[availableResolution].length > 1) {
                var sameResolutionLength = resolutions[availableResolution].length;
                var tiering = null;

                if (sameResolutionLength === 2) {
                  tiering = _constants.default.RESOLUTION_TIER.TWO;
                } else if (sameResolutionLength >= three) {
                  tiering = _constants.default.RESOLUTION_TIER.THREE;
                }

                if (tiering) {
                  // We want to use top 3 resolutions if we are using 3 resolution tiers
                  var resolutionIndex = resolutions[availableResolution].indexOf(bitrate);
                  var extraResolutionLength = resolutions[availableResolution].length - tiering.length;
                  var trueResolutionIndex = resolutionIndex - extraResolutionLength;

                  if (trueResolutionIndex >= 0 && trueResolutionIndex < tiering.length) {
                    qualityText = _constants.default.QUALITY_SELECTION.TEXT.TIERED_RESOLUTION_ONLY;
                    label = qualityText.replace(_macros.default.RESOLUTION, availableResolution).replace(_macros.default.RESOLUTION_TIER, tiering[trueResolutionIndex]);
                  }
                }
              } else {
                label = qualityText.replace(_macros.default.RESOLUTION, availableResolution);
              }

              ariaLabel = label;
              break;

            case _constants.default.QUALITY_SELECTION.TEXT.BITRATE_ONLY:
              label = qualityText.replace(_macros.default.BITRATE, availableBitrate);
              ariaLabel = label;
              break;

            default:
            /** do nothing */

          }

          if (label) {
            bitrateButtons.push({
              value: bitrate.id,
              label: label,
              ariaLabel: ariaLabel
            });
          }
        }
      });
      return bitrateButtons;
    });

    _this.ref = _react.default.createRef();
    _this.state = {
      selectedValue: _utils.default.getPropertyValue(_this.props, 'videoQualityOptions.selectedBitrate.id', _constants.default.QUALITY_SELECTION.AUTO_QUALITY)
    };
    return _this;
  }
  /**
   * Handle click on menu item
   * @param {string} itemValue the item value
   */


  _createClass(VideoQualityPanel, [{
    key: "render",
    value: function render() {
      var menuItems = this.getBitrateButtons();
      var _this$props2 = this.props,
          language = _this$props2.language,
          isPopover = _this$props2.isPopover,
          skinConfig = _this$props2.skinConfig,
          onClose = _this$props2.onClose,
          localizableStrings = _this$props2.localizableStrings;

      var title = _utils.default.getLocalizedString(language, isPopover ? _constants.default.SKIN_TEXT.VIDEO_QUALITY : '', localizableStrings);

      var className = (0, _classnames.default)({
        'oo-content-panel oo-quality-panel': !isPopover,
        'oo-quality-popover': isPopover
      });
      var selectedValue = this.state.selectedValue;
      return _react.default.createElement(_menuPanel.default, {
        ref: this.ref,
        className: className,
        contentClassName: "oo-quality-screen-content",
        buttonClassName: "oo-quality-btn",
        title: title,
        selectedValue: selectedValue,
        isPopover: isPopover,
        skinConfig: skinConfig,
        menuItems: menuItems,
        onMenuItemClick: this.onMenuItemClick,
        onClose: onClose
      });
    }
  }]);

  return VideoQualityPanel;
}(_react.default.Component);

VideoQualityPanel.propTypes = {
  isPopover: _propTypes.default.bool,
  language: _propTypes.default.string.isRequired,
  localizableStrings: _propTypes.default.shape({}).isRequired,
  onClose: _propTypes.default.func,
  videoQualityOptions: _propTypes.default.shape({
    selectedBitrate: _propTypes.default.shape({
      id: _propTypes.default.string
    }).isRequired,
    availableBitrates: _propTypes.default.arrayOf(_propTypes.default.shape({
      id: _propTypes.default.string,
      bitrate: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
      label: _propTypes.default.string
    })).isRequired
  }),
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    }),
    controlBar: _propTypes.default.shape({
      qualitySelection: _propTypes.default.shape({
        format: _propTypes.default.string.isRequired
      })
    })
  }),
  controller: _propTypes.default.shape({
    sendVideoQualityChangeEvent: _propTypes.default.func
  })
};
VideoQualityPanel.defaultProps = {
  isPopover: false,
  onClose: function onClose() {},
  videoQualityOptions: {},
  skinConfig: {},
  controller: {}
};
module.exports = VideoQualityPanel;

},{"../constants/constants":69,"../constants/macros":70,"./menuPanel":44,"./utils":63,"classnames":86,"prop-types":370,"react":378}],65:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _directionControlVr = _interopRequireDefault(require("./directionControlVr"));

var _icon = _interopRequireDefault(require("./icon"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Controls for managing VR
 */
var ViewControlsVr =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ViewControlsVr, _React$Component);

  function ViewControlsVr() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ViewControlsVr);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ViewControlsVr)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrViewControlsClick", function (event, isRotated, direction) {
      var controller = _this.props.controller;

      if (event.type === 'touchend' || !controller.state.isMobile) {
        event.stopPropagation(); // W3C

        controller.state.accessibilityControlsEnabled = true;
      }

      controller.moveVrToDirection(isRotated, direction);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setupIconSymbol", function () {
      var skinConfig = _this.props.skinConfig;
      _this.icon = skinConfig.buttons.desktopContent.find(function (el) {
        return el.location === 'mainView';
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setupBackgroundSymbol", function () {
      if (_this.icon) {
        if (_this.icon.name === 'arrowsBlack') {
          _this.backgroundIcon = 'circleArrowsBlack';
        } else {
          _this.backgroundIcon = 'circleArrowsWhite';
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillMount", function () {
      // if we have vr mode, and the device !== mobile, we need to add control element to the screen of the player.
      // control element is covered with icon from fonts
      _this.isMobile = false;
      _this.vr = null;
      _this.icon = {};
      _this.backgroundIcon = '';
      var _this$props = _this.props,
          controller = _this$props.controller,
          skinConfig = _this$props.skinConfig;

      if (controller) {
        if (controller.videoVrSource) {
          _this.vr = controller.videoVrSource.vr;
        }

        if (controller.state) {
          _this.isMobile = controller.state.isMobile;
        }

        if (controller.state && !(controller.state.isPlayingAd || _this.isMobile)) {
          if (!(skinConfig && skinConfig.buttons && Array.isArray(skinConfig.buttons.desktopContent))) {
            return;
          }

          _this.setupIconSymbol();

          _this.setupBackgroundSymbol();
        }
      }
    });

    return _this;
  }

  _createClass(ViewControlsVr, [{
    key: "render",
    value: function render() {
      var isShowing = !!(this.icon && this.icon.name);
      var controlBarVisible = this.props.controlBarVisible;
      return !isShowing ? null : _react.default.createElement("div", {
        className: (0, _classnames.default)('oo-vr-icon-container view-controls', {
          'oo-vr-icon-container--hidden': !controlBarVisible
        })
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: this.backgroundIcon,
        className: (0, _classnames.default)('oo-vr-icon--substrate')
      })), _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: this.icon.name,
        className: (0, _classnames.default)('oo-vr-icon--icon-symbol')
      })), _react.default.createElement(_directionControlVr.default, _extends({}, this.props, {
        handleVrViewControlsClick: this.handleVrViewControlsClick,
        dir: "left",
        focusId: _constants.default.VR.KEYS.MOVE_LEFT,
        ariaLabel: _constants.default.ARIA_LABELS.MOVE_LEFT
      })), _react.default.createElement(_directionControlVr.default, _extends({}, this.props, {
        handleVrViewControlsClick: this.handleVrViewControlsClick,
        dir: "right",
        focusId: _constants.default.VR.KEYS.MOVE_RIGHT,
        ariaLabel: _constants.default.ARIA_LABELS.MOVE_RIGHT
      })), _react.default.createElement(_directionControlVr.default, _extends({}, this.props, {
        handleVrViewControlsClick: this.handleVrViewControlsClick,
        dir: "up",
        focusId: _constants.default.VR.KEYS.MOVE_UP,
        ariaLabel: _constants.default.ARIA_LABELS.MOVE_UP
      })), _react.default.createElement(_directionControlVr.default, _extends({}, this.props, {
        handleVrViewControlsClick: this.handleVrViewControlsClick,
        dir: "down",
        focusId: _constants.default.VR.KEYS.MOVE_DOWN,
        ariaLabel: _constants.default.ARIA_LABELS.MOVE_DOWN
      })), _react.default.createElement(_directionControlVr.default, _extends({}, this.props, {
        handleVrViewControlsClick: this.handleVrViewControlsClick,
        dir: "init",
        focusId: _constants.default.VR.KEYS.MOVE_CENTER,
        ariaLabel: _constants.default.ARIA_LABELS.MOVE_CENTER
      })));
    }
  }]);

  return ViewControlsVr;
}(_react.default.Component);

ViewControlsVr.propTypes = {
  controller: _propTypes.default.shape({
    moveVrToDirection: _propTypes.default.func,
    state: _propTypes.default.shape({
      isMobile: _propTypes.default.bool
    })
  }).isRequired,
  skinConfig: _propTypes.default.shape({}).isRequired,
  language: _propTypes.default.string
};
ViewControlsVr.defaultProps = {
  language: 'en'
};
module.exports = ViewControlsVr;

},{"../constants/constants":69,"./directionControlVr":35,"./icon":42,"classnames":86,"prop-types":370,"react":378}],66:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _slider = _interopRequireDefault(require("./slider"));

var _utils = _interopRequireDefault(require("./utils"));

var _macros = _interopRequireDefault(require("../constants/macros"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Implements the volume controls component
 */
var VolumeControls =
/*#__PURE__*/
function (_React$Component) {
  _inherits(VolumeControls, _React$Component);

  function VolumeControls() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, VolumeControls);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(VolumeControls)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "volumeChange", function (vol) {
      var controller = _this.props.controller;

      var newVol = _utils.default.ensureNumber(vol, 1);

      controller.setVolume(newVol); // unmute when volume is changed when muted

      if (newVol !== 0) {
        controller.toggleMute(false, true);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVolumeClick", function (event) {
      var clickedBarVolume = _utils.default.getPropertyValue(event, 'currentTarget.dataset.volume'); // For unit tests, since Jest doesn't currently support dataset and it also doesn't
      // allow overriding currentTarget. The right property to use here is currentTarget.
      // Note that currentTarget should never be null IRL.


      if (typeof clickedBarVolume === 'undefined') {
        clickedBarVolume = _utils.default.getPropertyValue(event, 'target.dataset.volume');
      }

      if (typeof clickedBarVolume !== 'undefined') {
        event.preventDefault();

        _this.volumeChange(clickedBarVolume);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVolumeSliderChange", function (value) {
      var newVolume = parseFloat(value);

      _this.volumeChange(newVolume);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVolumeCtrlsKeyDown", function (event) {
      var controller = _this.props.controller;

      switch (event.key) {
        case _constants.default.KEY_VALUES.ARROW_UP:
        case _constants.default.KEY_VALUES.ARROW_RIGHT:
          event.preventDefault();
          controller.accessibilityControls.changeVolumeBy(_constants.default.A11Y_CTRLS.VOLUME_CHANGE_DELTA, true);
          break;

        case _constants.default.KEY_VALUES.ARROW_DOWN:
        case _constants.default.KEY_VALUES.ARROW_LEFT:
          event.preventDefault();
          controller.accessibilityControls.changeVolumeBy(_constants.default.A11Y_CTRLS.VOLUME_CHANGE_DELTA, false);
          break;

        case _constants.default.KEY_VALUES.HOME:
          event.preventDefault();
          controller.accessibilityControls.changeVolumeBy(100, false);
          break;

        case _constants.default.KEY_VALUES.END:
          event.preventDefault();
          controller.accessibilityControls.changeVolumeBy(100, true);
          break;

        default:
          break;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVolumeCtrlsMouseDown", function (event) {
      // Prevent focus highlight from flashing when clicking on
      // the volume controls since the CSS workaround doesn't work on IE.
      if (_utils.default.isIE()) {
        event.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getVolumePercent", function () {
      var controller = _this.props.controller;
      return (controller.state.volumeState.volume * 100).toFixed(0);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getAriaValueText", function () {
      var controller = _this.props.controller;

      if (controller.state.volumeState.muted) {
        return _constants.default.ARIA_LABELS.MUTED;
      }

      return _constants.default.ARIA_LABELS.VOLUME_PERCENT.replace(_macros.default.VOLUME, _this.getVolumePercent());
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderVolumeBars", function () {
      var _this$props = _this.props,
          controller = _this$props.controller,
          skinConfig = _this$props.skinConfig;

      var volumeBars = _toConsumableArray(Array(10).keys()).map(function (tick) {
        // Create each volume tick separately
        var barVolume = (tick + 1) / 10;
        var turnedOn = controller.state.volumeState.volume >= barVolume && !controller.state.volumeState.muted;
        var volumeClass = (0, _classnames.default)({
          'oo-volume-bar': true,
          'oo-on': turnedOn
        });
        var barStyle = {
          backgroundColor: skinConfig.controlBar.volumeControl.color ? skinConfig.controlBar.volumeControl.color : skinConfig.general.accentColor
        };
        return _react.default.createElement("a", {
          // eslint-disable-line
          "data-volume": barVolume,
          className: volumeClass,
          key: tick,
          style: barStyle,
          onClick: _this.handleVolumeClick,
          "aria-hidden": "true"
        }, _react.default.createElement("span", {
          className: "oo-click-extender"
        }));
      });

      var volumePercent = _this.getVolumePercent();

      var ariaValueText = _this.getAriaValueText();

      return _react.default.createElement("span", {
        className: "oo-volume-controls",
        role: "slider",
        "aria-label": _constants.default.ARIA_LABELS.VOLUME_SLIDER,
        "aria-valuemin": "0",
        "aria-valuemax": "100",
        "aria-valuenow": volumePercent,
        "aria-valuetext": ariaValueText,
        "data-focus-id": _constants.default.FOCUS_IDS.VOLUME_CONTROLS,
        tabIndex: "0",
        onMouseDown: _this.handleVolumeCtrlsMouseDown,
        onMouseUp: _utils.default.blurOnMouseUp,
        onKeyDown: _this.handleVolumeCtrlsKeyDown
      }, volumeBars);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "renderVolumeSlider", function () {
      var controller = _this.props.controller;
      var volume = controller.state.volumeState.muted ? 0 : parseFloat(controller.state.volumeState.volume);
      return _react.default.createElement("div", {
        className: "oo-volume-slider"
      }, _react.default.createElement(_slider.default, {
        value: volume,
        className: "oo-slider-volume",
        itemRef: "volumeSlider",
        role: "presentation",
        minValue: 0,
        maxValue: 1,
        step: 0.1,
        usePercentageForAria: true,
        ariaLabel: _constants.default.ARIA_LABELS.VOLUME_SLIDER,
        settingName: _constants.default.ARIA_LABELS.VOLUME_SLIDER,
        focusId: _constants.default.FOCUS_IDS.VOLUME_SLIDER,
        onChange: _this.handleVolumeSliderChange
      }));
    });

    return _this;
  }

  _createClass(VolumeControls, [{
    key: "render",
    value: function render() {
      var controller = this.props.controller;

      if (controller.state.audioOnly) {
        return this.renderVolumeSlider();
      }

      if (controller.state.isMobile) {
        if (controller.state.volumeState.volumeSliderVisible) {
          return this.renderVolumeSlider();
        }

        return null;
      }

      return this.renderVolumeBars();
    }
  }]);

  return VolumeControls;
}(_react.default.Component);

VolumeControls.propTypes = {
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      audioOnly: _propTypes.default.bool,
      isMobile: _propTypes.default.bool.isRequired,
      volumeState: _propTypes.default.shape({
        volumeSliderVisible: _propTypes.default.bool.isRequired,
        volume: _propTypes.default.number.isRequired,
        muted: _propTypes.default.bool.isRequired
      })
    }),
    setVolume: _propTypes.default.func.isRequired
  }).isRequired,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      accentColor: _propTypes.default.string
    }),
    controlBar: _propTypes.default.shape({
      volumeControl: _propTypes.default.shape({
        color: _propTypes.default.string
      })
    })
  })
};
VolumeControls.defaultProps = {
  skinConfig: {
    general: {
      accentColor: '#448aff'
    },
    controlBar: {
      volumeControl: {
        color: '#448aff'
      }
    }
  }
};
module.exports = VolumeControls;

},{"../constants/constants":69,"../constants/macros":70,"./slider":53,"./utils":63,"classnames":86,"prop-types":370,"react":378}],67:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _controlBar = _interopRequireDefault(require("./controlBar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * Volume menu. This component is used for both the Popover and
 * Screen modes of the menu.
 */
var VolumePanel =
/*#__PURE__*/
function (_React$Component) {
  _inherits(VolumePanel, _React$Component);

  function VolumePanel() {
    _classCallCheck(this, VolumePanel);

    return _possibleConstructorReturn(this, _getPrototypeOf(VolumePanel).apply(this, arguments));
  }

  _createClass(VolumePanel, [{
    key: "render",
    // eslint-disable-line
    value: function render() {
      var _this$props = this.props,
          a11yControls = _this$props.a11yControls,
          buffered = _this$props.buffered,
          componentWidth = _this$props.componentWidth,
          currentPlayhead = _this$props.currentPlayhead,
          duration = _this$props.duration,
          isLiveStream = _this$props.isLiveStream,
          playerState = _this$props.playerState,
          playheadTime = _this$props.playheadTime,
          responsiveId = _this$props.responsiveId,
          totalTime = _this$props.totalTime;
      return _react.default.createElement("div", {
        className: "oo-absolute-centered oo-volume-panel"
      }, _react.default.createElement(_controlBar.default, _extends({}, this.props, {
        hideScrubberBar: true,
        controlBarVisible: true,
        playerState: playerState,
        isLiveStream: isLiveStream,
        a11yControls: a11yControls,
        currentPlayhead: currentPlayhead,
        duration: duration,
        totalTime: totalTime,
        playheadTime: playheadTime,
        buffered: buffered,
        responsiveView: responsiveId,
        componentWidth: componentWidth,
        controlBarItems: [{
          name: 'volume',
          location: 'controlBar',
          whenDoesNotFit: 'keep',
          minWidth: 200
        }]
      })));
    }
  }]);

  return VolumePanel;
}(_react.default.Component);

VolumePanel.propTypes = {
  totalTime: _propTypes.default.string.isRequired,
  playheadTime: _propTypes.default.string.isRequired,
  clickToVolumeScreen: _propTypes.default.bool,
  hideVolumeControls: _propTypes.default.bool,
  hideScrubberBar: _propTypes.default.func,
  audioOnly: _propTypes.default.bool,
  isLiveStream: _propTypes.default.bool,
  controlBarVisible: _propTypes.default.bool,
  playerState: _propTypes.default.string,
  responsiveView: _propTypes.default.string,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.shape({}),
  duration: _propTypes.default.number,
  currentPlayhead: _propTypes.default.number,
  componentWidth: _propTypes.default.number,
  onFocus: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  skinConfig: _propTypes.default.shape({
    responsive: _propTypes.default.shape({
      breakpoints: _propTypes.default.object
    })
  }),
  controller: _propTypes.default.shape({
    state: _propTypes.default.object,
    videoVrSource: _propTypes.default.shape({
      vr: _propTypes.default.object
    }),
    cancelTimer: _propTypes.default.func,
    startHideControlBarTimer: _propTypes.default.func,
    hideVolumeSliderBar: _propTypes.default.func,
    closePopover: _propTypes.default.func,
    closeOtherPopovers: _propTypes.default.func,
    isVrStereo: _propTypes.default.bool
  }).isRequired
};
VolumePanel.defaultProps = {
  clickToVolumeScreen: false,
  hideScrubberBar: function hideScrubberBar() {},
  hideVolumeControls: false,
  audioOnly: false,
  isLiveStream: false,
  playerState: 'playing',
  controlBarVisible: false,
  responsiveView: 'md',
  language: 'en',
  localizableStrings: {},
  duration: 0,
  currentPlayhead: 0,
  componentWidth: 0,
  onFocus: function onFocus() {},
  onBlur: function onBlur() {},
  skinConfig: {}
};
module.exports = VolumePanel;

},{"./controlBar":30,"prop-types":370,"react":378}],68:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("./utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Watermark component
 */
var Watermark =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Watermark, _React$Component);

  function Watermark() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Watermark);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Watermark)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleWatermarkClick", function () {
      var _this$props = _this.props,
          controller = _this$props.controller,
          playerState = _this$props.playerState;

      if (playerState !== _constants.default.STATE.PLAYING) {
        return;
      }

      controller.togglePlayPause();
    });

    return _this;
  }

  _createClass(Watermark, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          controlBarVisible = _this$props2.controlBarVisible,
          nonClickable = _this$props2.nonClickable,
          skinConfig = _this$props2.skinConfig;

      var watermarkUrl = _utils.default.getPropertyValue(skinConfig, 'general.watermark.imageResource.url');

      var clickUrl = _utils.default.getPropertyValue(skinConfig, 'general.watermark.clickUrl');

      var watermarkPosition = _utils.default.getPropertyValue(skinConfig, 'general.watermark.position');

      var watermarkTarget = _utils.default.getPropertyValue(skinConfig, 'general.watermark.target', '_blank');

      var watermarkTransparency = _utils.default.getPropertyValue(skinConfig, 'general.watermark.transparency', 1);

      var watermarkScalingOption = _utils.default.getPropertyValue(skinConfig, 'general.watermark.scalingOption', 'default');

      var watermarkScalingPercentage = _utils.default.getPropertyValue(skinConfig, 'general.watermark.scalingPercentage');

      if (!watermarkUrl || !watermarkPosition) {
        return null;
      }

      var watermarkStyle = {};
      var watermarkImageStyle = {};
      watermarkStyle.opacity = watermarkTransparency;

      if (watermarkScalingOption === 'height') {
        watermarkStyle.height = "".concat(watermarkScalingPercentage, "%");
        watermarkImageStyle.height = '100%';
      } else if (watermarkScalingOption === 'width') {
        watermarkStyle.width = "".concat(watermarkScalingPercentage, "%");
        watermarkImageStyle.width = '100%';
      } else if (watermarkScalingOption === 'default') {
        watermarkStyle.width = "".concat(_constants.default.WATERMARK.DEFAULT_SCALING_PERCENTAGE, "%");
        watermarkImageStyle.width = '100%';
      } else {
        watermarkStyle.width = 'auto';
      }

      watermarkPosition = watermarkPosition.toLowerCase(); // the position from db passed with the metadata uses 'right' instead of 'centerRight', etc.

      if (watermarkPosition === 'left' || watermarkPosition === 'right') {
        watermarkPosition = "center".concat(watermarkPosition);
      }

      if (watermarkPosition === 'bottom' || watermarkPosition === 'top') {
        watermarkPosition += 'center';
      }

      var watermarkClass = (0, _classnames.default)({
        'oo-watermark-container': true,
        'oo-watermark-no-clickURL': !clickUrl,
        'oo-watermark-top': watermarkPosition.indexOf('top') > -1,
        'oo-watermark-bottom': watermarkPosition.indexOf('bottom') > -1,
        'oo-watermark-bottom-cb': controlBarVisible && watermarkPosition.indexOf('bottom') > -1,
        'oo-watermark-left': watermarkPosition.indexOf('left') > -1,
        'oo-watermark-right': watermarkPosition.indexOf('right') > -1,
        'oo-watermark-center-horizontal': watermarkPosition.indexOf('bottomcenter') > -1 || watermarkPosition.indexOf('topcenter') > -1,
        'oo-watermark-center-vertical': watermarkPosition.indexOf('centerright') > -1 || watermarkPosition.indexOf('centerleft') > -1
      });
      var watermarkImageClass = (0, _classnames.default)({
        'oo-blur': nonClickable,
        'oo-watermark': true
      });

      var watermarkImage = _react.default.createElement("img", {
        className: watermarkImageClass,
        style: watermarkImageStyle,
        src: watermarkUrl,
        ref: "watermarkImage" // eslint-disable-line
        ,
        alt: "watermark"
      });

      if (nonClickable || !clickUrl) {
        return _react.default.createElement("div", {
          className: watermarkClass,
          ref: "watermark" // eslint-disable-line
          ,
          style: watermarkStyle
        }, watermarkImage);
      }

      return _react.default.createElement("a", {
        className: watermarkClass,
        ref: "watermark" // eslint-disable-line
        ,
        style: watermarkStyle,
        href: skinConfig.general.watermark.clickUrl,
        target: watermarkTarget,
        onClick: this.handleWatermarkClick
      }, watermarkImage);
    }
  }]);

  return Watermark;
}(_react.default.Component);

Watermark.propTypes = {
  nonClickable: _propTypes.default.bool,
  playerState: _propTypes.default.string,
  controlBarVisible: _propTypes.default.bool,
  skinConfig: _propTypes.default.shape({
    general: _propTypes.default.shape({
      watermark: _propTypes.default.shape({
        imageResource: _propTypes.default.shape({
          url: _propTypes.default.string
        }),
        clickUrl: _propTypes.default.string,
        position: _propTypes.default.string,
        target: _propTypes.default.string,
        transparency: _propTypes.default.number,
        scalingOption: _propTypes.default.string,
        scalingPercentage: _propTypes.default.number,
        nonClickable: _propTypes.default.bool
      })
    })
  }),
  controller: _propTypes.default.shape({
    togglePlayPause: _propTypes.default.func
  })
};
Watermark.defaultProps = {
  nonClickable: false,
  playerState: _constants.default.STATE.PAUSE,
  controlBarVisible: false,
  skinConfig: {
    general: {
      watermark: {
        imageResource: {
          url: ''
        },
        clickUrl: '',
        position: 'bottomRight',
        target: '_blank',
        transparency: 1,
        scalingOption: 'default',
        scalingPercentage: 10,
        nonClickable: false
      }
    }
  },
  controller: {
    togglePlayPause: function togglePlayPause() {}
  }
};
module.exports = Watermark;

},{"../constants/constants":69,"./utils":63,"classnames":86,"prop-types":370,"react":378}],69:[function(require,module,exports){
"use strict";

var MACROS = require('./macros');

var CONSTANTS = {
  AIRPLAY_STATE: {
    CONNECTED: 'airPlay-connected',
    DISCONNECTED: 'airPlay-disconnected'
  },
  STATE: {
    START: 'start',
    PLAYING: 'playing',
    PAUSE: 'pause',
    END: 'end',
    ERROR: 'error'
  },
  SCREEN: {
    INITIAL_SCREEN: 'initialScreen',
    START_SCREEN: 'startScreen',
    PLAYING_SCREEN: 'playingScreen',
    PAUSE_SCREEN: 'pauseScreen',
    END_SCREEN: 'endScreen',
    SHARE_SCREEN: 'shareScreen',
    VOLUME_SCREEN: 'volumeScreen',
    DISCOVERY_SCREEN: 'discoveryScreen',
    UP_NEXT_SCREEN: 'upNextScreen',
    AD_SCREEN: 'adScreen',
    MORE_OPTIONS_SCREEN: 'moreOptionsScreen',
    LOADING_SCREEN: 'loadingScreen',
    START_LOADING_SCREEN: 'startLoadingScreen',
    CLOSED_CAPTION_SCREEN: 'closedCaptionScreen',
    VIDEO_QUALITY_SCREEN: 'videoQualityScreen',
    ERROR_SCREEN: 'errorScreen',
    MULTI_AUDIO_SCREEN: 'multiAudioScreen',
    PLAYBACK_SPEED_SCREEN: 'playbackSpeedScreen'
  },
  UI_TAG: {
    DISCOVERY: 'discovery-panel',
    UP_NEXT: 'up-next-panel'
  },
  DISCOVERY: {
    ID_TYPE: 'ooyala',
    SOURCE: 'ooyala-discovery'
  },
  MENU_OPTIONS: {
    VIDEO_QUALITY: 'videoQualityOptions',
    CLOSED_CAPTIONS: 'closedCaptionOptions',
    MULTI_AUDIO: 'multiAudioOptions',
    PLAYBACK_SPEED: 'playbackSpeedOptions'
  },
  SKIN_TEXT: {
    CONNECTED_TO: 'Connected to',
    LEARN_MORE: 'Learn More',
    CLOSED_CAPTION_PREVIEW: 'CLOSED CAPTION PREVIEW',
    SAMPLE_TEXT: 'Sample Text',
    AD: 'Ad',
    SKIP_AD: 'Skip Ad',
    LIVE: 'LIVE',
    GO_LIVE: 'GO LIVE',
    CC_OPTIONS: 'CC Options',
    MULTI_AUDIO_OPTIONS: 'Multi Audio Options',
    ON: 'On',
    OFF: 'Off',
    DISCOVER: 'Discover',
    UP_NEXT: 'Up next',
    START_AT: 'Start at',
    EMBED: 'Embed',
    EMAIL: 'Email',
    EMAIL_BODY: 'Check out this video',
    TO: 'To',
    SUBJECT: 'Subject',
    MESSAGE: 'Message',
    RECIPIENT: 'name@email.com',
    OPTIONAL_MESSAGE: 'Optional Message',
    SEND: 'Send',
    ERROR_ACTION: 'RELOAD YOUR SCREEN OR TRY SELECTING A DIFFERENT VIDEO',
    UNKNOWN_ERROR: 'Something happened while we were trying to play your video! ' + 'Click replay or simply reload your page.',
    LANGUAGE_TAB_TITLE: 'Language',
    COLOR_SELECTION_TAB_TITLE: 'Color Selection',
    CAPTION_OPACITY_TAB_TITLE: 'Caption Opacity',
    FONT_TYPE_TAB_TITLE: 'Font Type',
    FONT_SIZE_TAB_TITLE: 'Font Size',
    TEXT_ENHANCEMENTS_TAB_TITLE: 'Text Enhancements',
    TEXT_COLOR: 'Text color',
    BACKGROUND_COLOR: 'Background color',
    WINDOW_COLOR: 'Window color',
    TRANSPARENT: 'Transparent',
    WHITE: 'White',
    BLUE: 'Blue',
    MAGENTA: 'Magenta',
    GREEN: 'Green',
    YELLOW: 'Yellow',
    RED: 'Red',
    CYAN: 'Cyan',
    BLACK: 'Black',
    TEXT_OPACITY: 'Text opacity',
    BACKGROUND_OPACITY: 'Background opacity',
    WINDOW_OPACITY: 'Window opacity',
    FONT_SIZE: 'Font size',
    SMALL: 'Small',
    MEDIUM: 'Medium',
    LARGE: 'Large',
    EXTRA_LARGE: 'Extra Large',
    TEXT_ENHANCEMENT: 'Text enhancement',
    UNIFORM: 'Uniform',
    DEPRESSED: 'Depressed',
    RAISED: 'Raised',
    SHADOW: 'Shadow',
    PLAY: 'Play',
    REPLAY: 'Replay',
    PAUSE: 'Pause',
    MUTE: 'Mute',
    UNMUTE: 'Unmute',
    CLOSED_CAPTIONS: 'Closed Captions',
    MULTI_AUDIO: 'Multi Audio',
    FULL_SCREEN: 'Full Screen',
    EXIT_FULL_SCREEN: 'Exit Full Screen',
    VIDEO_QUALITY: 'Video Quality',
    AUTO_QUALITY: 'Auto',
    PLAYBACK_SPEED: 'Speed',
    NORMAL_SPEED: 'Normal',
    SHARE: 'Share',
    MORE_OPTIONS: 'More Options',
    SELECT_TO_UNMUTE: 'SELECT TO UNMUTE',
    AUDIO: 'Audio',
    SUBTITLES: 'Subtitles',
    UNDEFINED_LANGUAGE: 'Undefined language',
    NO_LINGUISTIC_CONTENT: 'No linguistic content',
    UNCODED_LANGUAGES: 'Uncoded languages',
    MULTIPLE_LANGUAGES: 'Multiple languages',
    CHROMECAST: 'Chromecast',
    AIRPLAY: 'Airplay'
  },
  ARIA_LABELS: {
    VIDEO_PLAYER: 'Video Player',
    START_PLAYBACK: 'Start Playback',
    PLAY: 'Play',
    PAUSE: 'Pause',
    REPLAY: 'Replay',
    MUTE: 'Mute',
    MUTED: 'Player is muted',
    UNMUTE: 'Unmute',
    CLOSED_CAPTIONS: 'Closed Captions',
    VIDEO_QUALITY: 'Video Quality',
    AUTO_QUALITY: 'Auto',
    MULTI_AUDIO: 'Multi Audio',
    FULLSCREEN: 'Fullscreen',
    EXIT_FULLSCREEN: 'Exit Fullscreen',
    SEEK_SLIDER: 'Seek slider',
    VOLUME_SLIDER: 'Volume',
    VOLUME_PERCENT: "".concat(MACROS.VOLUME, "% volume"),
    TIME_DISPLAY: "".concat(MACROS.CURRENT_TIME, " of ").concat(MACROS.TOTAL_TIME),
    TIME_DISPLAY_LIVE: 'Live video',
    TIME_DISPLAY_DVR: "".concat(MACROS.CURRENT_TIME, " of ").concat(MACROS.TOTAL_TIME, " live video"),
    CLOSE: 'Close',
    TOGGLE_CLOSED_CAPTIONS: 'Toggle Closed Captions',
    CAPTION_OPTIONS: 'Closed Caption Options',
    STEREO_ON: 'Stereoscopic',
    STEREO_OFF: 'Monoscopic',
    MORE_OPTIONS: 'More Options',
    PREVIOUS_OPTIONS: 'Previous Options',
    SLIDER_VALUE_TEXT: "".concat(MACROS.PERCENT, "% ").concat(MACROS.SETTING),
    LANGUAGE_MENU: 'Language',
    CAPTION_OPACITY_MENU: 'Caption Opacity',
    TEXT_COLOR_MENU: 'Text Color',
    BACKGROUND_COLOR_MENU: 'Background Color',
    WINDOW_COLOR_MENU: 'Window Color',
    FONT_TYPE_MENU: 'Font Type',
    FONT_SIZE_MENU: 'Font Size',
    TEXT_ENHANCEMENTS_MENU: 'Text Enhancements',
    TOGGLE_MULTI_AUDIO: 'Toggle Multi Audio',
    MULTI_AUDIO_OPTIONS: 'Closed Multi Audio Options',
    PREVIOUS_VIDEO: 'Previous Video',
    NEXT_VIDEO: 'Next Video',
    SKIP_BACKWARD: "Rewind ".concat(MACROS.SECONDS, " Seconds"),
    SKIP_FORWARD: "Skip ".concat(MACROS.SECONDS, " Seconds Forward"),
    PLAYBACK_SPEED: "".concat(MACROS.RATE, "x Playback Speed"),
    PLAYBACK_SPEED_OPTION: 'Speed',
    NORMAL_SPEED: 'Normal Speed',
    CHROMECAST: 'Chromecast',
    AIRPLAY: 'Airplay',
    MOVE_LEFT: 'Move left',
    MOVE_RIGHT: 'Move right',
    MOVE_UP: 'Move up',
    MOVE_DOWN: 'Move down',
    MOVE_CENTER: 'Reset View'
  },
  CONTROL_BAR_KEYS: {
    PLAY_PAUSE: 'playPause',
    LIVE: 'live',
    VOLUME: 'volume',
    TIME_DURATION: 'timeDuration',
    FLEXIBLE_SPACE: 'flexibleSpace',
    MORE_OPTIONS: 'moreOptions',
    QUALITY: 'quality',
    DISCOVERY: 'discovery',
    CLOSED_CAPTION: 'closedCaption',
    AUDIO_AND_CC: 'audioAndCC',
    PLAYBACK_SPEED: 'playbackSpeed',
    SHARE: 'share',
    STEREOSCOPIC: 'stereoscopic',
    FULLSCREEN: 'fullscreen',
    LOGO: 'logo',
    CHROMECAST: 'chromecast',
    SKIP_CONTROLS: 'skipControls',
    AIRPLAY: 'airPlay'
  },
  VR: {
    KEYS: {
      MOVE_LEFT: 'moveLeft',
      MOVE_RIGHT: 'moveRight',
      MOVE_UP: 'moveUp',
      MOVE_DOWN: 'moveDown',
      MOVE_CENTER: 'moveCenter'
    }
  },
  ARIA_ROLES: {
    PRESENTATION: 'presentation',
    SLIDER: 'slider',
    MENU: 'menu',
    MENU_ITEM: 'menuitem',
    MENU_ITEM_RADIO: 'menuitemradio',
    MENU_ITEM_CHECKBOX: 'menuitemcheckbox',
    CHECKBOX: 'checkbox',
    TAB_LIST: 'tablist',
    TAB: 'tab',
    TAB_PANEL: 'tabpanel'
  },
  KEYBD_FOCUS_ID_ATTR: 'data-focus-id',
  FOCUS_IDS: {
    SCRUBBER_BAR: 'scrubberBar',
    VOLUME_CONTROLS: 'volumeControls',
    VOLUME_SLIDER: 'volumeSlider',
    QUALITY_LEVEL: 'qualityLevel',
    AUTO_QUALITY: 'autoQuality',
    CLOSE: 'close',
    MULTI_AUDIO: 'multiAudio',
    MENU_ITEM: 'menuItem'
  },
  SKIP_CTRLS_KEYS: {
    PREVIOUS_VIDEO: 'previousVideo',
    SKIP_BACKWARD: 'skipBackward',
    SKIP_FORWARD: 'skipForward',
    NEXT_VIDEO: 'nextVideo',
    PLAY_PAUSE: 'playPause'
  },
  A11Y_CTRLS: {
    SEEK_DELTA: 5,
    VOLUME_CHANGE_DELTA: 10
  },
  KEYCODES: {
    SPACE_KEY: 32,
    LEFT_ARROW_KEY: 37,
    RIGHT_ARROW_KEY: 39,
    UP_ARROW_KEY: 38,
    DOWN_ARROW_KEY: 40,
    ESCAPE_KEY: 27,
    ENTER_KEY: 13,
    A: 65,
    // eslint-disable-line id-length
    D: 68,
    // eslint-disable-line id-length
    W: 87,
    // eslint-disable-line id-length
    S: 83 // eslint-disable-line id-length

  },
  DIRECTIONS: {
    LEFT: 'left',
    RIGHT: 'right',
    UP: 'up',
    DOWN: 'down'
  },
  // KeyboardEvent's which and keyCode properties are deprecated.
  // It's a good idea to use KeyboardEvent.key moving forward even though React
  // synthetic events normalize event data.
  KEY_VALUES: {
    ENTER: 'Enter',
    TAB: 'Tab',
    CONTROL: 'Control',
    ALT: 'Alt',
    ESCAPE: 'Escape',
    SPACE: ' ',
    // yep
    ARROW_UP: 'ArrowUp',
    ARROW_DOWN: 'ArrowDown',
    ARROW_LEFT: 'ArrowLeft',
    ARROW_RIGHT: 'ArrowRight',
    HOME: 'Home',
    END: 'End'
  },
  UI: {
    defaultScrubberBarHeight: 4,
    POPOVER_SCROLL_RATE: 0.6,
    DEFAULT_SCRUBBERBAR_LEFT_RIGHT_PADDING: 15,
    MAX_BUFFERING_SPINNER_DELAY: 60000,
    // Max allowed value of bufferingSpinnerDelay in milliseconds
    DEFAULT_SKIP_BACKWARD_TIME: 10,
    // In seconds
    DEFAULT_SKIP_FORWARD_TIME: 10,
    // In seconds
    MIN_SKIP_TIME: 1,
    // Min allowed value for skip controls, in seconds
    MAX_SKIP_TIME: 99,
    // Max allowed value for skip controls, in seconds
    // If the previous video button is clicked more than once, this
    // is the maximum amount of time (in milliseconds) between calls that would
    // cause the controller to request the previous video instead of rewinding
    REQUEST_PREVIOUS_TIME_THRESHOLD: 1500,
    // When the previous video button is clicked, if the playhead value (in seconds) is
    // below this constant the controller will request the previous video instead of rewinding
    REQUEST_PREVIOUS_PLAYHEAD_THRESHOLD: 2,
    AUDIO_ONLY_DEFAULT_HEIGHT: '138px',
    AUDIO_ONLY_WITH_COVER_HEIGHT: '500px'
  },
  PLAYBACK_SPEED: {
    DEFAULT_VALUE: 1,
    // Default playback rate
    DEFAULT_OPTIONS: [0.5, 0.75, 1, 1.25, 1.5, 2],
    // eslint-disable-line no-magic-numbers
    MIN: 0.5,
    MAX: 2
  },
  TOOLTIP_ALIGNMENT: {
    LEFT: 'left',
    CENTER: 'center',
    RIGHT: 'right'
  },
  WATERMARK: {
    DEFAULT_SCALING_PERCENTAGE: 10
  },
  AD_CLICK_SOURCE: {
    VIDEO_WINDOW: 'videoWindow',
    LEARN_MORE_BUTTON: 'learnMoreButton',
    OVERLAY: 'overlay'
  },
  PAUSE_REASON: {
    TRANSITION: 'transition'
  },
  MEDIA_TYPE: {
    HTML5: 'html5',
    FLASH: 'flash',
    VIDEO: 'video',
    OBJECT: 'object'
  },
  LANGUAGE: {
    ENGLISH: 'en',
    SPANISH: 'es',
    CHINESE: 'zh',
    JAPANESE: 'ja',
    NOT_MATCHED: 'und',
    UNDEFINED_LANGUAGE: 'und',
    NO_LINGUISTIC_CONTENT: 'zxx',
    UNCODED_LANGUAGES: 'mis',
    MULTIPLE_LANGUAGES: 'mul'
  },
  ERROR_CODE: {
    NETWORK: 'network',
    SAS: 'sas',
    GEO: 'geo',
    DOMAIN: 'domain',
    FUTURE: 'future',
    PAST: 'past',
    DEVICE: 'device',
    PROXY: 'proxy',
    CONCURRENT_STREAMS: 'concurrent_streams',
    DEVICE_BINDING_FAILED: 'device_binding_failed',
    DEVICE_ID_TOO_LONG: 'device_id_too_long',
    DEVICE_INVALID_AUTH_TOKEN: 'device_invalid_auth_token',
    DEVICE_LIMIT_REACHED: 'device_limit_reached',
    NON_REGISTERED_DEVICE: 'non_registered_device',
    DRM_GENERAL_FAILURE: 'drm_general_failure',
    DRM_SERVER_ERROR: 'drm_server_error',
    INVALID_ENTITLEMENTS: 'invalid_entitlements',
    INVALID_HEARTBEAT: 'invalid_heartbeat',
    CONTENT_TREE: 'content_tree',
    METADATA: 'metadata',
    PLAYBACK: 'playback',
    STREAM: 'stream',
    LIVESTREAM: 'livestream',
    NETWORK_ERROR: 'network_error',
    UNPLAYABLE_CONTENT: 'unplayable_content',
    INVALID_EXTERNAL_ID: 'invalid_external_id',
    EMPTY_CHANNEL: 'empty_channel',
    EMPTY_CHANNEL_SET: 'empty_channel_set',
    CHANNEL_CONTENT: 'channel_content',
    UNSUPPORTED_ENCODING: 'unsupported_encoding',
    UNABLE_TO_CREATE_VIDEO_ELEMENT: 'unable_to_create_video_element'
  },
  CLOSED_CAPTIONS: {
    NO_LANGUAGE: 'none'
  },
  QUALITY_SELECTION: {
    AUTO_QUALITY: 'auto',
    FORMAT: {
      RESOLUTION: 'resolution',
      BITRATE: 'bitrate'
    },
    TEXT: {
      RESOLUTION_BITRATE: "".concat(MACROS.RESOLUTION, "p (").concat(MACROS.BITRATE, ")"),
      RESOLUTION_ONLY: "".concat(MACROS.RESOLUTION, "p"),
      TIERED_RESOLUTION_ONLY: "".concat(MACROS.RESOLUTION, "p (").concat(MACROS.RESOLUTION_TIER, ")"),
      BITRATE_ONLY: MACROS.BITRATE
    }
  },
  RESOLUTION_TIER: {
    TWO: ['Low', 'High'],
    THREE: ['Low', 'Medium', 'High']
  },
  ERROR_MESSAGE: {
    network: {
      name: 'OO.ERROR.API.NETWORK',
      title: 'NETWORK ERROR',
      description: 'Cannot Contact Server'
    },
    sas: {
      name: 'OO.ERROR.API.SAS.GENERIC',
      title: 'SAS ERROR',
      description: 'Invalid Authorization Response'
    },
    geo: {
      name: 'OO.ERROR.API.SAS.GEO',
      title: 'SAS GEO ERROR',
      description: 'This video is not authorized in your location'
    },
    domain: {
      name: 'OO.ERROR.API.SAS.DOMAIN',
      title: 'SAS DOMAIN ERROR',
      description: 'This video is not authorized for your domain'
    },
    future: {
      name: 'OO.ERROR.API.SAS.FUTURE',
      title: 'VIDEO COMING SOON!',
      description: 'This video is not available yet',
      action: 'You may need to refresh the page to access the video after it becomes available'
    },
    past: {
      name: 'OO.ERROR.API.SAS.PAST',
      title: 'VIDEO NO LONGER AVAILABLE',
      description: 'This video is no longer available'
    },
    device: {
      name: 'OO.ERROR.API.SAS.DEVICE',
      title: 'SAS DEVICE ERROR',
      description: 'This video is not authorized for playback on this device'
    },
    proxy: {
      name: 'OO.ERROR.API.SAS.PROXY',
      title: 'SAS PROXY ERROR',
      description: 'An anonymous proxy was detected. Please disable the proxy and retry.'
    },
    concurrent_streams: {
      name: 'OO.ERROR.API.SAS.CONCURRENT_STREAMS',
      title: 'CONCURRENT STREAMS NUMBER EXCEEDED',
      description: 'You have exceeded the maximum number of concurrent streams'
    },
    device_binding_failed: {
      name: 'OO.ERROR.API.SAS.ERROR.DEVICE_BINDING_FAILED',
      title: 'DEVICE BINDING ERROR',
      description: 'Device binding failed'
    },
    device_id_too_long: {
      name: 'OO.ERROR.API.SAS.ERROR.DEVICE_ID_TOO_LONG',
      title: 'DEVICE ID TOO LONG',
      description: 'Device ID is too long'
    },
    device_invalid_auth_token: {
      name: 'OO.ERROR.API.SAS.ERROR.DEVICE_INVALID_AUTH_TOKEN',
      title: 'INVALID PLAYER TOKEN',
      description: 'Invalid Ooyala Player token'
    },
    device_limit_reached: {
      name: 'OO.ERROR.API.SAS.ERROR.ERROR_DEVICE_LIMIT_REACHED',
      title: 'AUTHORIZATION ERROR',
      description: 'Unable to access this content, as the maximum number of devices' + ' has already been authorized. Error Code 29',
      action: 'Please remove one of your authorized devices to enable this device.'
    },
    non_registered_device: {
      name: 'OO.ERROR.API.SAS.ERROR.ERROR_NON_REGISTERED_DEVICE',
      title: 'AUTHORIZATION ERROR',
      description: 'Unable to register this device to this account, as the maximum' + ' number of authorized devices has already been reached. Error Code 22',
      action: 'Please remove one of your authorized devices to enable this device.'
    },
    drm_general_failure: {
      name: 'OO.ERROR.API.SAS.ERROR_DRM_GENERAL_FAILURE',
      title: 'LICENSE ERROR',
      description: 'General error acquiring license'
    },
    drm_server_error: {
      name: 'OO.ERROR.API.SAS.ERROR_DRM_RIGHTS_SERVER_ERROR',
      title: 'DRM SERVER ERROR',
      description: 'DRM server error'
    },
    invalid_entitlements: {
      name: 'OO.ERROR.API.SAS.ERROR_INVALID_ENTITLEMENTS',
      title: 'INVALID ENTITLEMENTS ERROR',
      description: 'User Entitlement Terminated - Stream No Longer Active for the User'
    },
    invalid_heartbeat: {
      name: 'OO.ERROR.API.SAS.INVALID_HEARTBEAT',
      title: 'INVALID HEARTBEAT',
      description: 'Invalid heartbeat response'
    },
    content_tree: {
      name: 'OO.ERROR.API.CONTENT_TREE',
      title: 'INVALID CONTENT',
      description: 'Invalid Content'
    },
    metadata: {
      name: 'OO.ERROR.API.METADATA',
      title: 'INVALID METADATA',
      description: 'Invalid Metadata'
    },
    playback: {
      name: 'OO.ERROR.PLAYBACK.GENERIC',
      title: 'PLAYBACK ERROR',
      description: 'Could not play the content'
    },
    stream: {
      name: 'OO.ERROR.PLAYBACK.STREAM',
      title: 'PLAYBACK STREAM ERROR',
      description: 'This video isn\'t encoded for your device'
    },
    livestream: {
      name: 'OO.ERROR.PLAYBACK.LIVESTREAM',
      title: 'PLAYBACK LIVESTREAM ERROR',
      description: 'Live stream is off air'
    },
    network_error: {
      name: 'OO.ERROR.PLAYBACK.NETWORK',
      title: 'PLAYBACK NETWORK ERROR',
      description: 'Network connection temporarily lost'
    },
    unplayable_content: {
      name: 'OO.ERROR.UNPLAYABLE_CONTENT',
      title: 'UNPLAYABLE CONTENT ERROR',
      description: 'This video is not playable on this player'
    },
    invalid_external_id: {
      name: 'OO.ERROR.INVALID.EXTERNAL_ID',
      title: 'INVALID EXTERNAL ID',
      description: 'Invalid External ID'
    },
    empty_channel: {
      name: 'OO.ERROR.EMPTY_CHANNEL',
      title: 'EMPTY CHANNEL ERROR',
      description: 'This channel is empty'
    },
    empty_channel_set: {
      name: 'OO.ERROR.EMPTY_CHANNEL_SET',
      title: 'EMPTY CHANNEL SET ERROR',
      description: 'This channel set is empty'
    },
    channel_content: {
      name: 'OO.ERROR.CHANNEL_CONTENT',
      title: 'CHANNEL CONTENT ERROR',
      description: 'This channel is not playable at this time'
    },
    unsupported_encoding: {
      name: 'OO.ERROR.VC.UNSUPPORTED_ENCODING',
      title: 'UNSUPPORTED CONTENT TYPE',
      description: 'This video encoding is not supported on your device'
    },
    unable_to_create_video_element: {
      name: 'OO.ERROR.VC.UNABLE_TO_CREATE_VIDEO_ELEMENT',
      description: 'Something happened while we were trying to play your video! ' + 'Click replay or simply reload your page.'
    }
  },
  THUMBNAIL: {
    MAX_VR_THUMBNAIL_BG_WIDTH: 380,
    MAX_VR_THUMBNAIL_CAROUSEL_BG_WIDTH: 320,
    THUMBNAIL_VR_RATIO: 4,
    THUMBNAIL_CAROUSEL_VR_RATIO: 3
  },
  CLASS_NAMES: {
    SELECTABLE_SCREEN: 'oo-state-screen-selectable'
  }
}; // Maps menu options to their respective screens

CONSTANTS.MENU_OPTIONS_SCREENS = {};
CONSTANTS.MENU_OPTIONS_SCREENS[CONSTANTS.MENU_OPTIONS.VIDEO_QUALITY] = CONSTANTS.SCREEN.VIDEO_QUALITY_SCREEN;
CONSTANTS.MENU_OPTIONS_SCREENS[CONSTANTS.MENU_OPTIONS.CLOSED_CAPTIONS] = CONSTANTS.SCREEN.CLOSED_CAPTION_SCREEN; // eslint-disable-line

CONSTANTS.MENU_OPTIONS_SCREENS[CONSTANTS.MENU_OPTIONS.MULTI_AUDIO] = CONSTANTS.SCREEN.MULTI_AUDIO_SCREEN;
CONSTANTS.MENU_OPTIONS_SCREENS[CONSTANTS.MENU_OPTIONS.PLAYBACK_SPEED] = CONSTANTS.SCREEN.PLAYBACK_SPEED_SCREEN; // eslint-disable-line

module.exports = CONSTANTS;

},{"./macros":70}],70:[function(require,module,exports){
"use strict";

module.exports = {
  VOLUME: '{volume}',
  CURRENT_TIME: '{currentTime}',
  TOTAL_TIME: '{totalTime}',
  LEVEL: '{level}',
  RESOLUTION: '{resolution}',
  RESOLUTION_TIER: '{resolutionTier}',
  BITRATE: '{bitrate}',
  PERCENT: '{percent}',
  SETTING: '{setting}',
  SECONDS: '{seconds}',
  RATE: '{rate}'
};

},{}],71:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _screenfull = _interopRequireDefault(require("screenfull"));

var _utils = _interopRequireDefault(require("./components/utils"));

var _constants = _interopRequireDefault(require("./constants/constants"));

var _accessibilityControls = _interopRequireDefault(require("./components/accessibilityControls"));

var _skin = _interopRequireDefault(require("./skin"));

var _skin2 = _interopRequireDefault(require("../config/skin"));

var _en = _interopRequireDefault(require("../config/languageFiles/en.json"));

var _es = _interopRequireDefault(require("../config/languageFiles/es.json"));

var _ja = _interopRequireDefault(require("../config/languageFiles/ja.json"));

var _ko = _interopRequireDefault(require("../config/languageFiles/ko.json"));

var _zh = _interopRequireDefault(require("../config/languageFiles/zh.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Localization = {
  languageFiles: {
    en: _en.default,
    es: _es.default,
    ja: _ja.default,
    ko: _ko.default,
    zh: _zh.default
  }
};
/**
 * Instantiate the controller
 * @param {Object} OO - the common Ooyala namespace
 * @param {Object} _ - underscore lib
 * @param {Object} $ - jQuery lib
 * @returns {Object} react component
 */

function controller(OO, _, $) {
  // Check if the player is at least v4. If not, the skin cannot load.
  var UNSUPPORTED_PLAYER_VERSION = 3;

  if (!OO.playerParams.core_version || OO.playerParams.core_version <= UNSUPPORTED_PLAYER_VERSION) {
    console.error('Html5Skin requires at least player version 4.');
    return null;
  }

  if (OO.publicApi && OO.publicApi.VERSION) {
    // This variable gets filled in by the build script
    OO.publicApi.VERSION.skin = {
      "releaseVersion": "4.32.8",
      "rev": "b2e6e5ef6c164c9723b9547e59ab155df3765777"
    }; // eslint-disable-line
  }
  /**
   * The constructor of Html5Skin
   * @param {Object} mb - the message bus object
   * @param {string} id - unique id of the skin
   */


  function Html5Skin(mb, id) {
    this.mb = mb;
    this.id = id;
    this.accessibilityControls = null;
    this.videoVrSource = null;
    this.videoVr = false;
    this.captionDirection = '';
    this.isNewVrVideo = true;
    this.vrMobileOrientationChecked = false;
    this.checkDeviceOrientation = false;
    this.isVrStereo = false;
    this.toggleButtons = {};
    this.handleVrMobileOrientation = this.handleVrMobileOrientation.bind(this);
    this.languageList = [];
    this.state = {
      playerParam: {},
      skinMetaData: {},
      attributes: {},
      persistentSettings: {
        closedCaptionOptions: {}
      },
      assetId: null,
      contentTree: {},
      thumbnails: null,
      isLiveStream: false,
      screenToShow: null,
      playerState: null,
      currentVideoId: null,
      discoveryData: null,
      forceCountDownTimerOnEndScreen: false,
      isPlayingAd: false,
      adOverlayUrl: null,
      showAdOverlay: false,
      showAdOverlayCloseButton: false,
      showAdControls: true,
      showAdMarquee: true,
      isOoyalaAds: false,
      afterOoyalaAd: false,
      configLoaded: false,
      config: {},
      customSkinJSON: {},
      fullscreen: false,
      pauseAnimationDisabled: false,
      adPauseAnimationDisabled: true,
      pausedCallback: null,
      seeking: false,
      queuedPlayheadUpdate: null,
      accessibilityControlsEnabled: false,
      duration: 0,
      mainVideoDuration: 0,
      adVideoDuration: 0,
      adStartTime: 0,
      adPausedTime: 0,
      adEndTime: 0,
      adWasPaused: false,
      adPauseDuration: 0,
      adRemainingTime: 0,
      elementId: null,
      mainVideoContainer: null,
      mainVideoInnerWrapper: null,
      mainVideoElement: null,
      mainVideoElementContainer: null,
      // TODO: Temporary workaround for PBW-6954
      mainVideoMediaType: null,
      mainVideoAspectRatio: 0,
      pluginsElement: null,
      pluginsClickElement: null,
      buffering: false,
      // Do NOT set manually, call setBufferingState
      mainVideoBuffered: null,
      mainVideoPlayhead: 0,
      adVideoPlayhead: 0,
      focusedElement: null,
      focusedControl: null,
      // Stores the id of the control button element that is currently focused
      currentAdsInfo: {
        currentAdItem: null,
        numberOfAds: 0,
        skipAdButtonEnabled: false
      },
      closedCaptionsInfoCache: {},
      closedCaptionOptions: {
        enabled: null,
        language: null,
        availableLanguages: null,
        cueText: null,
        showPopover: false,
        autoFocus: false,
        textColor: null,
        windowColor: null,
        backgroundColor: null,
        textOpacity: null,
        backgroundOpacity: null,
        windowOpacity: null,
        fontType: null,
        fontSize: null,
        textEnhancement: null
      },
      videoQualityOptions: {
        availableBitrates: null,
        selectedBitrate: null,
        showPopover: false,
        autoFocus: false
      },
      volumeState: {
        volume: 1,
        muted: false,
        volumeSliderVisible: false,
        mutingForAutoplay: false,
        unmuteIconCollapsed: false
      },
      upNextInfo: {
        upNextData: null,
        countDownFinished: false,
        countDownCancelled: false,
        timeToShow: 0,
        showing: false,
        delayedSetEmbedCodeEvent: false,
        delayedContentData: null
      },
      scrubberBar: {
        isHovering: false
      },
      skipControls: {
        hasPreviousVideos: false,
        hasNextVideos: false,
        requestPreviousTimestamp: 0
      },
      playbackSpeedOptions: {
        currentSpeed: _constants.default.PLAYBACK_SPEED.DEFAULT_VALUE,
        showPopover: false,
        autoFocus: false
      },
      moreOptionsItems: null,
      isMobile: false,
      controlBarVisible: true,
      forceControlBarVisible: false,
      timer: null,
      bufferingTimer: null,
      errorCode: null,
      isSubscribed: false,
      isPlaybackReadySubscribed: false,
      isInitialPlay: false,
      initialPlayHasOccurred: false,
      isFullScreenSupported: false,
      isVideoFullScreenSupported: false,
      isFullWindow: false,
      autoPauseDisabled: false,
      isClickedOutside: false,
      vrViewingDirection: {
        yaw: 0,
        roll: 0,
        pitch: 0
      },
      hideMultiAudioIcon: false,
      multiAudio: null,
      multiAudioOptions: {
        enabled: null,
        showPopover: false,
        autoFocus: false
      },
      cast: {
        showButton: false,
        connected: false,
        device: '',
        isReceiver: false
      },
      airplay: {
        available: false,
        statusIcon: _constants.default.AIRPLAY_STATE.DISCONNECTED
      },
      audioOnly: false
    };
    this.init();
  }

  Html5Skin.prototype = {
    init: function init() {
      // player events
      this.mb.subscribe(OO.EVENTS.PLAYER_CREATED, 'customerUi', _.bind(this.onPlayerCreated, this));
      this.mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_CREATED, 'customerUi', _.bind(this.onVcVideoElementCreated, this));
      this.mb.subscribe(OO.EVENTS.DESTROY, 'customerUi', _.bind(this.onPlayerDestroy, this));
      this.mb.subscribe(OO.EVENTS.SET_EMBED_CODE, 'customerUi', _.bind(this.onSetEmbedCode, this));
      this.mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED, 'customerUi', _.bind(this.onEmbedCodeChanged, this));
      //this.mb.subscribe(OO.EVENTS.EMBED_CODE_CHANGED_AFTER_OOYALA_AD, 'customerUi', _.bind(this.onEmbedCodeChangedAfterOoyalaAd, this));
      this.mb.subscribe(OO.EVENTS.CONTENT_TREE_FETCHED, 'customerUi', _.bind(this.onContentTreeFetched, this));
      this.mb.subscribe(OO.EVENTS.THUMBNAILS_FETCHED, 'customerUi', _.bind(this.onThumbnailsFetched, this)); // xenia: to be replaced by a more appropriate event

      this.mb.subscribe(OO.EVENTS.AUTHORIZATION_FETCHED, 'customerUi', _.bind(this.onAuthorizationFetched, this));
      this.mb.subscribe(OO.EVENTS.SKIN_METADATA_FETCHED, 'customerUi', _.bind(this.onSkinMetaDataFetched, this));
      this.mb.subscribe(OO.EVENTS.METADATA_FETCHED, 'customerUi', _.bind(this.onMetaDataFetched, this));
      //this.mb.subscribe(OO.EVENTS.ATTRIBUTES_FETCHED, 'customerUi', _.bind(this.onAttributesFetched, this));
      this.mb.subscribe(OO.EVENTS.ASSET_CHANGED, 'customerUi', _.bind(this.onAssetChanged, this));
      this.mb.subscribe(OO.EVENTS.ASSET_UPDATED, 'customerUi', _.bind(this.onAssetUpdated, this));
      this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'customerUi', _.bind(this.onPlaybackReady, this));
      //this.mb.subscribe(OO.EVENTS.VIDEO_VR, 'customerUi', _.bind(this.onSetVideoVr, this));
      this.mb.subscribe(OO.EVENTS.VIDEO_TYPE_CHANGED, 'customerUi', _.bind(this.onClearVideoType, this));
      //this.mb.subscribe(OO.EVENTS.VR_DIRECTION_CHANGED, 'customerUi', _.bind(this.setVrViewingDirection, this));
      //this.mb.subscribe(OO.EVENTS.RECREATING_UI, 'customerUi', _.bind(this.recreatingUI, this));
      this.mb.subscribe(OO.EVENTS.POSITION_IN_PLAYLIST_DETERMINED, 'customerUi', _.bind(this.onPositionInPlaylistDetermined, this));
      this.mb.subscribe(OO.EVENTS.ERROR, 'customerUi', _.bind(this.onErrorEvent, this));
      this.mb.addDependent(OO.EVENTS.PLAYBACK_READY, OO.EVENTS.UI_READY);
      //this.mb.subscribe(OO.EVENTS.CHROMECAST_START_CAST, 'customerUi', _.bind(this.onChromecastStartCast, this));
      //this.mb.subscribe(OO.EVENTS.CHROMECAST_END_CAST, 'customerUi', _.bind(this.onChromecastEndCast, this));
      this.mb.subscribe(OO.EVENTS.AIRPLAY.AVAILABILITY_CHANGED, 'customerUi', this.onAirplayAvailabilityChanged.bind(this));
      this.mb.subscribe(OO.EVENTS.AIRPLAY.CONNECTION_CHANGED, 'customerUi', this.onAirplayConnectionChanged.bind(this));
      this.mb.subscribe(OO.EVENTS.AIRPLAY.SESSION_RESUMED, 'customerUi', this.onAirplaySessionResumed.bind(this));
      this.state.isPlaybackReadySubscribed = true;
      // Binding custom events. Will be triggered from client code
      this.mb.subscribe('CcLanguageChanged', 'customerUi', _.bind(this.onClosedCaptionLanguageChange, this));
      this.mb.subscribe('CcHide', 'customerUi', _.bind(this.onHideCC, this));
    },
    subscribeBasicPlaybackEvents: function subscribeBasicPlaybackEvents() {
      if (!this.state.isSubscribed) {
        this.mb.subscribe(OO.EVENTS.SEND_QUALITY_CHANGE, 'customerUi', _.bind(this.receiveVideoQualityChangeEvent, this));
        this.mb.subscribe(OO.EVENTS.INITIAL_PLAY, 'customerUi', _.bind(this.onInitialPlay, this));
        this.mb.subscribe(OO.EVENTS.VC_PLAY, 'customerUi', _.bind(this.onVcPlay, this));
        this.mb.subscribe(OO.EVENTS.VC_PLAYED, 'customerUi', _.bind(this.onVcPlayed, this));
        this.mb.subscribe(OO.EVENTS.VC_PLAYING, 'customerUi', _.bind(this.onPlaying, this));
        this.mb.subscribe(OO.EVENTS.VC_PAUSED, 'customerUi', _.bind(this.onPaused, this));
        this.mb.subscribe(OO.EVENTS.VC_PAUSE, 'customerUi', _.bind(this.onPause, this));
        this.mb.subscribe(OO.EVENTS.PLAYED, 'customerUi', _.bind(this.onPlayed, this));
        this.mb.subscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, 'customerUi', _.bind(this.onPlayheadTimeChanged, this));
        this.mb.subscribe(OO.EVENTS.SEEK, 'customerUi', this.onSeek.bind(this));
        this.mb.subscribe(OO.EVENTS.SEEKED, 'customerUi', _.bind(this.onSeeked, this));
        this.mb.subscribe(OO.EVENTS.BUFFERING, 'customerUi', _.bind(this.onBuffering, this));
        this.mb.subscribe(OO.EVENTS.BUFFERED, 'customerUi', _.bind(this.onBuffered, this));
        this.mb.subscribe(OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE, 'customerUi', _.bind(this.onClosedCaptionsInfoAvailable, this));
        this.mb.subscribe(OO.EVENTS.MULTI_AUDIO_FETCHED, 'customerUi', _.bind(this.onMultiAudioFetched, this));
        this.mb.subscribe(OO.EVENTS.MULTI_AUDIO_CHANGED, 'customerUi', _.bind(this.onMultiAudioChanged, this));
        this.mb.subscribe(OO.EVENTS.BITRATE_INFO_AVAILABLE, 'customerUi', _.bind(this.onBitrateInfoAvailable, this));
        this.mb.subscribe(OO.EVENTS.CLOSED_CAPTION_CUE_CHANGED, 'customerUi', _.bind(this.onClosedCaptionCueChanged, this));
        this.mb.subscribe(OO.EVENTS.CHANGE_CLOSED_CAPTION_LANGUAGE, 'customerUi', _.bind(this.onChangeClosedCaptionLanguage, this));
        this.mb.subscribe(OO.EVENTS.TOGGLE_CLOSED_CAPTIONS, 'customerUi', this.toggleClosedCaptionEnabled.bind(this));
        this.mb.subscribe(OO.EVENTS.VOLUME_CHANGED, 'customerUi', _.bind(this.onVolumeChanged, this));
        this.mb.subscribe(OO.EVENTS.MUTE_STATE_CHANGED, 'customerUi', _.bind(this.onMuteStateChanged, this));
        this.mb.subscribe(OO.EVENTS.PLAYBACK_SPEED_CHANGED, 'customerUi', _.bind(this.onPlaybackSpeedChanged, this));
        this.mb.subscribe(OO.EVENTS.VC_VIDEO_ELEMENT_IN_FOCUS, 'customerUi', _.bind(this.onVideoElementFocus, this));
        this.mb.subscribe(OO.EVENTS.REPLAY, 'customerUi', _.bind(this.onReplay, this));
        this.mb.subscribe(OO.EVENTS.ASSET_DIMENSION, 'customerUi', _.bind(this.onAssetDimensionsReceived, this));
        this.mb.subscribe(OO.EVENTS.HA_WILL_FAILOVER, 'customerUi', _.bind(this.onHAWillFailover, this));
        this.mb.subscribe(OO.EVENTS.HA_FAILOVER_COMPLETE, 'customerUi', _.bind(this.onHAFailoverComplete, this));
        this.mb.subscribe(OO.EVENTS.HA_FAILOVER_ERROR, 'customerUi', _.bind(this.onHAFailoverError, this)); // PLAYBACK_READY is a fundamental event in the init process that can be unsubscribed by errors.
        // If and only if such has occured, it needs a route to being resubscribed.

        if (!this.state.isPlaybackReadySubscribed) {
          this.mb.subscribe(OO.EVENTS.PLAYBACK_READY, 'customerUi', _.bind(this.onPlaybackReady, this));
        } // ad events


        if (_utils.default.canRenderSkin()) {
          // since iPhone < iOS10 is always playing in full screen and not showing our skin, don't need to render skin
          this.mb.subscribe(OO.EVENTS.ADS_PLAYED, 'customerUi', _.bind(this.onAdsPlayed, this));
          this.mb.subscribe(OO.EVENTS.WILL_PLAY_ADS, 'customerUi', _.bind(this.onWillPlayAds, this));
          this.mb.subscribe(OO.EVENTS.AD_POD_STARTED, 'customerUi', _.bind(this.onAdPodStarted, this));
          this.mb.subscribe(OO.EVENTS.WILL_PLAY_SINGLE_AD, 'customerUi', _.bind(this.onWillPlaySingleAd, this));
          this.mb.subscribe(OO.EVENTS.SINGLE_AD_PLAYED, 'customerUi', _.bind(this.onSingleAdPlayed, this));
          this.mb.subscribe(OO.EVENTS.PLAY_NONLINEAR_AD, 'customerUi', _.bind(this.onPlayNonlinearAd, this));
          this.mb.subscribe(OO.EVENTS.NONLINEAR_AD_PLAYED, 'customerUi', _.bind(this.closeNonlinearAd, this));
          this.mb.subscribe(OO.EVENTS.HIDE_NONLINEAR_AD, 'customerUi', _.bind(this.hideNonlinearAd, this));
          this.mb.subscribe(OO.EVENTS.SHOW_NONLINEAR_AD, 'customerUi', _.bind(this.showNonlinearAd, this));
          this.mb.subscribe(OO.EVENTS.SHOW_NONLINEAR_AD_CLOSE_BUTTON, 'customerUi', _.bind(this.showNonlinearAdCloseButton, this));
          this.mb.subscribe(OO.EVENTS.SHOW_AD_SKIP_BUTTON, 'customerUi', _.bind(this.onShowAdSkipButton, this));
          this.mb.subscribe(OO.EVENTS.SHOW_AD_CONTROLS, 'customerUi', _.bind(this.onShowAdControls, this));
          this.mb.subscribe(OO.EVENTS.SHOW_AD_MARQUEE, 'customerUi', _.bind(this.onShowAdMarquee, this));
        }
      }

      this.state.isSubscribed = true;
    },
    externalPluginSubscription: function externalPluginSubscription() {
      if (OO.EVENTS.DISCOVERY_API && OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED) {
        this.mb.subscribe(OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED, 'customerUi', _.bind(this.onRelatedVideosFetched, this));
      }
    },
    onHAWillFailover: function onHAWillFailover() {
      this.state.failoverInProgress = true;
      this.state.pauseAnimationDisabled = true;
      this.renderSkin();
    },
    onHAFailoverComplete: function onHAFailoverComplete() {
      this.state.failoverInProgress = false;
      this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
      this.renderSkin();
    },
    onHAFailoverError: function onHAFailoverError() {
      this.state.failoverInProgress = false; // this.state.screenToShow = CONSTANTS.SCREEN.ERROR_SCREEN;

      this.renderSkin();
    },

    /* --------------------------------------------------------------------
     event listeners from core player -> regulate skin STATE
     --------------------------------------------------------------------- */
    onPlayerCreated: function onPlayerCreated(event, elementId, params, settings) {
      var _this = this;

      // subscribe to plugin events
      this.externalPluginSubscription(); // set state variables

      this.state.mainVideoContainer = $("#".concat(elementId));
      this.state.mainVideoInnerWrapper = $("#".concat(elementId, " .innerWrapper"));
      this.state.playerParam = params;
      this.state.persistentSettings = settings;
      this.state.elementId = elementId;
      this.state.isMobile = _utils.default.isMobile();
      this.state.browserSupportsTouch = _utils.default.browserSupportsTouch();
      this.state.hideMultiAudioIcon = !!params.hideMultiAudioIcon; // initial DOM manipulation

      this.state.mainVideoContainer.addClass('oo-player-container');
      this.state.mainVideoInnerWrapper.addClass('oo-player');
      this.state.mainVideoInnerWrapper.attr('aria-label', _constants.default.ARIA_LABELS.VIDEO_PLAYER); // Setting the tabindex will let some screen readers recognize this element as a group
      // identified with the ARIA label above. We set it to -1 in order to prevent actual keyboard focus

      this.state.mainVideoInnerWrapper.attr('tabindex', '-1');

      if (!this.state.mainVideoInnerWrapper.children('.oo-player-skin').length) {
        this.state.mainVideoInnerWrapper.append('<div class=\'oo-player-skin\'></div>');
      }

      this.setInlineStyles(); // load player with page level config param if exist

      if (params.skin && params.skin.config) {
        $.getJSON(params.skin.config, function (data) {
          _this.state.customSkinJSON = data;

          _this.loadConfigData(_this.state.playerParam, _this.state.persistentSettings, data, _this.state.skinMetaData);
        });
      } else {
        this.loadConfigData(this.state.playerParam, this.state.persistentSettings, this.state.customSkinJSON, this.state.skinMetaData);
      }

      this.accessibilityControls = this.accessibilityControls || new _accessibilityControls.default(this); // keyboard support

      this.state.screenToShow = _constants.default.SCREEN.INITIAL_SCREEN;
    },
    isChromecastEnabled: function isChromecastEnabled(params) {
      var chromecastConfig = params.chromecast;
      var chromecastEnabled = !!_utils.default.getPropertyValue(chromecastConfig, 'enable', false);

      var appId = _utils.default.getPropertyValue(chromecastConfig, 'appId', '');

      var appIdValid = typeof appId === 'string' && appId !== '';

      if (chromecastEnabled && !OO.isSSL) {
        // eslint-disable-next-line no-console
        console.warn('Casting is enabled but impossible for http hosted pages.' + 'Serve the page through https for casting');
        return false;
      }

      return appIdValid && chromecastEnabled;
    },
    onChromecastStartCast: function onChromecastStartCast(event, deviceName) {
      OO.log('Chromecast Skin:', event, deviceName);
      this.state.pauseAnimationDisabled = true;
      this.renderSkin({
        cast: {
          connected: true,
          device: deviceName
        }
      });
    },
    onChromecastEndCast: function onChromecastEndCast(event) {
      OO.log('Chromecast Skin:', event);
      this.state.pauseAnimationDisabled = false;
      this.renderSkin({
        cast: {
          connected: false,
          device: ''
        }
      });
    },
    onAirplayAvailabilityChanged: function onAirplayAvailabilityChanged(eventName, isAvailable) {
      this.state.airplay.available = isAvailable;
      this.renderSkin();
    },
    onAirplayConnectionChanged: function onAirplayConnectionChanged(eventName, isConnected) {
      var _CONSTANTS$AIRPLAY_ST = _constants.default.AIRPLAY_STATE,
          CONNECTED = _CONSTANTS$AIRPLAY_ST.CONNECTED,
          DISCONNECTED = _CONSTANTS$AIRPLAY_ST.DISCONNECTED;
      this.state.airplay.statusIcon = isConnected ? CONNECTED : DISCONNECTED;
      this.renderSkin();
    },
    onAirplaySessionResumed: function onAirplaySessionResumed() {
      this.state.airplay.statusIcon = _constants.default.AIRPLAY_STATE.CONNECTED;
      this.renderSkin(); // emulate airplay button click to show targetPicker

      this.onAirplayButtonClicked();
    },
    onAirplayButtonClicked: function onAirplayButtonClicked() {
      this.mb.publish(OO.EVENTS.AIRPLAY.BUTTON_CLICKED);
    },

    /**
     * Set style "touch-action: none" only for video 360 on mobile devices
     * see details: https://stackoverflow.com/questions/42206645/konvajs-unable-to-preventdefault-inside-passive-event-listener-due-to-target-be
     */
    setInlineStyles: function setInlineStyles() {
      if (this.videoVr && this.state.isMobile) {
        this.state.mainVideoInnerWrapper.attr('style', 'touch-action: none');
      }
    },
    onSetVideoVr: function onSetVideoVr(event, params) {
      this.videoVr = true;
      this.setInlineStyles();

      if (params) {
        this.videoVrSource = params.source || null; // if we need video vr params
      }
    },

    /**
     * @description
     * Should be used with deviceorientation event listener.
     * Uses for video 360 on mobile devices for setting necessary coordinates (relevant with start device orientation)
     * Before playing this.vrMobileOrientationChecked is equal false,
     * if need to check value for device orientation set this.checkDeviceOrientation = true
     * @param {object} event The event object
     */
    handleVrMobileOrientation: function handleVrMobileOrientation(event) {
      if (!this.vrMobileOrientationChecked || this.checkDeviceOrientation) {
        var beta = event.beta,
            gamma = event.gamma;
        var yaw = this.state.vrViewingDirection.yaw;
        var pitch = this.state.vrViewingDirection.pitch;
        var dir = beta;

        var orientationType = _utils.default.getOrientationType();

        if (orientationType && (orientationType === 'landscape-secondary' || orientationType === 'landscape-primary')) {
          dir = gamma;
        }

        if (dir !== undefined && dir !== null && _utils.default.ensureNumber(dir, 0)) {
          var halfAngle = 90; // in degrees

          pitch += -halfAngle + Math.abs(Math.round(dir));
          var params = [yaw, 0, pitch];
          this.setVrViewingDirection(event, yaw, 0, pitch);
          this.onTouchMove(params);
        }

        this.checkDeviceOrientation = false;
      }
    },
    onClearVideoType: function onClearVideoType() {
      this.videoVr = false;
      this.videoVrSource = null;
      this.vrMobileOrientationChecked = false;
    },

    /**
     * Pass into onTouchMove current controller state values for vrViewingDirection
     */
    setControllerVrViewingDirection: function setControllerVrViewingDirection() {
      var vrViewingDirectionList = [this.state.vrViewingDirection.yaw, this.state.vrViewingDirection.roll, this.state.vrViewingDirection.pitch];
      this.onTouchMove(vrViewingDirectionList);
    },
    onVcVideoElementCreated: function onVcVideoElementCreated(event, params) {
      var videoElement = params.videoElement;
      videoElement = this.findMainVideoElement(videoElement); // add loadedmetadata event listener to main video element

      if (videoElement) {
        videoElement.addEventListener('loadedmetadata', this.metaDataLoaded.bind(this));
      }

      if (_utils.default.isIE10()) {
        videoElement.attr('controls', 'controls');
      }

      if (params.videoId === OO.VIDEO.MAIN) {
        // [PBW-6954]
        // We store mainVideoElementContainer as a temporary workaround in order to
        // make sure that we don't leave the oo-blur class on the wrong element (since
        // the skin can pick the container rather than the video due to a race condition).
        // Note that this could end up being the video itself, but it shouldn't matter.
        var videoElementContainer = params.videoElement;

        if (videoElementContainer && videoElementContainer.length) {
          var _videoElementContaine = videoElementContainer;

          var _videoElementContaine2 = _slicedToArray(_videoElementContaine, 1);

          videoElementContainer = _videoElementContaine2[0];
        }

        this.state.mainVideoElementContainer = videoElementContainer;
        this.state.mainVideoElement = videoElement;
        this.enableFullScreen();
        this.updateAspectRatio();
      }

      if (this.videoVr) {
        if (window.DeviceOrientationEvent) {
          window.addEventListener('deviceorientation', this.handleVrMobileOrientation, false);
        }
      }
    },
    // functions dependent on video metadata
    metaDataLoaded: function metaDataLoaded() {
      this.enableIosFullScreen();
    },
    onPlayerDestroy: function onPlayerDestroy() {
      var elementId = this.state.elementId;
      var mountNode = document.querySelector("#".concat(elementId, " .oo-player-skin")); // remove mounted Skin component

      if (mountNode) {
        _reactDom.default.unmountComponentAtNode(mountNode);
      }

      this.stopBufferingTimer();
      this.cleanUpEventListeners();
      document.removeEventListener('deviceorientation', this.handleVrMobileOrientation);
      this.mb = null;
    },
    cleanUpEventListeners: function cleanUpEventListeners() {
      this.accessibilityControls.cleanUp();
    },

    /**
     * Event handler for SET_EMBED_CODE message bus event.
     * @private
     * @param {string} event The event's name.
     * @param {string} embedCode The video embed code that will be set.
     */
    onSetEmbedCode: function onSetEmbedCode(event, embedCode) {
      // If a video has played and we're setting a new embed code it means that we
      // will be transitioning to a new video. We make sure to display the loading screen.
      if (this.state.initialPlayHasOccurred && this.state.assetId !== embedCode) {
        this.state.isPlayingAd = false;
        this.state.screenToShow = _constants.default.SCREEN.LOADING_SCREEN;
        this.renderSkin();
      }
    },
    onEmbedCodeChangedAfterOoyalaAd: function onEmbedCodeChangedAfterOoyalaAd(event, embedCode, options) {
      if (options) {
        this.state.playerParam = (0, _deepmerge.default)(this.state.playerParam, options);
      }

      this.state.isOoyalaAds = false;
      this.state.afterOoyalaAd = true;
    },
    onEmbedCodeChanged: function onEmbedCodeChanged(event, embedCode, options) {
      this.state.videoQualityOptions.availableBitrates = null;
      this.state.videoQualityOptions.selectedBitrate = null;
      this.state.closedCaptionOptions.availableLanguages = null;
      this.state.closedCaptionOptions.cueText = null;
      this.state.closedCaptionsInfoCache = {};
      this.state.discoveryData = null;
      this.state.thumbnails = null;
      this.state.afterOoyalaAd = false;
      this.state.currentVideoId = null;
      this.state.multiAudio = null;
      this.resetUpNextInfo(true);

      if (options && options.ooyalaAds === true) {
        this.state.isOoyalaAds = true;
      } else {
        this.state.isOoyalaAds = false;
      }

      this.state.assetId = embedCode;

      if (options) {
        this.state.playerParam = (0, _deepmerge.default)(this.state.playerParam, options);
      }

      this.subscribeBasicPlaybackEvents(); // New video starts at 0, duration is still unknown.
      // Setting this here will prevent flashing a full progress bar on video transitions.

      if (this.skin) {
        this.skin.updatePlayhead(0, 0, 0, 0).catch(function () {
          OO.log('onEmbedCodeChanged: Could not set new state for skin');
        });
      }
    },
    onAuthorizationFetched: function onAuthorizationFetched(event, authorization) {
      this.state.isLiveStream = authorization.streams[0].is_live_stream || this.state.contentTree.content_type === 'LiveStream';
    },
    onContentTreeFetched: function onContentTreeFetched(event, contentTree) {
      this.state.contentTree = contentTree;
      this.state.playerState = _constants.default.STATE.START;
      var mSecInSec = 1000;
      var duration = _utils.default.ensureNumber(contentTree.duration, 0) / mSecInSec;

      if (this.skin) {
        this.skin.updatePlayhead(null, duration).catch(function () {
          OO.log('onContentTreeFetched: Could not set new state for skin');
        });
      }

      if (this.state.audioOnly && contentTree.promo_image) {
        this.state.mainVideoContainer.height(_constants.default.UI.AUDIO_ONLY_WITH_COVER_HEIGHT);
      }
    },
    onSkinMetaDataFetched: function onSkinMetaDataFetched(event, skinMetaData) {
      this.state.skinMetaData = skinMetaData;
      this.loadConfigData(this.state.playerParam, this.state.persistentSettings, this.state.customSkinJSON, this.state.skinMetaData);
    },
    onMetaDataFetched: function onMetaDataFetched(event, metadata) {
      this.state.metadata = metadata;
    },
    onAttributesFetched: function onAttributesFetched(event, attributes) {
      this.state.attributes = attributes; // This is the first point at which we know whether the video is anamorphic or not,
      // apply fix if necessary

      this.trySetAnamorphicFixState(true);
    },
    onThumbnailsFetched: function onThumbnailsFetched(event, thumbnails) {
      this.state.thumbnails = thumbnails;
    },
    onAssetChanged: function onAssetChanged(event, asset) {
      this.state.videoQualityOptions.availableBitrates = null;
      this.state.closedCaptionOptions.availableLanguages = null;
      this.state.closedCaptionsInfoCache = {};
      this.state.discoveryData = null;
      this.subscribeBasicPlaybackEvents();
      this.resetUpNextInfo(true);
      this.state.isOoyalaAds = false;
      this.state.isLiveStream = asset.content.streams[0].is_live_stream || this.state.contentTree.content_type === 'LiveStream';
      var contentTree = {};
      contentTree.title = asset.content.title;
      contentTree.description = asset.content.description;
      contentTree.duration = asset.content.duration;
      contentTree.promo_image = asset.content.posterImages[0].url;
      this.state.contentTree = contentTree;
      this.state.playerState = _constants.default.STATE.START; // Make sure playhead is reset when we switch to a new video

      this.skin.updatePlayhead(0, contentTree.duration, 0, 0);
    },
    onAssetUpdated: function onAssetUpdated(event, asset) {
      this.resetUpNextInfo(true);
      this.state.isLiveStream = asset.content.streams[0].is_live_stream || this.state.contentTree.content_type === 'LiveStream';
      this.state.contentTree.title = asset.content.title;
      this.state.contentTree.description = asset.content.description;
      this.state.contentTree.duration = asset.content.duration;
      this.state.contentTree.promo_image = asset.content.posterImages[0].url;
      this.renderSkin({
        contentTree: this.state.contentTree
      });
    },
    isPlaying: function isPlaying() {
      return this.state.currentVideoId && this.state.playerState !== _constants.default.STATE.START && this.state.playerState !== _constants.default.STATE.ERROR;
    },
    onVolumeChanged: function onVolumeChanged(event, newVolume, videoId) {
      // ignore the volume change if it came from a source other than the currently playing video
      // but only if currently playing a video. This is to prevent desyncs between video volume
      // and the UI
      if (videoId && videoId !== this.state.currentVideoId && this.isPlaying()) {
        return;
      }

      if (newVolume <= 0) {
        this.state.volumeState.volume = 0;
      } else {
        this.state.volumeState.volume = newVolume;
      }

      this.renderSkin();
    },
    onMuteStateChanged: function onMuteStateChanged(event, muted, videoId, forAutoplay) {
      // ignore the volume change if it came from a source other than the currently playing video
      // but only if currently playing a video. This is to prevent desyncs between video volume
      // and the UI
      if (videoId && videoId !== this.state.currentVideoId && this.isPlaying()) {
        return;
      }

      this.state.volumeState.muted = muted;

      if (muted && forAutoplay) {
        this.state.volumeState.mutingForAutoplay = true;
      }

      if (!muted) {
        this.state.volumeState.mutingForAutoplay = false;
      }

      this.renderSkin();
    },

    /**
     * Handles the PLAYBACK_SPEED_CHANGED message bus event.
     * @private
     * @param {String} eventName The name of the message bus event
     * @param {String} videoId The id of the video whose playback speed change
     * @param {Number} playbackSpeedDirty A number that represents the new playback rate
     */
    onPlaybackSpeedChanged: function onPlaybackSpeedChanged(eventName, videoId, playbackSpeedDirty) {
      // Note that we don't constrain to min/max values in this case since
      // the new speed is already set, but we make sure that the value we get can
      // be displayed in a user-friendly way
      var playbackSpeed = _utils.default.sanitizePlaybackSpeed(playbackSpeedDirty, true); // Add speed to options if it's not one of the predefined values


      var playbackSpeedOptions = _utils.default.getPropertyValue(this.skin, 'props.skinConfig.playbackSpeed.options');

      if (playbackSpeedOptions && playbackSpeedOptions.indexOf(playbackSpeed) < 0) {
        playbackSpeedOptions.push(playbackSpeed);
      } // Store new current speed and update UI


      this.state.playbackSpeedOptions.currentSpeed = playbackSpeed;
      this.renderSkin();
    },
    resetUpNextInfo: function resetUpNextInfo(purge) {
      if (purge) {
        this.state.upNextInfo.upNextData = null;
      }

      this.state.upNextInfo.countDownFinished = false;
      this.state.upNextInfo.countDownCancelled = false;
    },
    onPlayheadTimeChanged: function onPlayheadTimeChanged(event, currentPlayhead, duration, buffered, startEnd, videoId) {
      if (videoId === OO.VIDEO.MAIN) {
        this.state.mainVideoPlayhead = currentPlayhead;
        this.state.mainVideoDuration = duration;
        this.state.mainVideoBuffered = buffered;
      }

      if (videoId === OO.VIDEO.ADS || this.state.isPlayingAd) {
        // adVideoDuration is only used in adPanel ad marquee
        this.state.adVideoDuration = duration;
        this.state.adVideoPlayhead = currentPlayhead;
        this.state.adRemainingTime = this.getAdRemainingTime();
      }

      this.state.duration = duration; // For the off chance that a video plugin resumes playback without firing
      // the ON_BUFFERED event. This will have no effect if it was set previously

      if (this.state.buffering) {
        this.setBufferingState(false);
      } // lower skin z-index if Chrome auto-pauses flash content


      if (!this.state.autoPauseDisabled && _utils.default.isChrome() && this.state.mainVideoMediaType === _constants.default.MEDIA_TYPE.FLASH) {
        var skinElement = $("#".concat(this.state.elementId, " .oo-player-skin"));

        if (currentPlayhead === 0 && this.state.playerState === _constants.default.STATE.PLAYING) {
          skinElement.addClass('oo-z-index-auto');
        } else {
          skinElement.removeClass('oo-z-index-auto');
          this.state.autoPauseDisabled = true;
        }
      } // The code inside if statement is only for up next, however, up next does not apply to Ad screen.
      // So we only need to update the playhead for ad screen.


      if (this.state.screenToShow !== _constants.default.SCREEN.AD_SCREEN) {
        if (this.skin.props.skinConfig.upNext.showUpNext) {
          if (!(!_utils.default.canRenderSkin() || _utils.default.isIos() && this.state.fullscreen)) {
            // no UpNext for iPhone < iOS10 or fullscreen iOS
            this.showUpNextScreenWhenReady(currentPlayhead, duration);
          }
        } else if (this.state.playerState === _constants.default.STATE.PLAYING && this.state.screenToShow !== _constants.default.SCREEN.MULTI_AUDIO_SCREEN) {
          this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
        } else if (this.state.playerState === _constants.default.STATE.PAUSE && this.state.screenToShow !== _constants.default.SCREEN.CLOSED_CAPTION_SCREEN) {
          this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
        }
      }

      if (!this.state.seeking) {
        this.skin.updatePlayhead(currentPlayhead, duration, buffered, this.state.adVideoPlayhead);
      } else {
        this.state.queuedPlayheadUpdate = [currentPlayhead, duration, buffered];
      }
    },
    showUpNextScreenWhenReady: function showUpNextScreenWhenReady(currentPlayhead, duration) {
      var timeToShow = this.skin.props.skinConfig.upNext.timeToShow;

      if (timeToShow < 1) {
        // time to show is based on percentage of duration from the beginning
        timeToShow = (1 - timeToShow) * duration;
      }

      this.state.upNextInfo.timeToShow = timeToShow;

      if (this.state.mainVideoPlayhead !== 0 && currentPlayhead !== 0 && duration !== 0 && duration - currentPlayhead <= timeToShow && !this.state.upNextInfo.countDownCancelled && this.state.isPlayingAd !== true && this.state.upNextInfo.upNextData !== null && (this.state.playerState === _constants.default.STATE.PLAYING || this.state.playerState === _constants.default.STATE.PAUSE)) {
        // Trigger discovery event only the first time we
        // switch from hidden to showing
        if (!this.state.upNextInfo.showing) {
          var upNextEmbedCode = _utils.default.getPropertyValue(this.state.upNextInfo, 'upNextData.embed_code');

          this.sendDiscoveryDisplayEventRelatedVideos('endScreen', upNextEmbedCode);
          this.state.discoverySource = _constants.default.SCREEN.END_SCREEN;
          var customData = {
            playheadPercent: currentPlayhead / duration
          };
          this.sendDiscoveryDisplayEvent(1, 1, _constants.default.UI_TAG.UP_NEXT, this.state.upNextInfo.upNextData, customData);
        }

        this.state.upNextInfo.showing = true;
      } else {
        this.state.upNextInfo.showing = false;
      }
    },
    onInitialPlay: function onInitialPlay() {
      this.state.isInitialPlay = true;
      this.state.initialPlayHasOccurred = true; // TODO: Why do we start a hide-control-bar timer here?

      this.startHideControlBarTimer();

      if (this.videoVr) {
        this.vrMobileOrientationChecked = true;
      }
    },
    onVcPlay: function onVcPlay(event, source) {
      if (this.state.cast.isReceiver) {
        this.hideControlBar();
      }

      this.state.currentVideoId = source;

      if (this.state.adWasPaused && this.state.currentAdsInfo && this.state.currentAdsInfo.currentAdItem && this.state.currentAdsInfo.currentAdItem.ssai) {
        this.state.adPauseDuration = Date.now() - this.state.adPausedTime; // we calculate new ad end time, based on the time that the ad was paused.

        this.state.adEndTime = this.state.adEndTime + this.state.adPauseDuration; // milliseconds

        this.state.adWasPaused = false;
        this.state.adPauseDuration = 0;
      }
    },
    onPlaying: function onPlaying(event, source) {
      if (source === OO.VIDEO.MAIN) {
        // set mainVideoElement if not set during video plugin initialization
        if (!this.state.mainVideoMediaType) {
          this.state.mainVideoElement = this.findMainVideoElement(this.state.mainVideoElement);
        }

        this.state.pauseAnimationDisabled = this.state.cast.connected;
        this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
        this.state.playerState = _constants.default.STATE.PLAYING;
        this.setClosedCaptionsLanguage();
        this.removeBlur();
        this.state.isInitialPlay = false;
        this.renderSkin();
      }

      if (source === OO.VIDEO.ADS || this.state.isPlayingAd) {
        this.state.adPauseAnimationDisabled = true;
        this.state.pluginsElement.addClass('oo-showing');
        this.state.pluginsClickElement.removeClass('oo-showing');

        if (this.state.currentAdsInfo.currentAdItem !== null) {
          this.state.playerState = _constants.default.STATE.PLAYING; // Set the screen to ad screen in case current screen does not involve video playback, such as discovery

          this.state.screenToShow = _constants.default.SCREEN.AD_SCREEN;
          this.renderSkin();
        }
      }
    },
    onPause: function onPause(event, source, pauseReason) {
      if (this.state.failoverInProgress) {
        return;
      }

      if (this.state.cast.isReceiver) {
        this.showControlBar();
      }

      if (pauseReason === _constants.default.PAUSE_REASON.TRANSITION) {
        this.state.pauseAnimationDisabled = true;
        this.endSeeking();
      } // If an ad using the custom ad element has issued a pause, activate the click layer


      if (this.state.isPlayingAd) {
        this.state.pluginsClickElement.addClass('oo-showing');
      }
    },
    onPaused: function onPaused(event, videoId) {
      if (this.state.failoverInProgress) {
        return;
      }

      if (videoId !== this.focusedElement || this.state.screenToShow === _constants.default.SCREEN.END_SCREEN) {
        return;
      }

      if (videoId === OO.VIDEO.MAIN && this.state.screenToShow !== _constants.default.SCREEN.AD_SCREEN && this.state.screenToShow !== _constants.default.SCREEN.LOADING_SCREEN) {
        var PLAYHEAD_STARTING_TIME = 0.01;

        if (this.state.duration - this.state.mainVideoPlayhead < PLAYHEAD_STARTING_TIME) {
          // when video ends, we get paused event before played event
          this.state.pauseAnimationDisabled = true;
        }

        if (!this.state.pauseAnimationDisabled && this.state.metadata.modules['discovery-ui'] && this.state.discoveryData && this.skin.props.skinConfig.pauseScreen.screenToShowOnPause === 'discovery' && !(!_utils.default.canRenderSkin() || _utils.default.isIos() && this.state.fullscreen)) {
          OO.log('Should display DISCOVERY_SCREEN on pause');
          this.sendDiscoveryDisplayEventRelatedVideos('pauseScreen');
          this.state.discoverySource = _constants.default.SCREEN.PAUSE_SCREEN;
          this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
          this.addBlur();
        } else if (this.skin.props.skinConfig.pauseScreen.screenToShowOnPause === 'social') {// Remove this comment once pause screen implemented
        } else {
          // default
          this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
        }

        if (!_utils.default.canRenderSkin()) {
          // iPhone < iOS10 pause screen is the same as start screen
          this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
        }

        this.state.playerState = _constants.default.STATE.PAUSE;
        this.renderSkin();
      } else if (videoId === OO.VIDEO.ADS || this.state.isPlayingAd) {
        // If we pause during an ad (such as for clickthroughs or when autoplay fails)
        // we'll show the control bar so that the user has an indication that the video
        // must be unpaused to resume
        this.state.config.adScreen.showControlBar = true;
        this.state.adPauseAnimationDisabled = false;

        if (this.state.currentAdsInfo && this.state.currentAdsInfo.currentAdItem && this.state.currentAdsInfo.currentAdItem.ssai) {
          this.state.adWasPaused = true;
          this.state.adPausedTime = Date.now(); // milliseconds
        }

        this.state.playerState = _constants.default.STATE.PAUSE;
        this.renderSkin();
      }

      if (this.pausedCallback) {
        this.pausedCallback();
        this.pausedCallback = null;
      }
    },
    onPlayed: function onPlayed() {
      var mSecInSec = 1000;
      var duration = this.state.mainVideoDuration || this.state.contentTree.duration / mSecInSec;
      this.state.duration = duration;
      this.state.playerState = _constants.default.STATE.END;

      if (this.state.upNextInfo.delayedSetEmbedCodeEvent) {
        var delayedContentData = this.state.upNextInfo.delayedContentData;
        this.state.screenToShow = _constants.default.SCREEN.LOADING_SCREEN;

        if (delayedContentData.clickedVideo.embed_code) {
          this.mb.publish(OO.EVENTS.SET_EMBED_CODE, delayedContentData.clickedVideo.embed_code, this.state.playerParam);
        } else if (delayedContentData.clickedVideo.asset) {
          this.mb.publish(OO.EVENTS.SET_ASSET, delayedContentData.clickedVideo.asset, this.state.playerParam);
        }

        this.mb.publish(OO.EVENTS.DISCOVERY_API.SEND_CLICK_EVENT, delayedContentData);
        this.state.upNextInfo.showing = false;
        this.state.upNextInfo.delayedSetEmbedCodeEvent = false;
        this.state.upNextInfo.delayedContentData = null;
      } else if (this.state.metadata.modules['discovery-ui'] && this.state.discoveryData && this.skin.props.skinConfig.endScreen.screenToShowOnEnd === 'discovery' && !(!_utils.default.canRenderSkin() || _utils.default.isIos() && this.state.fullscreen)) {
        OO.log('Should display DISCOVERY_SCREEN on end');
        this.sendDiscoveryDisplayEventRelatedVideos('endScreen');
        this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
      } else if (this.skin.props.skinConfig.endScreen.screenToShowOnEnd === 'share') {
        this.state.screenToShow = _constants.default.SCREEN.SHARE_SCREEN;
      } else {
        this.state.screenToShow = _constants.default.SCREEN.END_SCREEN;
        this.renderSkin(); // TODO: END_SCREEN_SHOWN is not consumed by anyone, should we remove? If not, should
        // we publish this when the end screen is actually shown?

        this.mb.publish(OO.EVENTS.END_SCREEN_SHOWN);
      }

      if (!_utils.default.canRenderSkin()) {
        // iPhone < iOS10 end screen is the same as start screen, except for the replay button
        this.state.screenToShow = _constants.default.SCREEN.START_SCREEN;
      } // In case a video plugin fires PLAYED event after stalling without firing BUFFERED or PLAYING first


      this.setBufferingState(false);
      this.skin.updatePlayhead(duration, duration, duration);
    },
    onVcPlayed: function onVcPlayed(event, source) {
      this.onBuffered();

      if (source === OO.VIDEO.MAIN) {
        var language = '';
        var mode = 'disabled';
        this.mb.publish(OO.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE, language, {
          mode: mode,
          isFullScreen: this.state.fullscreen
        });
        this.state.mainVideoDuration = this.state.duration;
      }
    },
    onTouchMove: function onTouchMove(params) {
      if (this.videoVr) {
        this.mb.publish(OO.EVENTS.TOUCH_MOVE, this.focusedElement, params);
      }
    },
    onEndMove: function onEndMove() {
      if (this.videoVr) {
        this.mb.publish(OO.EVENTS.END_VR_MOVE, this.focusedElement);
      }
    },

    /**
     * Get current vr viewing directions
     * @param {boolean} useVrViewingDirection flag says to use function 'getVrViewingDirection' from the plugin
     * @fires OO.EVENTS.CHECK_VR_DIRECTION
     */
    checkVrDirection: function checkVrDirection(useVrViewingDirection) {
      if (this.videoVr) {
        this.mb.publish(OO.EVENTS.CHECK_VR_DIRECTION, this.focusedElement, useVrViewingDirection);
      }
    },
    setVrViewingDirection: function setVrViewingDirection(event, yaw, roll, pitch) {
      this.state.vrViewingDirection = {
        yaw: yaw,
        roll: roll,
        pitch: pitch
      };
    },
    recreatingUI: function recreatingUI() {
      if (!$('.oo-player-skin').length) {
        this.state.mainVideoInnerWrapper.append('<div class=\'oo-player-skin\'></div>');
      }

      this.loadConfigData(this.state.playerParam, this.state.persistentSettings, this.state.customSkinJSON, this.state.skinMetaData);
    },

    /**
     * The function is called when event MULTI_AUDIO_FETCHED was caught;
     * The function sets value for this.state.multiAudio
     * @param {String} event  name of a event
     * @param {Object} multiAudio - audio which fetched for the current video
     * @param {Array} multiAudio.tracks - list of objects with data for each audio
     * @param {Array} multiAudio.languageList - list of objects with all languages
     */
    onMultiAudioFetched: function onMultiAudioFetched(event, multiAudio) {
      if (!this.state.hideMultiAudioIcon) {
        // if param hideMultiAudioIcon is set to false
        if (typeof multiAudio !== 'undefined') {
          var multiAudioValue = null;

          if (this.containsMultiAudio(multiAudio)) {
            multiAudioValue = {
              tracks: multiAudio.tracks
            };
          }

          this.state.multiAudio = multiAudioValue;
          this.languageList = multiAudio.languageList || this.languageList;
        }

        this.renderSkin();
      }
    },

    /**
     * The function is called when event MULTI_AUDIO_CHANGED was caught;
     * The function sets value for this.state.multiAudio
     * @param {String} event - name of a event
     * @param {Object} multiAudio - audio which fetched for the current video
     * @param {Array} multiAudio.tracks - list of objects with data for each audio
     */
    onMultiAudioChanged: function onMultiAudioChanged(event, multiAudio) {
      if (!this.state.hideMultiAudioIcon) {
        if (this.containsMultiAudio(multiAudio)) {
          this.state.multiAudio = multiAudio;
        } else {
          this.state.multiAudio = null;
        }

        this.renderSkin();
      }
    },

    /**
     * Checks to see if we have multiple audio tracks
     * @param {Object} multiAudio The multiAudio object that is fetched from the current video
     * @returns {boolean} True if the provided object contains more than one track, false otherwise
     */
    containsMultiAudio: function containsMultiAudio(multiAudio) {
      var hasMoreThanOneTrack = !!(multiAudio && multiAudio.tracks && multiAudio.tracks.length > 1);
      return hasMoreThanOneTrack;
    },

    /**
     * The function is called when we want to change audio track
     * @fires OO.EVENTS.SET_CURRENT_AUDIO
     * @param {{id: String, label: String, lang: String}} currentTrack  - current active audio track
     */
    setCurrentAudio: function setCurrentAudio(currentTrack) {
      // user selected track should be saved to localstorage
      var currentAudioTrack = JSON.stringify(currentTrack);
      OO.setItem(OO.CONSTANTS.SELECTED_AUDIO, currentAudioTrack);
      this.mb.publish(OO.EVENTS.SET_CURRENT_AUDIO, this.state.currentVideoId, currentTrack);
    },
    onSeek: function onSeek(event, time) {
      var _this2 = this;

      if (this.state.cast.isReceiver) {
        this.skin.updatePlayhead(time).then(function () {
          if (_this2.state.playerState === _constants.default.STATE.PLAYING) {
            _this2.showControlBar();
          }
        });
      }
    },
    onSeeked: function onSeeked() {
      var _this3 = this;

      this.state.seeking = false;

      if (this.state.queuedPlayheadUpdate) {
        OO.log('popping queued update');
        this.skin.updatePlayhead.apply(this.skin, this.state.queuedPlayheadUpdate).then(function () {
          // eslint-disable-line
          _this3.state.queuedPlayheadUpdate = null;
        }).catch(function () {
          OO.log('onSeeked: Could not set new state for skin');
        });
      }

      if (this.state.cast.isReceiver && this.state.playerState === _constants.default.STATE.PLAYING) {
        this.startHideControlBarTimer();
      }

      if (_utils.default.isIos() && this.state.screenToShow === _constants.default.SCREEN.END_SCREEN && this.state.fullscreen) {
        this.state.pauseAnimationDisabled = true;
        this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
        this.state.playerState = _constants.default.STATE.PAUSE;
      }
    },
    onPlaybackReady: function onPlaybackReady(event, timeSincePlayerCreated, paramsDirty) {
      if (this.state.failoverInProgress) {
        return;
      }

      var params = paramsDirty || {};

      if (this.state.afterOoyalaAd) {
        this.state.screenToShow = _constants.default.SCREEN.LOADING_SCREEN;
      } else if (params.willAutoplay) {
        // If the core tells us that it will autoplay then we display the loading
        // spinner (with the thumbnail and description if it's the first video, or just a
        // black background when transitioning to a new one), otherwise we need to render
        // the big play button.
        // Show just the loading spinner when transitioning to another Discovery or
        // Playlist video, otherwise show the spinner and thumbnail.
        if (this.state.initialPlayHasOccurred) {
          this.state.screenToShow = _constants.default.SCREEN.LOADING_SCREEN;
        } else {
          this.state.screenToShow = _constants.default.SCREEN.START_LOADING_SCREEN;
        }
      } else {
        this.state.screenToShow = _constants.default.SCREEN.START_SCREEN;
      }

      this.renderSkin({
        contentTree: this.state.contentTree
      });
    },

    /**
     * Fired by the video plugin when the video stalls due to buffering.
     * @private
     * @param {Event} event - message bus event
     */
    onBuffering: function onBuffering() {
      if (this.state.isInitialPlay === false && this.state.screenToShow === _constants.default.SCREEN.START_SCREEN) {
        this.setBufferingState(false);
      } else {
        this.startBufferingTimer();
      }
    },

    /**
     * Fired by the video plugin when video stalling has ended.
     * @private
     * @param {Event} event - message bus event
     */
    onBuffered: function onBuffered() {
      this.setBufferingState(false);
    },

    /**
     * Starts a timer that will call setBufferingState() with a value of true after the
     * time specified in BUFFERING_SPINNER_DELAY has elapsed.
     * @private
     */
    startBufferingTimer: function startBufferingTimer() {
      var _this4 = this;

      this.stopBufferingTimer();

      var bufferingSpinnerDelay = _utils.default.getPropertyValue(this.skin.props.skinConfig, 'general.bufferingSpinnerDelay');

      bufferingSpinnerDelay = _utils.default.constrainToRange(bufferingSpinnerDelay, 0, _constants.default.UI.MAX_BUFFERING_SPINNER_DELAY);
      this.state.bufferingTimer = setTimeout(function () {
        _this4.setBufferingState(true);
      }, bufferingSpinnerDelay);
    },

    /**
     * Cancels the timer that displays the loading spinner. Should be called when
     * stalling (buffering) ends, playback resumes, etc.
     * @private
     */
    stopBufferingTimer: function stopBufferingTimer() {
      clearTimeout(this.state.bufferingTimer);
      this.state.bufferingTimer = null;
    },

    /**
     * Applies the 'buffering' state of the skin which determines whether the
     * player is stalled. This also determines whether the loading spinner is displayed or not.
     * IMPORTANT:
     * The value of this.state.buffering should never be set manually. This function
     * should be called whenever setting this value.
     * @private
     * @param {Boolean} value Must pass true if the player is in buffering state, false otherwise
     */
    setBufferingState: function setBufferingState(value) {
      var buffering = !!value; // Always make sure buffering timer is disabled when buffering has stopped.
      // This will have no effect if timer hasn't been started.

      if (!buffering) {
        this.stopBufferingTimer();
      } // Only render skin if new state is different


      if (this.state.buffering !== buffering) {
        this.state.buffering = buffering;
        this.renderSkin();
      }
    },
    onReplay: function onReplay() {
      this.resetUpNextInfo(false);
    },
    onAssetDimensionsReceived: function onAssetDimensionsReceived(event, params) {
      if (params.videoId === OO.VIDEO.MAIN && (this.skin.props.skinConfig.responsive.aspectRatio === 'auto' || !this.skin.props.skinConfig.responsive.aspectRatio)) {
        this.state.mainVideoAspectRatio = this.calculateAspectRatio(params.width, params.height); // Do not set aspect ratio if content is not playing. The aspect ratio will be set
        // when switching back to content

        if (this.state.currentVideoId === OO.VIDEO.MAIN) {
          this.setAspectRatio();
        }
      }
    },

    /** ******************************************************************
      ADS RELATED EVENTS
    ******************************************************************** */
    onAdsPlayed: function onAdsPlayed(event) {
      OO.log("onAdsPlayed is called from event = ".concat(event));

      if (this.state.playerState === _constants.default.STATE.END) {
        this.state.screenToShow = _constants.default.SCREEN.END_SCREEN;
      } else {
        this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
      }

      var mSecInSec = 1000;
      this.state.duration = this.state.contentTree.duration / mSecInSec;
      this.state.isPlayingAd = false;
      this.state.pluginsElement.removeClass('oo-showing');
      this.state.pluginsClickElement.removeClass('oo-showing'); // Restore anamorphic videos fix after ad playback if necessary

      this.trySetAnamorphicFixState(true); // In case ad was skipped or errored while stalled

      this.setBufferingState(false); // Set current position for video 360 after Ads.

      if (this.videoVr && this.state.isMobile) {
        // only for vr on mobile
        this.setControllerVrViewingDirection();
      }

      this.skin.updatePlayhead(this.state.mainVideoPlayhead, this.state.mainVideoDuration, this.state.mainVideoBuffered).catch(function () {
        OO.log('onAdsPlayed: Could not set new state for skin');
      });
    },
    onWillPlayAds: function onWillPlayAds(event) {
      OO.log("onWillPlayAds is called from event = ".concat(event));
      this.state.isPlayingAd = true; // Anamorphic videos fix should not be active during ad playback

      this.trySetAnamorphicFixState(false);
      this.state.pluginsElement.addClass('oo-showing');
      this.state.pluginsElement.css({
        height: '',
        width: ''
      });
      this.cancelTimer();
      this.hideControlBar();

      if (this.state.mainVideoPlayhead > 0) {
        this.isNewVrVideo = false;
      }

      this.state.adPausedTime = 0;

      if (this.videoVr && this.state.isMobile) {
        // only for vr on mobile
        // Check current a vr video position (an user could change position using tilting)
        // for setting this value after Ads in onAdsPlayed
        var useVrViewingDirection = true;
        this.checkVrDirection(useVrViewingDirection);
      }
    },
    onAdPodStarted: function onAdPodStarted(event, numberOfAds) {
      OO.log("onAdPodStarted is called from event = ".concat(event, " with ").concat(numberOfAds, " ads"));
      this.state.currentAdsInfo.numberOfAds = numberOfAds;
      this.renderSkin();
    },
    onWillPlaySingleAd: function onWillPlaySingleAd(event, adItem) {
      OO.log("onWillPlaySingleAd is called with adItem = ".concat(adItem));

      if (adItem !== null) {
        var mSecInSec = 1000;
        this.state.adVideoDuration = adItem.duration * mSecInSec;
        this.state.screenToShow = _constants.default.SCREEN.AD_SCREEN;
        this.state.isPlayingAd = true;
        this.state.currentAdsInfo.currentAdItem = adItem;
        this.state.playerState = _constants.default.STATE.PLAYING;

        if (adItem.isLive) {
          this.state.adStartTime = Date.now();
        } else {
          this.state.adStartTime = 0;
        }

        this.state.adEndTime = this.state.adStartTime + this.state.adVideoDuration;
        this.skin.state.currentPlayhead = 0;
        this.removeBlur();
        this.renderSkin();
      }
    },
    onSingleAdPlayed: function onSingleAdPlayed() {
      OO.log('onSingleAdPlayed is called');
      this.state.isPlayingAd = false;
      this.state.adVideoDuration = 0;
      this.state.currentAdsInfo.skipAdButtonEnabled = false;
      this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
      this.renderSkin();
    },
    onShowAdSkipButton: function onShowAdSkipButton() {
      this.state.currentAdsInfo.skipAdButtonEnabled = true;
      this.renderSkin();
    },
    onShowAdControls: function onShowAdControls(event, showAdControls, autoHide) {
      this.state.showAdControls = showAdControls;
      this.state.forceControlBarVisible = false;

      if (showAdControls && this.state.config.adScreen.showControlBar) {
        this.state.pluginsElement.removeClass('oo-full');
        this.state.pluginsClickElement.removeClass('oo-full');

        if (typeof autoHide === 'boolean') {
          this.state.forceControlBarVisible = !autoHide;
        }
      } else {
        this.state.pluginsElement.addClass('oo-full');
        this.state.pluginsClickElement.addClass('oo-full');
      }

      this.renderSkin();
    },
    onShowAdMarquee: function onShowAdMarquee(event, showAdMarquee) {
      this.state.showAdMarquee = showAdMarquee;
      this.renderSkin();
    },
    onSkipAdClicked: function onSkipAdClicked() {
      var _this5 = this;

      OO.log('onSkipAdClicked is called');
      this.skin.updatePlayhead(this.state.mainVideoPlayhead, this.state.mainVideoDuration, this.state.mainVideoBuffered).then(function () {
        _this5.state.currentAdsInfo.skipAdButtonEnabled = false;

        _this5.mb.publish(OO.EVENTS.SKIP_AD);
      }).catch(function () {
        OO.log('onSkipAdClicked: Could not set new state for skin');
      });
    },
    onAdsClicked: function onAdsClicked(source) {
      OO.log('on ads clicked is called', source);
      this.mb.publish(OO.EVENTS.ADS_CLICKED, {
        source: source
      });
    },
    publishOverlayRenderingEvent: function publishOverlayRenderingEvent(marginHeight) {
      this.mb.publish(OO.EVENTS.OVERLAY_RENDERING, {
        marginHeight: marginHeight
      });
    },
    onPlayNonlinearAd: function onPlayNonlinearAd(event, adInfo) {
      if (adInfo.url) {
        this.state.adOverlayUrl = adInfo.url;
        this.state.showAdOverlay = true;
      }

      this.state.pluginsElement.addClass('oo-overlay-showing');
      var newCSS = {};

      if (adInfo.ad.height && adInfo.ad.height !== -1) {
        var padding = adInfo.ad.paddingHeight ? adInfo.ad.paddingHeight : 0;
        newCSS.height = "".concat(adInfo.ad.height + padding, "px");
        newCSS.top = 'auto';
      } else {
        newCSS.top = 0;
        newCSS.bottom = 0;
      }

      if (adInfo.ad.width && adInfo.ad.width !== -1) {
        var _padding = adInfo.ad.paddingWidth ? adInfo.ad.paddingWidth : 0;

        newCSS.width = "".concat(adInfo.ad.width + _padding, "px");
        newCSS.left = '50%';
        newCSS.transform = 'translateX(-50%)';
      }

      this.state.pluginsElement.css(newCSS);
      this.renderSkin();
    },
    onAdOverlayLoaded: function onAdOverlayLoaded() {
      this.mb.publish(OO.EVENTS.NONLINEAR_AD_DISPLAYED);
    },
    onVideoElementFocus: function onVideoElementFocus(event, source) {
      // Switching to another element, clear buffering state which applies to current element
      if (this.focusedElement !== source) {
        this.setBufferingState(false);
      }

      this.focusedElement = source; // Make sure that the skin uses the captions that correspond
      // to the newly focused video element

      this.setClosedCaptionsInfo(source);

      if (source === OO.VIDEO.MAIN) {
        this.state.pluginsElement.removeClass('oo-showing');
        this.state.pluginsClickElement.removeClass('oo-showing');
      }

      this.state.currentVideoId = source;
    },
    closeNonlinearAd: function closeNonlinearAd() {
      this.state.adOverlayUrl = null;
      this.state.showAdOverlay = false;
      this.state.showAdOverlayCloseButton = false;
      this.state.pluginsElement.removeClass('oo-overlay-showing');
      this.state.pluginsElement.css({
        top: '',
        left: '',
        right: '',
        bottom: '',
        height: '0',
        width: '0',
        transform: ''
      });
      this.renderSkin();
    },
    hideNonlinearAd: function hideNonlinearAd() {
      this.state.showAdOverlay = false;
      this.state.pluginsElement.removeClass('oo-overlay-showing');
      this.renderSkin();
    },
    showNonlinearAd: function showNonlinearAd() {
      this.state.showAdOverlay = true;
      this.state.pluginsElement.addClass('oo-overlay-showing');
      this.renderSkin();
    },
    showNonlinearAdCloseButton: function showNonlinearAdCloseButton() {
      this.state.showAdOverlayCloseButton = true;
      this.renderSkin();
    },

    /**
     * Returns ad remaining time that will be displayed in ad marquee
     * when playing ads.
     * @private
     * @returns {Number} remainingTime
     */
    getAdRemainingTime: function getAdRemainingTime() {
      var remainingTime = 0;
      var isLive = this.state.currentAdsInfo.currentAdItem ? this.state.currentAdsInfo.currentAdItem.isLive : false;
      var isSSAI = this.state.currentAdsInfo.currentAdItem ? this.state.currentAdsInfo.currentAdItem.ssai : false;

      if (isLive) {
        var mSecInSec = 1000;
        var _this$state = this.state,
            adStartTime = _this$state.adStartTime,
            adVideoDuration = _this$state.adVideoDuration;
        remainingTime = parseInt((adStartTime + adVideoDuration - Date.now()) / mSecInSec, 0);

        if (isSSAI) {
          if (this.state.playerState !== _constants.default.STATE.PAUSE) {
            remainingTime = (this.state.adEndTime - Date.now()) / mSecInSec;
          } else {
            remainingTime = (this.state.adEndTime - this.state.adPausedTime) / mSecInSec;
          }
        }
      } else {
        remainingTime = parseInt(this.state.adVideoDuration - this.state.adVideoPlayhead, 0);
      }

      return remainingTime;
    },

    /** ******************************************************************
     MAIN VIDEO RELATED EVENTS
     ******************************************************************** */
    // merge and load config data
    loadConfigData: function loadConfigData(params, settings, data, skinMetaData) {
      var localSettings = _utils.default.sanitizeConfigData(settings);

      var inlinePageParams = _utils.default.sanitizeConfigData(_utils.default.getPropertyValue(params, 'skin.inline'));

      var customSkinJSON = _utils.default.sanitizeConfigData(data);

      var metaDataSettings = _utils.default.sanitizeConfigData(skinMetaData);

      var buttonArrayFusion = params.buttonMerge ? params.buttonMerge : 'replace'; // override data in skin config with possible local storage settings, inline data input by user, and CMS settings in backlot/themebuilder

      var mergedMetaData = (0, _deepmerge.default)(_skin2.default, metaDataSettings, {
        arrayMerge: _utils.default.arrayDeepMerge.bind(_utils.default),
        arrayUnionBy: 'name',
        buttonArrayFusion: 'prepend'
      });
      this.state.config = _deepmerge.default.all([mergedMetaData, customSkinJSON, inlinePageParams, localSettings], {
        arrayMerge: _utils.default.arrayDeepMerge.bind(_utils.default),
        arrayUnionBy: 'name',
        buttonArrayFusion: buttonArrayFusion
      });
      this.state.closedCaptionOptions = this.state.config.closedCaptionOptions; // remove 'url' from the list until the tab is worked on

      var shareContent = _utils.default.getPropertyValue(this.state.config, 'shareScreen.shareContent');

      if (shareContent) {
        for (var index = 0; index < shareContent.length; index += 1) {
          if (shareContent[index] === 'url') {
            shareContent.splice(index, 1);
          }
        }

        this.state.config.shareScreen.shareContent = shareContent;
      } // load config language json if exist


      if (this.state.config.localization.availableLanguageFile) {
        this.state.config.localization.availableLanguageFile.forEach(function (languageObj) {
          if (languageObj.languageFile) {
            $.getJSON(languageObj.languageFile, function (response) {
              Localization.languageFiles[languageObj.language] = response;
            });
          }
        });
      } // backwards compatibility with string parameters in skin.json


      this.state.config.upNext.timeToShow = _utils.default.convertStringToNumber(this.state.config.upNext.timeToShow);
      this.state.config.discoveryScreen.countDownTime = _utils.default.convertStringToNumber(this.state.config.discoveryScreen.countDownTime);
      var _this$state2 = this.state,
          config = _this$state2.config,
          playerParam = _this$state2.playerParam;

      var uiLanguage = _utils.default.getLanguageToUse(config, playerParam);

      this.mb.publish(OO.EVENTS.SKIN_UI_LANGUAGE, uiLanguage);
      this.state.audioOnly = params.playerType === OO.CONSTANTS.PLAYER_TYPE.AUDIO;
      this.state.cast.showButton = this.isChromecastEnabled(params);
      this.state.cast.isReceiver = params.chromecast && params.chromecast.isReceiver;
      this.state.isAirplayAllowed = _utils.default.getPropertyValue(params, 'airplay', true); // load player

      this.skin = _reactDom.default.render(_react.default.createElement(_skin.default, {
        skinConfig: this.state.config,
        localizableStrings: Localization.languageFiles,
        language: uiLanguage,
        controller: this,
        closedCaptionOptions: this.state.closedCaptionOptions,
        pauseAnimationDisabled: this.state.pauseAnimationDisabled
      }), document.querySelector("#".concat(this.state.elementId, " .oo-player-skin")));
      this.state.configLoaded = true;

      if (!this.state.audioOnly) {
        this.state.mainVideoInnerWrapper.addClass('oo-video-player');
      } else {
        this.state.mainVideoInnerWrapper.removeClass('oo-video-player'); // If height was not provided for an audio only player, set a height of 138px.
        // Note that our debug page that QA uses does not currently set a height
        // 138px was the value recommended by Fernando. See JIRA ticket PLAYER-4170

        var containerHeight = this.state.mainVideoContainer.height();

        if (!containerHeight) {
          this.state.mainVideoContainer.height(_constants.default.UI.AUDIO_ONLY_DEFAULT_HEIGHT);
        }
      }

      this.mb.publish(OO.EVENTS.SKIN_CONFIG_LOADED, this.state.config);
      this.renderSkin();
      this.createPluginElements();

      if (_typeof(this.state.config.closedCaptionOptions) === 'object' && this.state.config.closedCaptionOptions.language !== undefined) {
        this.setCaptionDirection(this.state.config.closedCaptionOptions.language);
      }
    },
    // create plugin container elements
    createPluginElements: function createPluginElements() {
      var _this6 = this;

      this.state.config.adScreen = this.state.config.adScreen || {}; // if playerControlsOverAds is true then we need to override the setting
      // for showing the control bar during ads.

      if (this.state.playerParam && this.state.playerParam.playerControlsOverAds) {
        if (this.state.config) {
          this.state.config.adScreen.showControlBar = true;
        }
      }

      var fullClass = '';

      if (!this.state.config || !this.state.config.adScreen || !this.state.config.adScreen.showControlBar) {
        fullClass = ' oo-full';
      }

      $("#".concat(this.state.elementId, " .oo-player-skin")).append("<div class='oo-player-skin-plugins".concat(fullClass, "'></div><div class='oo-player-skin-plugins-click-layer").concat(fullClass, "'></div>"));
      this.state.pluginsElement = $("#".concat(this.state.elementId, " .oo-player-skin-plugins"));
      this.state.pluginsClickElement = $("#".concat(this.state.elementId, " .oo-player-skin-plugins-click-layer")); // if playerControlsOverAds is true, then we need to set the size of the
      // elements to be the full size of the player and not end where the control bar begins.

      if (this.state.playerParam && this.state.playerParam.playerControlsOverAds) {
        this.state.pluginsElement.css('bottom', 0);
        this.state.pluginsClickElement.css('bottom', 0);
      }

      this.state.pluginsElement.mouseover(function () {
        _this6.showControlBar();

        _this6.renderSkin();

        _this6.startHideControlBarTimer();
      });
      this.state.pluginsElement.mouseout(function () {
        _this6.hideControlBar();
      }); // PLAYER-4041: It seems like 'click' events started when a div's pointerEvents is initially 'none' but is changed to
      // 'auto' prior to the 'click' event ending will trigger 'click' event listeners on Android. We'll instead listen to
      // 'touchend' and 'touchcancel' on Android and iOs.

      if (OO.isAndroid || OO.isIos) {
        this.state.pluginsClickElement.on('touchend touchcancel', this.resumePlaybackAfterClickthrough.bind(this));
      } else {
        this.state.pluginsClickElement.click(this.resumePlaybackAfterClickthrough.bind(this));
      }

      this.state.pluginsClickElement.mouseover(function () {
        _this6.showControlBar();

        _this6.renderSkin();

        _this6.startHideControlBarTimer();
      });
      this.state.pluginsClickElement.mouseout(function () {
        _this6.hideControlBar();
      });
      this.mb.publish(OO.EVENTS.UI_READY, {
        videoWrapperClass: 'innerWrapper',
        pluginsClass: 'oo-player-skin-plugins'
      });
    },

    /**
     * Resumes playback and hides the plugins click element. To be called after an ad clickthrough
     * was handled by the player.
     * @private
     */
    resumePlaybackAfterClickthrough: function resumePlaybackAfterClickthrough() {
      this.state.pluginsClickElement.removeClass('oo-showing');
      this.mb.publish(OO.EVENTS.PLAY);
    },
    onBitrateInfoAvailable: function onBitrateInfoAvailable(event, bitrates) {
      if (bitrates && bitrates.bitrates) {
        var qualityFormat = _utils.default.getPropertyValue(this.skin, 'props.skinConfig.controlBar.qualitySelection.format'); // Bitrates will be presorted by the VTC which will work in most cases, however,
        // when displaying only bitrates we need to give priority to bitrates over
        // resolutions when sorting, otherwise the quality display might appear unsorted to the user.


        if (qualityFormat === _constants.default.QUALITY_SELECTION.FORMAT.BITRATE) {
          bitrates.bitrates = _utils.default.sortQualitiesByBitrate(bitrates.bitrates); // eslint-disable-line
        }

        this.state.videoQualityOptions.availableBitrates = bitrates.bitrates;
        this.renderSkin({
          videoQualityOptions: {
            availableBitrates: bitrates.bitrates,
            selectedBitrate: this.state.videoQualityOptions.selectedBitrate
          }
        });
      }
    },
    onClosedCaptionsInfoAvailable: function onClosedCaptionsInfoAvailable(event, info) {
      if (!info || !info.videoId || !info.languages) {
        return;
      } // Store info in cache in order to be able to restore it
      // if this video element looses and then regains focus (like when an ad plays)


      this.state.closedCaptionsInfoCache[info.videoId] = info;
      this.setClosedCaptionsInfo(info.videoId);
    },
    onClosedCaptionCueChanged: function onClosedCaptionCueChanged(event, data) {
      if (data && data.length > 0) {
        this.state.closedCaptionOptions.cueText = data;
      } else {
        this.state.closedCaptionOptions.cueText = null;
      }

      this.renderSkin();
    },
    onRelatedVideosFetched: function onRelatedVideosFetched(event, relatedVideos) {
      OO.log('onRelatedVideosFetched is called');

      if (relatedVideos.videos && relatedVideos.videos.length) {
        this.state.discoveryData = {
          relatedVideos: relatedVideos.videos
        };

        if (relatedVideos.upNextVideo) {
          this.state.upNextInfo.upNextData = relatedVideos.upNextVideo;
        } else {
          var _relatedVideos$videos = _slicedToArray(relatedVideos.videos, 1);

          this.state.upNextInfo.upNextData = _relatedVideos$videos[0];
        }

        this.renderSkin();
      }
    },
    // check if fullscreen is supported natively, set flag, add event listener for change
    enableFullScreen: function enableFullScreen() {
      if (_screenfull.default.enabled) {
        this.state.isFullScreenSupported = true;
        document.addEventListener(_screenfull.default.raw.fullscreenchange, this.onFullscreenChanged.bind(this));
      }
    },
    // iOS webkitSupportsFullscreen property is not valid until metadata has loaded
    // https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/ControllingMediaWithJavaScript/ControllingMediaWithJavaScript.html#//apple_ref/doc/uid/TP40009523-CH3-SW13
    enableIosFullScreen: function enableIosFullScreen() {
      if (!this.state.isFullScreenSupported) {
        if (this.state.mainVideoElement.webkitSupportsFullscreen) {
          this.state.isVideoFullScreenSupported = true;
          this.state.mainVideoElement.addEventListener('webkitbeginfullscreen', this.webkitBeginFullscreen.bind(this));
          this.state.mainVideoElement.addEventListener('webkitendfullscreen', this.webkitEndFullscreen.bind(this));
        }
      }
    },
    // called when event listener triggered
    onFullscreenChanged: function onFullscreenChanged() {
      if (this.state.isFullScreenSupported) {
        this.state.fullscreen = _screenfull.default.isFullscreen;
      } else {
        this.toggleFullscreen();
      }

      if (this.videoVr && this.state.isMobile && this.isVrStereo && !this.state.fullscreen) {
        this.toggleStereoVr();
      }

      if (!this.state.fullscreen) {
        this.closeOtherPopovers();
      }

      this.renderSkin();
    },

    /**
     * @description the function closes popovers (closedCaptionPopover, videoQualityPopover, multiAudioPopover);
     * if the parameter specifies the name of the popover, then its state does not change
     * @param {string} popoverOptionsName - the name of the popover that does not need to be closed
     * @public
     */
    closeOtherPopovers: function closeOtherPopovers(popoverOptionsName) {
      for (var menuName in _constants.default.MENU_OPTIONS) {
        // eslint-disable-line
        var currentOptionsName = _constants.default.MENU_OPTIONS[menuName];

        if (currentOptionsName !== popoverOptionsName) {
          this.closePopover(currentOptionsName);
        }
      }
    },

    /**
     * @description It close popover with name = menu
     * @param {string} menu - the name of the popover to be closed
     * @param {Object} paramsDirty - params for the function
     * @public
     */
    closePopover: function closePopover(menu, paramsDirty) {
      var params = paramsDirty || {};
      var menuOptions = this.state[menu];
      var menuToggleButton = this.toggleButtons[menu];

      if (menuOptions && menuOptions.showPopover) {
        // Re-focus on toggle button when closing the menu popover if the latter
        // was originally opened with a key press.
        if (params.restoreToggleButtonFocus && menuToggleButton && menuToggleButton.wasTriggeredWithKeyboard()) {
          menuToggleButton.focus();
        }

        if (menuToggleButton) {
          menuToggleButton.wasTriggeredWithKeyboard(false);
        }

        this.togglePopover(menu);
      }
    },
    // called when user selects fullscreen icon
    toggleFullscreen: function toggleFullscreen() {
      // full support, any element
      if (this.state.isFullScreenSupported) {
        _screenfull.default.toggle(this.state.mainVideoInnerWrapper.get(0));
      } else if (this.state.isVideoFullScreenSupported && !this.videoVr) {
        // partial support, video element only (iOS) and not vr
        this.toggleIOSNativeFullscreen();
      } else {
        // no support
        if (this.videoVr) {
          // if videoVr we don't use native fullscreen (IOS)
          this.mb.publish(OO.EVENTS.TOGGLE_FULLSCREEN_VR, this.focusedElement);
        }

        this.togglePseudoFullscreenMode();
      }

      this.state.fullscreen = !this.state.fullscreen;
      this.renderSkin();
    },

    /**
     * Toggle fullscreen for video element only (iOS)
     * @private
     */
    toggleIOSNativeFullscreen: function toggleIOSNativeFullscreen() {
      if (this.state.fullscreen) {
        this.state.mainVideoElement.webkitExitFullscreen();
      } else {
        // PLAYER-4216
        // iOS will only recognize active text tracks and show the selected state
        // checkmark if these are set to "showing" mode prior to entering fullscreen.
        // The isGoingFullScreen flag will ensure that the correct mode is set on the
        // active track (if existent) right before entering fullscreen
        this.setClosedCaptionsLanguage({
          isGoingFullScreen: true
        });
        this.state.mainVideoElement.webkitEnterFullscreen();
      }
    },

    /**
     * Toggle fullscreen if native fullscreen is not supported (pseudo fullscreen)
     * @private
     */
    togglePseudoFullscreenMode: function togglePseudoFullscreenMode() {
      if (this.state.isFullWindow) {
        this.exitFullWindow();
      } else {
        this.enterFullWindow();
      }
    },
    // if fullscreen is not supported natively, "full window" style
    // is applied to video wrapper to fill browser window
    enterFullWindow: function enterFullWindow() {
      this.state.isFullWindow = true;
      this.state.fullscreen = true; // add listener for esc key

      document.addEventListener('keydown', this.exitFullWindowOnEscKey.bind(this)); // hide scroll bars

      document.documentElement.style.overflow = 'hidden'; // apply full window style

      this.state.mainVideoInnerWrapper.addClass('oo-fullscreen');
    },
    // remove "full window" style and event listener
    exitFullWindow: function exitFullWindow() {
      this.state.isFullWindow = false;
      this.state.fullscreen = false; // remove event listener

      document.removeEventListener('keydown', this.exitFullWindowOnEscKey); // unhide scroll bars

      document.documentElement.style.overflow = 'visible'; // remove full window style

      this.state.mainVideoInnerWrapper.removeClass('oo-fullscreen');
    },
    // iOS event fires when a video enters full-screen mode
    webkitBeginFullscreen: function webkitBeginFullscreen() {
      this.state.fullscreen = true;
    },
    // iOS event fires when a video exits full-screen mode
    webkitEndFullscreen: function webkitEndFullscreen() {
      this.state.fullscreen = false;
      var showUpNext = this.skin.props.skinConfig.upNext.showUpNext || this.skin.props.skinConfig.discoveryScreen.showCountDownTimerOnEndScreen; // [PLAYER-212]
      // We can't show UI such as the "Up Next" countdown on fullscreen iOS. If a countdown
      // is configured, we wait until the user exits fullscreen and then we display it.

      if (showUpNext && this.state.playerState === _constants.default.STATE.END && this.state.metadata.modules['discovery-ui'] && this.state.discoveryData) {
        this.state.forceCountDownTimerOnEndScreen = true;
        this.sendDiscoveryDisplayEventRelatedVideos('endScreen');
        this.state.discoverySource = _constants.default.SCREEN.END_SCREEN;
        this.state.pluginsElement.addClass('oo-overlay-blur');
        this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
        this.renderSkin();
        this.state.forceCountDownTimerOnEndScreen = false;
      }
    },
    // exit full window on ESC key
    exitFullWindowOnEscKey: function exitFullWindowOnEscKey(event) {
      if (event.keyCode === _constants.default.KEYCODES.ESCAPE_KEY) {
        event.preventDefault();
        this.exitFullWindow();
      }
    },
    onErrorEvent: function onErrorEvent(event, errorCode) {
      this.unsubscribeBasicPlaybackEvents();
      this.setBufferingState(false);
      this.state.currentVideoId = null;
      this.state.screenToShow = _constants.default.SCREEN.ERROR_SCREEN;
      this.state.playerState = _constants.default.STATE.ERROR;
      this.state.errorCode = errorCode;
      this.mb.publish(OO.EVENTS.PAUSE);
      this.renderSkin();
      this.unsubscribeBasicPlaybackEvents();
    },
    unsubscribeFromMessageBus: function unsubscribeFromMessageBus() {
      // basic playback events
      this.unsubscribeBasicPlaybackEvents(); // player events

      this.mb.unsubscribe(OO.EVENTS.PLAYER_CREATED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CONTENT_TREE_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.SKIN_METADATA_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.METADATA_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.ATTRIBUTES_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.AUTHORIZATION_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.ASSET_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.ASSET_UPDATED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.PLAYBACK_READY, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.ERROR, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.SET_EMBED_CODE_AFTER_OOYALA_AD, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.SET_EMBED_CODE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.POSITION_IN_PLAYLIST_DETERMINED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CHROMECAST_START_CAST, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CHROMECAST_END_CAST, 'customerUi');
    },
    unsubscribeBasicPlaybackEvents: function unsubscribeBasicPlaybackEvents() {
      this.mb.unsubscribe(OO.EVENTS.INITIAL_PLAY, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VC_PLAY, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VC_PLAYED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VC_PLAYING, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VC_PAUSE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VC_PAUSED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.PLAYED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.PLAYHEAD_TIME_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.SEEK, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.SEEKED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.BUFFERING, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.BUFFERED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CLOSED_CAPTIONS_INFO_AVAILABLE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.BITRATE_INFO_AVAILABLE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CLOSED_CAPTION_CUE_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CHANGE_CLOSED_CAPTION_LANGUAGE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VOLUME_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.PLAYBACK_SPEED_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.PLAYBACK_READY, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.CHECK_VR_DIRECTION, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.TOUCH_MOVE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.END_VR_MOVE, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VR_DIRECTION_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VIDEO_VR, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.VIDEO_TYPE_CHANGED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.RECREATING_UI, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.MULTI_AUDIO_FETCHED, 'customerUi');
      this.mb.unsubscribe(OO.EVENTS.MULTI_AUDIO_CHANGED, 'customerUi');
      this.state.isPlaybackReadySubscribed = false; // ad events

      if (_utils.default.canRenderSkin()) {
        // since iPhone < iOS10 is always playing in full screen and not showing our skin, don't need to render skin
        this.mb.unsubscribe(OO.EVENTS.ADS_PLAYED, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.WILL_PLAY_ADS, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.AD_POD_STARTED, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.WILL_PLAY_SINGLE_AD, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.SINGLE_AD_PLAYED, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.PLAY_NONLINEAR_AD, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.NONLINEAR_AD_PLAYED, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.HIDE_NONLINEAR_AD, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.SHOW_NONLINEAR_AD, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.SHOW_AD_SKIP_BUTTON, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.SHOW_AD_CONTROLS, 'customerUi');
        this.mb.unsubscribe(OO.EVENTS.SHOW_AD_MARQUEE, 'customerUi');

        if (OO.EVENTS.DISCOVERY_API && OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED) {
          this.mb.unsubscribe(OO.EVENTS.DISCOVERY_API.RELATED_VIDEOS_FETCHED, 'customerUi');
        }
      }

      this.state.isSubscribed = false;
    },

    /* --------------------------------------------------------------------
     Skin state -> control skin
     --------------------------------------------------------------------- */
    renderSkin: function renderSkin(args) {
      if (this.state.configLoaded) {
        if (args) {
          this.state = (0, _deepmerge.default)(this.state, args);
        }

        this.skin.switchComponent(this.state);
      }
    },

    /* --------------------------------------------------------------------
     skin UI-action -> publish event to core player
     --------------------------------------------------------------------- */
    toggleDiscoveryScreen: function toggleDiscoveryScreen() {
      switch (this.state.playerState) {
        case _constants.default.STATE.PLAYING:
          this.pausedCallback = function () {
            this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
            this.state.playerState = _constants.default.STATE.PAUSE;
            this.state.pluginsElement.addClass('oo-overlay-blur');
            this.renderSkin();
            OO.log('finished toggleDiscoveryScreen');
          }.bind(this);

          this.togglePlayPause();
          this.sendDiscoveryDisplayEventRelatedVideos('pauseScreen');
          this.state.discoverySource = _constants.default.SCREEN.PAUSE_SCREEN;
          break;

        case _constants.default.STATE.PAUSE:
          if (this.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
            this.state.pauseAnimationDisabled = true;
            this.state.pluginsElement.removeClass('oo-overlay-blur');
            this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
          } else {
            this.sendDiscoveryDisplayEventRelatedVideos('pauseScreen');
            this.state.discoverySource = _constants.default.SCREEN.PAUSE_SCREEN;
            this.state.pluginsElement.addClass('oo-overlay-blur');
            this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
          }

          break;

        case _constants.default.STATE.END:
          if (this.state.screenToShow === _constants.default.SCREEN.DISCOVERY_SCREEN) {
            this.state.pluginsElement.removeClass('oo-overlay-blur');
            this.state.screenToShow = _constants.default.SCREEN.END_SCREEN;
          } else {
            this.sendDiscoveryDisplayEventRelatedVideos('endScreen');
            this.state.discoverySource = _constants.default.SCREEN.END_SCREEN;
            this.state.pluginsElement.addClass('oo-overlay-blur');
            this.state.screenToShow = _constants.default.SCREEN.DISCOVERY_SCREEN;
            this.skin.props.skinConfig.discoveryScreen.showCountDownTimerOnEndScreen = false;
          }

          break;

        default:
          break;
      }

      this.renderSkin();
    },
    toggleMute: function toggleMute(muted, fromUser) {
      this.mb.publish(OO.EVENTS.CHANGE_MUTE_STATE, muted, null, fromUser);
    },
    toggleStereoVr: function toggleStereoVr() {
      this.isVrStereo = !this.isVrStereo;
      this.mb.publish(OO.EVENTS.TOGGLE_STEREO_VR);
    },
    moveVrToDirection: function moveVrToDirection(rotate, direction) {
      this.mb.publish(OO.EVENTS.MOVE_VR_TO_DIRECTION, this.focusedElement, rotate, direction);
    },
    togglePlayPause: function togglePlayPause(event) {
      switch (this.state.playerState) {
        case _constants.default.STATE.START:
          if (!this.state.isInitialPlay) {
            this.mb.publish(OO.EVENTS.INITIAL_PLAY, Date.now(), false);
          }

          break;

        case _constants.default.STATE.END:
          this.mb.publish(OO.EVENTS.REPLAY);
          break;

        case _constants.default.STATE.PAUSE:
          this.isNewVrVideo = false;
          this.customPlayPause(event, OO.EVENTS.PLAY);
          break;

        case _constants.default.STATE.PLAYING:
          this.isNewVrVideo = false; // In some cases the controlBarVisible var might get out of sync if not
          // set explicitly when pausing. When this happens the control bar flashes
          // when the playingScreen is rendered, so we want to avoid that.

          this.showControlBar();
          this.customPlayPause(event, OO.EVENTS.PAUSE);
          break;

        default:
          break;
      }
    },

    /**
     * Override actions for play-pause in case
     * if page-level param "onTogglePlayPause" is defined
     * @param {Object} event - event object
     * @param {String} nextPublishEvent - next state should be published to set
     */
    customPlayPause: function customPlayPause(event, nextPublishEvent) {
      if (event && typeof this.state.playerParam.onTogglePlayPause === 'function') {
        // The function must have access to the current state of the player and
        // to the event
        this.state.playerParam.onTogglePlayPause(event, this.state.playerState);
      } else if (nextPublishEvent) {
        this.mb.publish(nextPublishEvent);
      }
    },
    seek: function seek(seconds) {
      if (this.state.playerState === _constants.default.STATE.END) {
        this.endSeeking();
        this.mb.publish(OO.EVENTS.REPLAY, seconds);
      } else {
        this.mb.publish(OO.EVENTS.SEEK, seconds);
      }
    },
    onLiveClick: function onLiveClick() {
      this.mb.publish(OO.EVENTS.LIVE_BUTTON_CLICKED);
    },
    setVolume: function setVolume(volume) {
      this.mb.publish(OO.EVENTS.CHANGE_VOLUME, volume);
    },
    handleMuteClick: function handleMuteClick() {
      this.toggleMute(!this.state.volumeState.muted, true);
    },
    toggleShareScreen: function toggleShareScreen() {
      if (this.state.screenToShow === _constants.default.SCREEN.SHARE_SCREEN) {
        this.closeScreen();
      } else if (this.state.playerState === _constants.default.STATE.PLAYING) {
        this.pausedCallback = function () {
          this.state.pluginsElement.addClass('oo-overlay-blur');
          this.state.screenToShow = _constants.default.SCREEN.SHARE_SCREEN;
          this.renderSkin();
        }.bind(this);

        this.mb.publish(OO.EVENTS.PAUSE);
      } else {
        this.state.screenToShow = _constants.default.SCREEN.SHARE_SCREEN;
        this.state.pluginsElement.addClass('oo-overlay-blur');
        this.renderSkin();
      }
    },

    /**
     * Toggles the provided screen. Will switch to the provided screen
     * if that screen is not active, otherwise it will close the screen.
     * @param {string} screen The screen to toggle
     * @param {boolean} doNotPause Set to true to avoid pausing when toggling the screen
     */
    toggleScreen: function toggleScreen(screen) {
      var doNotPause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.isNewVrVideo = false;

      if (this.state.screenToShow === screen) {
        this.closeScreen();
      } else if (this.state.playerState === _constants.default.STATE.PLAYING) {
        this.pausedCallback = function () {
          this.state.pluginsElement.addClass('oo-overlay-blur');
          this.state.screenToShow = screen;
          this.renderSkin();
        }.bind(this);

        if (doNotPause) {
          this.pausedCallback();
          this.pausedCallback = null;
        } else {
          this.mb.publish(OO.EVENTS.PAUSE);
        }
      } else {
        this.state.screenToShow = screen;
        this.state.pluginsElement.addClass('oo-overlay-blur');
        this.renderSkin();
      }
    },

    /**
     * The function handles a click on multiAudio icon
     */
    toggleMultiAudioScreen: function toggleMultiAudioScreen() {
      if (this.state.screenToShow === _constants.default.SCREEN.MULTI_AUDIO_SCREEN) {
        if (this.state.playerState === _constants.default.STATE.END) {
          this.state.screenToShow = _constants.default.SCREEN.END_SCREEN;
        } else if (this.state.playerState === _constants.default.STATE.PAUSE) {
          this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
        } else {
          this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
        }
      } else {
        this.state.screenToShow = _constants.default.SCREEN.MULTI_AUDIO_SCREEN;
      }

      this.renderSkin();
    },

    /**
     * Handler for the POSITION_IN_PLAYLIST_DETERMINED event, which controls whether
     * the Previous/Next video buttons are displayed.
     * @private
     * @param {type} eventName The name of the event
     * @param {type} paramsDirty The event's parameters
     */
    onPositionInPlaylistDetermined: function onPositionInPlaylistDetermined(eventName, paramsDirty) {
      var params = paramsDirty || {};
      this.state.skipControls.hasPreviousVideos = !!params.hasPreviousVideos;
      this.state.skipControls.hasNextVideos = !!params.hasNextVideos;
    },

    /**
     * Update the scrubber bar hover state for other components that react to it.
     * Called by the scrubber bar component when its hover state changes.
     * @private
     * @param {boolean} isHovering True if the control bar is hovered, false otherwise
     */
    setScrubberBarHoverState: function setScrubberBarHoverState(isHovering) {
      if (this.state.scrubberBar.isHovering !== isHovering) {
        this.state.scrubberBar.isHovering = isHovering;
        this.renderSkin();
      }
    },

    /**
     * "Previous video" button handler. Either rewinds the video or requests the
     * previous video if the playhead is close to the beginning of the video or the
     * button is clicked repeatedly in quick succession.
     * @private
     */
    rewindOrRequestPreviousVideo: function rewindOrRequestPreviousVideo() {
      var currentTimestamp = _utils.default.getCurrentTimestamp();

      var timeElapsed = currentTimestamp - this.state.skipControls.requestPreviousTimestamp; // Button has been clicked once more in a short amount of time, playhead
      // is below a certain threshold, or player is stalled after seeking, request previous video.

      if (this.state.seeking || timeElapsed < _constants.default.UI.REQUEST_PREVIOUS_TIME_THRESHOLD || this.state.mainVideoPlayhead < _constants.default.UI.REQUEST_PREVIOUS_PLAYHEAD_THRESHOLD) {
        this.mb.publish(OO.EVENTS.REQUEST_PREVIOUS_VIDEO);
      } else {
        this.updateSeekingPlayhead(0);
        this.seek(0);
      }

      this.state.skipControls.requestPreviousTimestamp = currentTimestamp;
    },

    /**
     * Requests the next video from either the Playlists or Discovery plugins.
     * @private
     */
    requestNextVideo: function requestNextVideo() {
      this.mb.publish(OO.EVENTS.REQUEST_NEXT_VIDEO);
    },

    /**
     * Requests that the player set its playback speed to the specified value.
     * @private
     * @param {Number} playbackSpeed A number representing the rate by which playback should advance
     */
    setPlaybackSpeed: function setPlaybackSpeed(playbackSpeed) {
      this.mb.publish(OO.EVENTS.SET_PLAYBACK_SPEED, playbackSpeed);
    },

    /**
     * Stores the focus id of the currently focused element in the controller's state.
     * @private
     * @param {String} focusedControl The value of the focusId property of the currently focused control or null if no control is focused
     */
    setFocusedControl: function setFocusedControl(focusedControl) {
      this.state.focusedControl = focusedControl;
    },
    sendDiscoveryClickEvent: function sendDiscoveryClickEvent(selectedContentData, isAutoUpNext) {
      this.state.pluginsElement.removeClass('oo-overlay-blur');

      if (isAutoUpNext) {
        this.state.upNextInfo.delayedContentData = selectedContentData;
        this.state.upNextInfo.delayedSetEmbedCodeEvent = true;
      } else {
        this.state.upNextInfo.showing = false;
        this.state.screenToShow = _constants.default.SCREEN.LOADING_SCREEN;
        this.renderSkin();
        this.mb.publish(OO.EVENTS.PAUSE);

        if (selectedContentData.clickedVideo.embed_code) {
          this.mb.publish(OO.EVENTS.SET_EMBED_CODE, selectedContentData.clickedVideo.embed_code, this.state.playerParam);
        } else if (selectedContentData.clickedVideo.asset) {
          this.mb.publish(OO.EVENTS.SET_ASSET, selectedContentData.clickedVideo.asset);
        }

        this.mb.publish(OO.EVENTS.DISCOVERY_API.SEND_CLICK_EVENT, selectedContentData);
      }
    },
    sendDiscoveryDisplayEvent: function sendDiscoveryDisplayEvent(assetPosition, pageSize, uiTag, asset, customData) {
      customData.source = this.state.discoverySource; // eslint-disable-line
      // With "Up Next" panel we only pass the data of the asset
      // that is currently shown

      if (asset.embed_code) {
        var eventData = {
          metadata: _utils.default.getDiscoveryEventData(assetPosition, pageSize, uiTag, asset, customData)
        };
        this.mb.publish(OO.EVENTS.DISCOVERY_API.SEND_DISPLAY_EVENT, eventData);
      }
    },

    /**
     * This event is for compatability with the old thrift analytics pipeline that expects
     * the discovery display event to contain a single list of all displayed
     * discovery assets in one event as "relatedVideos".
     * @param {string} screenName - the name of the screen
     * @param {string} embedCode - the asset embed code
     */
    sendDiscoveryDisplayEventRelatedVideos: function sendDiscoveryDisplayEventRelatedVideos(screenName, embedCode) {
      var relatedVideosData = _utils.default.getPropertyValue(this.state.discoveryData, 'relatedVideos', []);

      var relatedVideos = relatedVideosData; // With "Up Next" panel we only pass the data of the asset
      // that is currently shown

      if (embedCode) {
        var eventAsset = _.find(relatedVideosData, function (relatedVideo) {
          return relatedVideo.embed_code === embedCode;
        });

        relatedVideos = eventAsset ? [eventAsset] : [];
      }

      var eventData = {
        relatedVideos: relatedVideos,
        custom: {
          source: screenName
        }
      };
      this.mb.publish(OO.EVENTS.DISCOVERY_API.SEND_DISPLAY_EVENT, eventData);
    },
    togglePopover: function togglePopover(menu) {
      var menuOptions = this.state[menu];

      if (menuOptions) {
        menuOptions.showPopover = !menuOptions.showPopover;
        this.renderSkin();
      }
    },
    receiveVideoQualityChangeEvent: function receiveVideoQualityChangeEvent(event, targetBitrate) {
      this.state.videoQualityOptions.selectedBitrate = {
        id: targetBitrate
      };
      this.renderSkin({
        videoQualityOptions: {
          availableBitrates: this.state.videoQualityOptions.availableBitrates,
          selectedBitrate: this.state.videoQualityOptions.selectedBitrate,
          showPopover: this.state.videoQualityOptions.showPopover
        }
      });

      if (this.state.videoQualityOptions.showPopover === true) {
        this.togglePopover(_constants.default.MENU_OPTIONS.VIDEO_QUALITY);
      }
    },
    sendVideoQualityChangeEvent: function sendVideoQualityChangeEvent(selectedContentData) {
      this.state.videoQualityOptions.selectedBitrate = {
        id: selectedContentData.id
      };
      this.mb.publish(OO.EVENTS.SET_TARGET_BITRATE, selectedContentData.id);
    },
    setClosedCaptionsInfo: function setClosedCaptionsInfo(videoId) {
      var closedCaptionsInfo = this.state.closedCaptionsInfoCache[videoId];

      if (!closedCaptionsInfo) {
        return;
      } // Load the CC info for the video with the given id onto the state


      this.state.closedCaptionOptions.availableLanguages = closedCaptionsInfo;

      if (this.state.closedCaptionOptions.enabled) {
        this.setClosedCaptionsLanguage();
      }
    },

    /**
     * Requests that closed captions either be set with the currently active
     * language or be disabled.
     * @private
     * @param {Object} paramsDirty - An object with properties that provide additional information
     * about the requested operation.
     *  - isGoingFullScreen: {Boolean} Determines whether or not the player is about
     * to enter fullscreen mode when this operation is requested.
     */
    setClosedCaptionsLanguage: function setClosedCaptionsLanguage(paramsDirty) {
      var params = paramsDirty || {};
      var availableLanguages = this.state.closedCaptionOptions.availableLanguages; // if saved language not in available languages, set to first available language

      if (availableLanguages && (this.state.closedCaptionOptions.language === null || !_.contains(availableLanguages.languages, this.state.closedCaptionOptions.language))) {
        var _availableLanguages$l = _slicedToArray(availableLanguages.languages, 1);

        this.state.closedCaptionOptions.language = _availableLanguages$l[0];
      }

      var language = this.state.closedCaptionOptions.enabled ? this.state.closedCaptionOptions.language : '';
      var mode = this.state.closedCaptionOptions.enabled ? OO.CONSTANTS.CLOSED_CAPTIONS.HIDDEN : OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED;
      this.mb.publish(OO.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE, language, {
        mode: mode,
        isFullScreen: this.state.fullscreen,
        isGoingFullScreen: !!params.isGoingFullScreen
      });
    },

    /**
     * @description Close an extra screen
     * @private
     */
    closeScreen: function closeScreen() {
      this.state.pluginsElement.removeClass('oo-overlay-blur');
      this.state.pauseAnimationDisabled = true;

      if (this.state.playerState === _constants.default.STATE.PAUSE) {
        this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
      } else if (this.state.playerState === _constants.default.STATE.END) {
        this.state.screenToShow = _constants.default.SCREEN.END_SCREEN;
      } else if (this.state.playerState === _constants.default.STATE.START) {
        this.state.screenToShow = _constants.default.SCREEN.START_SCREEN;
      } else {
        this.state.screenToShow = _constants.default.SCREEN.PLAYING_SCREEN;
      }

      this.renderSkin();
    },

    /**
     * Handles the CHANGE_CLOSED_CAPTION_LANGUAGE event. Fired by the core when
     * a change in closed captions language is requested.
     * @private
     * @param {String} event The name of the event that was fired
     * @param {String} language The new closed captions language to set, or 'none' if captions are to be disabled
     * @param {Object} params An object with additional options for this operation
     *  - forceEnabled: {Boolean} If true this will ensure that captions are also turned on after the new language is set
     */
    onChangeClosedCaptionLanguage: function onChangeClosedCaptionLanguage(event, language) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (language === _constants.default.CLOSED_CAPTIONS.NO_LANGUAGE) {
        if (this.state.closedCaptionOptions.enabled) {
          this.toggleClosedCaptionEnabled();
        }

        return;
      }

      var availableLanguages = this.state.closedCaptionOptions.availableLanguages; // validate language is available before update and save

      if (language && availableLanguages && _.contains(availableLanguages.languages, language)) {
        // The act of changing the CC language doesn't currently enable captions
        // automatically. The core will set the forceEnabled parameter to true when
        // it is necessary to also enable captions themselves
        if (params.forceEnabled) {
          this.state.closedCaptionOptions.enabled = true;
          this.state.persistentSettings.closedCaptionOptions.enabled = true;
        }

        this.state.closedCaptionOptions.language = language;
        this.state.persistentSettings.closedCaptionOptions.language = language;
        var captionLanguage = this.state.closedCaptionOptions.enabled ? language : '';
        var mode = this.state.closedCaptionOptions.enabled ? OO.CONSTANTS.CLOSED_CAPTIONS.HIDDEN : OO.CONSTANTS.CLOSED_CAPTIONS.DISABLED; // publish set closed caption event

        this.mb.publish(OO.EVENTS.SET_CLOSED_CAPTIONS_LANGUAGE, captionLanguage, {
          mode: mode,
          isFullScreen: this.state.fullscreen
        }); // update skin, save new closed caption language

        this.renderSkin();
        this.mb.publish(OO.EVENTS.SAVE_PLAYER_SETTINGS, this.state.persistentSettings);
      } else {
        // if language not in available languages, log error
        OO.log('Invalid closed caption language.');
      }
    },
    onClosedCaptionChange: function onClosedCaptionChange(name, value) {
      this.state.closedCaptionOptions[name] = value;
      this.state.persistentSettings.closedCaptionOptions[name] = value;

      if (name === 'language') {
        this.setClosedCaptionsLanguage();
        this.setCaptionDirection(value);
      }

      this.renderSkin();
      this.mb.publish(OO.EVENTS.SAVE_PLAYER_SETTINGS, this.state.persistentSettings);
    },
    onClosedCaptionLanguageChange: function(name, value){
      this.onClosedCaptionChange('language', value);
    },
    onHideCC: function (name, value) {
      // Remove CC button from Skin's buttons list
      var buttons = this.skin.props.skinConfig.buttons.desktopContent;
      var ccIndex = null;

      for(var i=0; i < buttons.length; i++){
          if(buttons[i].name == 'closedCaption'){
              ccIndex = i;
          }
      }

      if(ccIndex)
          buttons.splice(ccIndex, 1);

      // turn-off CC as well
      this._disableCC();
    },
    _disableCC: function(){
        this.state.closedCaptionOptions.enabled = false;
        this.state.persistentSettings.closedCaptionOptions['enabled'] = !!this.state.closedCaptionOption.enabled;
        this.setClosedCaptionsLanguage();
        this.renderSkin();
        this.mb.publish(OO.EVENTS.SAVE_PLAYER_SETTINGS, this.state.persistentSettings);
    },

    /**
     * @description the function set direction for CC;
     * if chosen language is right-to-left language set rtl as value for this.captionDirection
     * else set this.captionDirection as ''
     * @private
     * @param {String} languageCode - ISO-639 language code
     */
    setCaptionDirection: function setCaptionDirection(languageCode) {
      if (typeof languageCode === 'string' && languageCode.length === 2 && this.state.config.languageDirections !== null && _typeof(this.state.config.languageDirections) === 'object') {
        if (this.state.config.languageDirections[languageCode]) {
          this.captionDirection = this.state.config.languageDirections[languageCode];
        } else {
          this.captionDirection = '';
        }
      }
    },

    /**
     * Used to enable or disable the CSS workaround that prevents anamorphic videos from
     * being distorted on Firefox. The fix will only be enabled if ots_stretch_to_output
     * is set to true in the player attributes.
     * Note that currently the oo-anamorphic class has effect only on Firefox.
     * @param {boolen} enabled A value that determines whether to enable or disable the anamorphic videos CSS fix.
     */
    trySetAnamorphicFixState: function trySetAnamorphicFixState(enabled) {
      if (!this.state || !this.state.mainVideoInnerWrapper) {
        return;
      }

      if (enabled) {
        var isAnamorphic = _utils.default.getPropertyValue(this.state.attributes, 'provider.ots_stretch_to_output'); // Only enable anamorphic videos fix if video actually requires it


        if (isAnamorphic === true || isAnamorphic === 'true') {
          this.state.mainVideoInnerWrapper.addClass('oo-anamorphic');
          OO.log('Anamorphic video fix: ON');
        }
      } else {
        this.state.mainVideoInnerWrapper.removeClass('oo-anamorphic');
        OO.log('Anamorphic video fix: OFF');
      }
    },
    toggleClosedCaptions: function toggleClosedCaptions() {
      this.mb.publish(OO.EVENTS.TOGGLE_CLOSED_CAPTIONS);
    },
    toggleClosedCaptionEnabled: function toggleClosedCaptionEnabled() {
      this.state.closedCaptionOptions.enabled = !this.state.closedCaptionOptions.enabled;
      this.state.persistentSettings.closedCaptionOptions.enabled = !!this.state.closedCaptionOptions.enabled;
      this.setClosedCaptionsLanguage();
      this.renderSkin();
      this.mb.publish(OO.EVENTS.SAVE_PLAYER_SETTINGS, this.state.persistentSettings);
    },
    upNextDismissButtonClicked: function upNextDismissButtonClicked() {
      this.state.upNextInfo.countDownCancelled = true;
      this.state.upNextInfo.showing = false;
      this.renderSkin();
    },
    toggleMoreOptionsScreen: function toggleMoreOptionsScreen(moreOptionsItems) {
      if (this.state.screenToShow === _constants.default.SCREEN.MORE_OPTIONS_SCREEN) {
        this.closeMoreOptionsScreen();
      } else {
        this.displayMoreOptionsScreen(moreOptionsItems);
      }
    },
    closeMoreOptionsScreen: function closeMoreOptionsScreen() {
      this.state.pauseAnimationDisabled = true;
      this.state.screenToShow = _constants.default.SCREEN.PAUSE_SCREEN;
      this.state.playerState = _constants.default.STATE.PAUSE;
      this.state.moreOptionsItems = null;
      this.state.pluginsElement.removeClass('oo-overlay-blur');
      this.renderSkin();
    },
    displayMoreOptionsScreen: function displayMoreOptionsScreen(moreOptionsItems) {
      if (this.state.playerState === _constants.default.STATE.PLAYING) {
        this.pausedCallback = function () {
          this.state.screenToShow = _constants.default.SCREEN.MORE_OPTIONS_SCREEN;
          this.state.pluginsElement.addClass('oo-overlay-blur');
          this.renderSkin();
        }.bind(this);

        this.mb.publish(OO.EVENTS.PAUSE);
      } else {
        this.state.screenToShow = _constants.default.SCREEN.MORE_OPTIONS_SCREEN;
        this.state.pluginsElement.addClass('oo-overlay-blur');
        this.renderSkin();
      }

      this.state.moreOptionsItems = moreOptionsItems;
    },
    enablePauseAnimation: function enablePauseAnimation() {
      this.state.pauseAnimationDisabled = false;
    },
    beginSeeking: function beginSeeking() {
      this.state.seeking = true;
    },
    endSeeking: function endSeeking() {
      this.state.seeking = false;
    },
    updateSeekingPlayhead: function updateSeekingPlayhead(playheadDirty) {
      var playhead = Math.min(Math.max(0, playheadDirty), this.skin.state.duration);
      this.skin.updatePlayhead(playhead, this.skin.state.duration, this.skin.state.buffered).catch(function () {
        OO.log('updateSeekingPlayhead: Could not set new state for skin');
      });
    },
    hideVolumeSliderBar: function hideVolumeSliderBar() {
      this.state.volumeState.volumeSliderVisible = false;
      this.renderSkin();
    },
    showVolumeSliderBar: function showVolumeSliderBar() {
      this.state.volumeState.volumeSliderVisible = true;

      if (_utils.default.isAndroid()) {
        this.startHideVolumeSliderTimer();
      }

      this.renderSkin();
    },
    startHideVolumeSliderTimer: function startHideVolumeSliderTimer() {
      var _this7 = this;

      this.cancelTimer();
      var timeout = 3000;
      var timer = setTimeout(function () {
        if (_this7.state.volumeState.volumeSliderVisible === true) {
          _this7.hideVolumeSliderBar();
        }
      }, timeout);
      this.state.timer = timer;
    },
    startHideControlBarTimer: function startHideControlBarTimer() {
      var _this8 = this;

      if (this.skin.props.skinConfig.controlBar.autoHide === true && !this.state.audioOnly) {
        this.cancelTimer();
        var timeout = 3000;
        var timer = setTimeout(function () {
          if (_this8.state.controlBarVisible === true) {
            _this8.hideControlBar();
          }
        }, timeout);
        this.state.timer = timer;
      }
    },
    showControlBar: function showControlBar() {
      var oldState = this.state.controlBarVisible;
      this.state.controlBarVisible = true;

      if (this.state.controlBarVisible !== oldState) {
        this.renderSkin();
      }
    },
    hideControlBar: function hideControlBar() {
      if (!this.state.audioOnly) {
        var oldState = this.state.controlBarVisible;
        this.state.controlBarVisible = false;

        if (_utils.default.isAndroid()) {
          this.hideVolumeSliderBar();
        }

        if (this.state.controlBarVisible !== oldState) {
          this.renderSkin();
        }
      }
    },
    cancelTimer: function cancelTimer() {
      if (this.state.timer !== null) {
        clearTimeout(this.state.timer);
        this.state.timer = null;
      }
    },
    // use fixed aspect ratio number from skinConfig
    updateAspectRatio: function updateAspectRatio() {
      if (this.skin && this.skin.props.skinConfig.responsive.aspectRatio && this.skin.props.skinConfig.responsive.aspectRatio !== 'auto') {
        if (this.skin.props.skinConfig.responsive.aspectRatio === 'fluid') {
          var container = this.state.mainVideoContainer[0].parentNode;
          var containerWidth = container.clientWidth;
          var containerHeight = container.clientHeight;
          this.state.mainVideoAspectRatio = this.calculateAspectRatio(containerWidth, containerHeight);
        } else {
          this.state.mainVideoAspectRatio = this.skin.props.skinConfig.responsive.aspectRatio;
        }

        this.setAspectRatio();
      }
    },
    // returns original video aspect ratio
    calculateAspectRatio: function calculateAspectRatio(width, height) {
      var aspectRatio = (height / width * 100).toFixed(2);
      return aspectRatio;
    },
    // set Main Video Element Wrapper padding-top to aspect ratio
    setAspectRatio: function setAspectRatio() {
      if (this.state.mainVideoAspectRatio > 0 && !this.state.audioOnly) {
        this.state.mainVideoInnerWrapper.css('padding-top', "".concat(this.state.mainVideoAspectRatio, "%"));
      }
    },
    // find descendant video element
    findMainVideoElement: function findMainVideoElement(element) {
      var elements = []; // use actual element

      if (element[0]) {
        element = element[0]; // eslint-disable-line
      } // find html5 video


      if (element.tagName && element.tagName.toLowerCase().indexOf(_constants.default.MEDIA_TYPE.VIDEO) !== -1) {
        this.state.mainVideoMediaType = _constants.default.MEDIA_TYPE.HTML5;
      } else if (element.getElementsByTagName(_constants.default.MEDIA_TYPE.VIDEO).length) {
        elements = element.getElementsByTagName(_constants.default.MEDIA_TYPE.VIDEO);

        if (elements.length) {
          element = elements[0]; // eslint-disable-line

          this.state.mainVideoMediaType = _constants.default.MEDIA_TYPE.HTML5;
        }
      } else if (element.tagName && element.tagName.toLowerCase().indexOf(_constants.default.MEDIA_TYPE.OBJECT) !== -1) {
        // find flash object
        this.state.mainVideoMediaType = _constants.default.MEDIA_TYPE.FLASH;
      } else if (element.getElementsByTagName(_constants.default.MEDIA_TYPE.OBJECT).length) {
        elements = element.getElementsByTagName(_constants.default.MEDIA_TYPE.OBJECT);

        if (elements.length) {
          element = elements[0]; // eslint-disable-line

          this.state.mainVideoMediaType = _constants.default.MEDIA_TYPE.FLASH;
        }
      }

      return element;
    },

    /**
     * Adds a blur effect to the video
     * @protected
     * @method Html5Skin#addBlur
     */
    addBlur: function addBlur() {
      // [PLAYER-2220]: videoVr should not blur. This prevents a circular review on a pause.
      if (!this.videoVr && this.state.mainVideoElement && this.state.mainVideoElement.classList) {
        this.state.mainVideoElement.classList.add('oo-blur');
      }
    },
    removeBlur: function removeBlur() {
      if (this.state.mainVideoElement && this.state.mainVideoElement.classList) {
        this.state.mainVideoElement.classList.remove('oo-blur');
      } // [PBW-6954]
      // A race condition is causing the skin to pick the div container rather than
      // the actual video element when VC_VIDEO_ELEMENT_CREATED is fired. As a temporary
      // workaround, we remove the blur class from both the video element and it's container.


      if (this.state.mainVideoElementContainer && this.state.mainVideoElementContainer.classList) {
        this.state.mainVideoElementContainer.classList.remove('oo-blur');
      }
    }
  };
  return Html5Skin;
}

module.exports = controller;

},{"../config/languageFiles/en.json":1,"../config/languageFiles/es.json":2,"../config/languageFiles/ja.json":3,"../config/languageFiles/ko.json":4,"../config/languageFiles/zh.json":5,"../config/skin":6,"./components/accessibilityControls":7,"./components/utils":63,"./constants/constants":69,"./skin":73,"deepmerge":361,"react":378,"react-dom":374,"screenfull":386}],72:[function(require,module,exports){
"use strict";

require("@babel/polyfill/noConflict");

var controller = require('../js/controller');

// MCKA:custom
OOV4.plugin('Html5Skin', controller);

},{"../js/controller":71,"@babel/polyfill/noConflict":85}],73:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _playingScreen = require("./views/playingScreen");

var _pauseScreen = require("./views/pauseScreen");

var _adScreen = _interopRequireDefault(require("./views/adScreen"));

var _utils = _interopRequireDefault(require("./components/utils"));

var _constants = _interopRequireDefault(require("./constants/constants"));

var _spinner = _interopRequireDefault(require("./components/spinner"));

var _onOffSwitch = _interopRequireDefault(require("./components/closed-caption/onOffSwitch"));

var _closedCaptionPanel = _interopRequireDefault(require("./components/closed-caption/closedCaptionPanel"));

var _discoveryPanel = _interopRequireDefault(require("./components/discoveryPanel"));

var _videoQualityPanel = _interopRequireDefault(require("./components/videoQualityPanel"));

var _playbackSpeedPanel = _interopRequireDefault(require("./components/playbackSpeedPanel"));

var _closedCaptionMultiAudioMenu = _interopRequireDefault(require("./components/closed-caption-multi-audio-menu/closedCaptionMultiAudioMenu"));

var _sharePanel = _interopRequireDefault(require("./components/sharePanel"));

var _volumePanel = _interopRequireDefault(require("./components/volumePanel"));

var _moreOptionsPanel = _interopRequireDefault(require("./components/moreOptionsPanel"));

var _endScreen = _interopRequireDefault(require("./views/endScreen"));

var _startScreen = _interopRequireDefault(require("./views/startScreen"));

var _errorScreen = _interopRequireDefault(require("./views/errorScreen"));

var _contentScreen = _interopRequireDefault(require("./views/contentScreen"));

var _audioOnlyScreen = _interopRequireDefault(require("./views/audioOnlyScreen"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * The core React component
 */
var Skin =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Skin, _React$Component);

  function Skin(props) {
    var _this;

    _classCallCheck(this, Skin);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Skin).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onResize", function () {
      _this.generateResponsiveData();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getDefaultElementHeight", function (componentWidth) {
      var ratioCoef = 0.5625; // y - coefficient for default aspect ratio 16:9

      var componentHeight = 0;

      if (componentWidth && _utils.default.ensureNumber(componentWidth)) {
        componentHeight = componentWidth * ratioCoef;
      }

      return componentHeight;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "generateResponsiveData", function () {
      var componentWidth = 0;
      var componentHeight = 0;

      var dom = _reactDom.default.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this))); // eslint-disable-line


      var _this$props = _this.props,
          controller = _this$props.controller,
          skinConfig = _this$props.skinConfig;

      if (dom) {
        componentWidth = Math.ceil(dom.getBoundingClientRect().width);
        componentHeight = dom.parentNode ? dom.parentNode.getBoundingClientRect().height : componentHeight;

        if (!componentHeight) {
          var width = componentWidth; // If width === 0, we can use width of mainVideoContainer

          if (!width && !!controller.state.mainVideoContainer) {
            width = controller.state.mainVideoContainer.width();
          } // Height must exist, if height is 0 or do not exist, we should use default value for height


          componentHeight = _this.getDefaultElementHeight(width);
        }
      }

      var breakpoints = skinConfig.responsive.breakpoints;
      var breakpointData = {
        classes: {},
        ids: {}
      };

      if (controller.state.audioOnly) {
        breakpointData.classes[breakpoints['audio-only-xs'].name] = true;
        breakpointData.ids[breakpoints['audio-only-xs'].id] = true;
      } else {
        // loop through breakpoints from skinConfig
        // generate Classname object with name and min/max width
        Object.keys(breakpoints).forEach(function (key) {
          // min width only, 1st breakpoint
          if (breakpoints[key].minWidth && !breakpoints[key].maxWidth) {
            breakpointData.classes[breakpoints[key].name] = componentWidth >= breakpoints[key].minWidth;
            breakpointData.ids[breakpoints[key].id] = componentWidth >= breakpoints[key].minWidth; // min and max, middle breakpoints
          } else if (breakpoints[key].minWidth && breakpoints[key].maxWidth) {
            var result = componentWidth >= breakpoints[key].minWidth && componentWidth <= breakpoints[key].maxWidth;
            breakpointData.classes[breakpoints[key].name] = result;
            breakpointData.ids[breakpoints[key].id] = result; // max width only, last breakpoint
          } else if (breakpoints[key].maxWidth && !breakpoints[key].minWidth) {
            breakpointData.classes[breakpoints[key].name] = componentWidth <= breakpoints[key].maxWidth;
            breakpointData.ids[breakpoints[key].id] = componentWidth <= breakpoints[key].maxWidth;
          }
        });
      } // set responsive data to state


      _this.setState({
        componentWidth: componentWidth,
        componentHeight: componentHeight,
        responsiveClass: (0, _classnames.default)(breakpointData.classes),
        responsiveId: (0, _classnames.default)(breakpointData.ids)
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClickOutsidePlayer", function () {
      var controller = _this.props.controller;
      controller.state.accessibilityControlsEnabled = false;
      controller.state.isClickedOutside = true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "switchComponent", function (args) {
      var newState = args || {};

      _this.setState(newState);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updatePlayhead", function (newPlayhead, newDuration, newBuffered, adPlayhead) {
      return new Promise(function (resolve) {
        _this.setState(function (prevState) {
          var duration = _utils.default.ensureNumber(newDuration, prevState.duration);

          var totalTime = _this.getTotalTime(duration);

          var currentPlayhead = _utils.default.ensureNumber(newPlayhead, prevState.currentPlayhead);

          var buffered = _utils.default.ensureNumber(newBuffered, prevState.buffered);

          var currentAdPlayhead = _utils.default.ensureNumber(adPlayhead, prevState.currentAdPlayhead);

          return {
            currentPlayhead: currentPlayhead,
            duration: duration,
            buffered: buffered,
            currentAdPlayhead: currentAdPlayhead,
            totalTime: totalTime
          };
        }, resolve);
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTotalTime", function (duration) {
      var ensureNumberDuration = _utils.default.ensureNumber(duration) ? _utils.default.ensureNumber(duration) : 0;

      var totalTime = _utils.default.formatSeconds(ensureNumberDuration);

      return totalTime;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getPlayheadTime", function () {
      var _this$state = _this.state,
          currentPlayhead = _this$state.currentPlayhead,
          duration = _this$state.duration,
          isLiveStream = _this$state.isLiveStream;

      if (!Number.isFinite(parseInt(currentPlayhead, 0)) || !Number.isFinite(parseInt(duration, 0))) {
        return '--:--';
      }

      var playheadTime = _utils.default.formatSeconds(parseInt(currentPlayhead, 0));

      if (isLiveStream) {
        // checking timeShift < 1 seconds (not === 0) as processing of the click after we rewinded and then went live may take some time
        var timeShift = currentPlayhead - duration;
        var isLiveNow = Math.abs(timeShift) < 1;
        playheadTime = isLiveNow ? null : _utils.default.formatSeconds(timeShift);
      }

      return playheadTime;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrPlayerMouseDown", function (event) {
      // continue only if video is vr and non in stereo mode
      var controller = _this.props.controller;

      if (!controller || controller.isVrStereo || !controller.videoVr) {
        return;
      } // Sets coordinate values for further calculation of rotation coordinates


      var coords = _utils.default.getCoords(event);

      _this.setState({
        isVrMouseDown: true,
        xVrMouseStart: coords.x,
        yVrMouseStart: coords.y
      }); // Check current a vr video position (an user could change position using tilting)


      var useVrViewingDirection = true;

      _this.updateVrDirection(useVrViewingDirection);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrPlayerMouseMove", function (event) {
      var controller = _this.props.controller;
      var isVrMouseDown = _this.state.isVrMouseDown;

      if (controller && controller.isVrStereo) {
        return;
      }

      if (controller && controller.videoVr && isVrMouseDown) {
        event.preventDefault();

        _this.setState({
          isVrMouseMove: true
        });

        if (typeof controller.onTouchMove === 'function') {
          var coords = _utils.default.getCoords(event);

          var params = _this.getDirectionParams(coords.x, coords.y);

          controller.onTouchMove(params, true);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrPlayerMouseUp", function (event) {
      // continue only if video is vr and non in stereo mode
      var controller = _this.props.controller;

      if (!controller || !controller.videoVr || controller.isVrStereo) {
        return;
      }

      var isTouchEnd = _typeof(event) === 'object' && event.type === 'touchend'; // do not continue if the event is 'touchend'

      if (!isTouchEnd && typeof controller.checkVrDirection === 'function') {
        _this.setState({
          isVrMouseDown: false,
          xVrMouseStart: 0,
          yVrMouseStart: 0
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrPlayerClick", function () {
      _this.setState({
        isVrMouseMove: false
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrPlayerFocus", function () {
      var controller = _this.props.controller;
      controller.state.accessibilityControlsEnabled = true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getDirectionParams", function (_pageX, _pageY) {
      var yaw = _this.getVrViewingDirectionParamValue('yaw');

      var pitch = _this.getVrViewingDirectionParamValue('pitch');

      var _this$state2 = _this.state,
          componentWidth = _this$state2.componentWidth,
          componentHeight = _this$state2.componentHeight,
          xVrMouseStart = _this$state2.xVrMouseStart,
          yVrMouseStart = _this$state2.yVrMouseStart;

      if (componentWidth && componentHeight) {
        var pageX = _utils.default.ensureNumber(_pageX, 0);

        var pageY = _utils.default.ensureNumber(_pageY, 0);

        var dx = pageX - xVrMouseStart;
        var dy = pageY - yVrMouseStart;
        var maxDegreesX = 90;
        var maxDegreesY = 120;
        var degreesForPixelYaw = maxDegreesX / componentWidth;
        var degreesForPixelPitch = maxDegreesY / componentHeight;
        yaw += dx * degreesForPixelYaw;
        pitch += dy * degreesForPixelPitch;
      }

      return [yaw, 0, pitch];
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getVrViewingDirectionParamValue", function (paramName) {
      var vrViewingDirectionValue = 0;
      var controller = _this.props.controller;

      if (controller && controller.state && controller.state.vrViewingDirection && typeof controller.state.vrViewingDirection[paramName] === 'number') {
        vrViewingDirectionValue = controller.state.vrViewingDirection[paramName];
      }

      return vrViewingDirectionValue;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
      var controller = _this.props.controller;

      if (!event.target || !_this.domElement || !controller.state.fullscreen || event.key !== _constants.default.KEY_VALUES.TAB) {
        return;
      } // Focusable elements on the player (this.domElement) are expected to have the
      // data-focus-id attribute, this is a convention used throughout this project.


      var selector = "[".concat(_constants.default.KEYBD_FOCUS_ID_ATTR, "]:enabled");

      var focusableElements = _this.domElement.querySelectorAll(selector);

      if (focusableElements.length) {
        var firstFocusableElement = focusableElements[0];
        var lastFocusableElement = focusableElements[focusableElements.length - 1]; // This indicates we're tabbing over the focusable player elements

        if (event.target.hasAttribute(_constants.default.KEYBD_FOCUS_ID_ATTR)) {
          event.preventDefault();

          if (event.shiftKey) {
            // Shift + tabbing on first element, focus on last
            if (event.target === firstFocusableElement) {
              lastFocusableElement.focus();
            }
          } else if (event.target === lastFocusableElement) {
            // Tabbing on last element, focus on first
            firstFocusableElement.focus();
          } // Keydown happened on a non-player element

        } else if (event.shiftKey) {
          lastFocusableElement.focus();
        } else {
          firstFocusableElement.focus();
        }
      } else {
        OO.log('Skin: No focusable elements found');
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTouchEndOnWindow", function () {
      var controller = _this.props.controller;

      if (controller.videoVr) {
        // only for vr on mobile
        _this.setState({
          isVrMouseDown: false,
          isVrMouseMove: false,
          xVrMouseStart: 0,
          yVrMouseStart: 0
        }); // @TODO: now function this.props.controller.onEndMove(); is not worked correctly now. Fix it.
        // Related bug is https://jira.corp.ooyala.com/browse/PLAYER-4797

      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTouchEndOnPlayer", function (event) {
      var controller = _this.props.controller;
      var isVrMouseMove = _this.state.isVrMouseMove;

      if (controller.state.controlBarVisible) {
        var shouldToggle = false;

        if (!controller.videoVr || !isVrMouseMove) {
          shouldToggle = true;
        }

        if (shouldToggle) {
          controller.togglePlayPause(event);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "updateVrDirection", function (useVrViewingDirection) {
      var controller = _this.props.controller;

      if (typeof controller.checkVrDirection === 'function' && typeof controller.setControllerVrViewingDirection === 'function') {
        controller.checkVrDirection(useVrViewingDirection);
        controller.setControllerVrViewingDirection();
      }
    });

    _this.overlayRenderingEventSent = false;
    _this.state = {
      componentWidth: null,
      componentHeight: null,
      responsiveClass: null,
      responsiveId: null,
      totalTime: '00:00',
      screenToShow: null,
      currentPlayhead: 0,
      discoveryData: null,
      isVrMouseDown: false,
      isVrMouseMove: false,
      xVrMouseStart: 0,
      yVrMouseStart: 0
    };
    return _this;
  }

  _createClass(Skin, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var debounceTimeout = 150;
      window.addEventListener('resize', (0, _lodash.default)(this.onResize, debounceTimeout));
      window.addEventListener('webkitfullscreenchange', (0, _lodash.default)(this.onResize, debounceTimeout));
      this.generateResponsiveData();
      window.addEventListener('mouseup', this.handleClickOutsidePlayer);
      document.addEventListener('keydown', this.onKeyDown);
    }
    /**
     * Notify AMC the correct overlay rendering info
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$props2 = this.props,
          controller = _this$props2.controller,
          skinConfig = _this$props2.skinConfig;
      var _this$state3 = this.state,
          responsiveId = _this$state3.responsiveId,
          screenToShow = _this$state3.screenToShow;

      if (!screenToShow || !this.overlayRenderingEventSent) {
        return;
      }

      var responsiveUIMultiple = skinConfig.responsive.breakpoints[responsiveId].multiplier;
      var marginHeight = responsiveUIMultiple * skinConfig.controlBar.height;
      controller.publishOverlayRenderingEvent(marginHeight);
      this.overlayRenderingEventSent = true;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.onResize);
      window.removeEventListener('webkitfullscreenchange', this.onResize);
      window.removeEventListener('mouseup', this.handleClickOutsidePlayer);
      document.removeEventListener('keydown', this.onKeyDown);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var screen;
      var _this$props3 = this.props,
          closedCaptionOptions = _this$props3.closedCaptionOptions,
          controller = _this$props3.controller,
          language = _this$props3.language,
          localizableStrings = _this$props3.localizableStrings,
          skinConfig = _this$props3.skinConfig;
      var isReceiver = controller.state.cast.isReceiver;
      var _this$state4 = this.state,
          adStartTime = _this$state4.adStartTime,
          assetId = _this$state4.assetId,
          screenToShow = _this$state4.screenToShow,
          buffered = _this$state4.buffered,
          contentTree = _this$state4.contentTree,
          componentWidth = _this$state4.componentWidth,
          componentHeight = _this$state4.componentHeight,
          currentPlayhead = _this$state4.currentPlayhead,
          currentAdsInfo = _this$state4.currentAdsInfo,
          currentAdPlayhead = _this$state4.currentAdPlayhead,
          discoveryData = _this$state4.discoveryData,
          duration = _this$state4.duration,
          forceCountDownTimerOnEndScreen = _this$state4.forceCountDownTimerOnEndScreen,
          isLiveStream = _this$state4.isLiveStream,
          isVrMouseMove = _this$state4.isVrMouseMove,
          fullscreen = _this$state4.fullscreen,
          multiAudioOptions = _this$state4.multiAudioOptions,
          pauseAnimationDisabled = _this$state4.pauseAnimationDisabled,
          playbackSpeedOptions = _this$state4.playbackSpeedOptions,
          playerParam = _this$state4.playerParam,
          playerState = _this$state4.playerState,
          responsiveClass = _this$state4.responsiveClass,
          seeking = _this$state4.seeking,
          responsiveId = _this$state4.responsiveId,
          totalTime = _this$state4.totalTime,
          upNextInfo = _this$state4.upNextInfo,
          videoQualityOptions = _this$state4.videoQualityOptions; // For IE10, use the start screen and that's it.

      if (_utils.default.isIE10()) {
        if (screenToShow === _constants.default.SCREEN.START_SCREEN) {
          screen = _react.default.createElement(_startScreen.default, _extends({}, this.props, {
            componentWidth: componentWidth,
            contentTree: contentTree
          }));
        } else {
          screen = _react.default.createElement("div", null);
        }
      } else {
        if (controller.state.audioOnly) {
          switch (screenToShow) {
            case _constants.default.SCREEN.INITIAL_SCREEN:
            case _constants.default.SCREEN.START_SCREEN:
            case _constants.default.SCREEN.PLAYING_SCREEN:
            case _constants.default.SCREEN.PAUSE_SCREEN:
            case _constants.default.SCREEN.END_SCREEN:
              screen = _react.default.createElement(_audioOnlyScreen.default, _extends({}, this.props, {
                contentTree: contentTree,
                currentPlayhead: currentPlayhead,
                duration: duration,
                totalTime: totalTime,
                playheadTime: this.getPlayheadTime(),
                buffered: buffered,
                fullscreen: fullscreen,
                playerState: playerState,
                seeking: seeking,
                upNextInfo: upNextInfo,
                isLiveStream: isLiveStream,
                responsiveView: responsiveId,
                componentWidth: componentWidth,
                componentHeight: componentHeight,
                videoQualityOptions: videoQualityOptions,
                closedCaptionOptions: closedCaptionOptions,
                captionDirection: controller.captionDirection
              }));
              break;

            default:
              break;
          }
        }

        if (!screen) {
          var PlayingScreenToRender = isReceiver ? _playingScreen.PlayingScreen : _playingScreen.PlayingScreenWithAutoHide;
          var PauseScreenToRender = isReceiver ? _pauseScreen.PauseScreen : _pauseScreen.PauseScreenWithAutoHide;

          switch (screenToShow) {
            case _constants.default.SCREEN.INITIAL_SCREEN:
              screen = _react.default.createElement(_startScreen.default, _extends({}, this.props, {
                componentWidth: componentWidth,
                contentTree: contentTree,
                isInitializing: true
              }));
              break;

            case _constants.default.SCREEN.LOADING_SCREEN:
              screen = _react.default.createElement(_spinner.default, {
                loadingImage: skinConfig.general.loadingImage.imageResource.url
              });
              break;

            case _constants.default.SCREEN.START_SCREEN:
              screen = _react.default.createElement(_startScreen.default, _extends({}, this.props, {
                componentWidth: componentWidth,
                contentTree: contentTree,
                isInitializing: false
              }));
              break;

            case _constants.default.SCREEN.START_LOADING_SCREEN:
              screen = _react.default.createElement(_startScreen.default, _extends({}, this.props, {
                componentWidth: componentWidth,
                contentTree: contentTree,
                isInitializing: false,
                showSpinner: true
              }));
              break;

            case _constants.default.SCREEN.PLAYING_SCREEN:
              screen = _react.default.createElement(PlayingScreenToRender, _extends({}, this.props, {
                handleTouchEndOnPlayer: this.handleTouchEndOnPlayer,
                handleVrPlayerMouseDown: this.handleVrPlayerMouseDown,
                handleVrPlayerMouseMove: this.handleVrPlayerMouseMove,
                handleVrPlayerMouseUp: this.handleVrPlayerMouseUp,
                handleVrPlayerClick: this.handleVrPlayerClick,
                handleVrPlayerFocus: this.handleVrPlayerFocus,
                handleTouchEndOnWindow: this.handleTouchEndOnWindow,
                isVrMouseMove: isVrMouseMove,
                contentTree: contentTree,
                currentPlayhead: currentPlayhead,
                duration: duration,
                totalTime: totalTime,
                playheadTime: this.getPlayheadTime(),
                buffered: buffered,
                fullscreen: fullscreen,
                playerState: playerState,
                seeking: seeking,
                upNextInfo: upNextInfo,
                isLiveStream: isLiveStream,
                responsiveView: responsiveId,
                componentWidth: componentWidth,
                componentHeight: componentHeight,
                videoQualityOptions: videoQualityOptions,
                closedCaptionOptions: closedCaptionOptions,
                captionDirection: controller.captionDirection,
                ref: "playScreen" // eslint-disable-line

              }));
              break;

            case _constants.default.SCREEN.SHARE_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screen: _constants.default.SCREEN.SHARE_SCREEN,
                icon: "share"
              }), _react.default.createElement(_sharePanel.default, _extends({}, this.props, {
                assetId: assetId,
                playerParam: playerParam,
                contentTree: contentTree
              })));
              break;

            case _constants.default.SCREEN.VOLUME_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screen: _constants.default.SCREEN.VOLUME_SCREEN,
                icon: "volume"
              }), _react.default.createElement(_volumePanel.default, _extends({}, this.props, {
                playerState: playerState,
                isLiveStream: isLiveStream,
                a11yControls: controller.accessibilityControls,
                currentPlayhead: currentPlayhead,
                duration: duration,
                totalTime: totalTime,
                playheadTime: this.getPlayheadTime(),
                buffered: buffered,
                responsiveView: responsiveId,
                componentWidth: componentWidth
              })));
              break;

            case _constants.default.SCREEN.PAUSE_SCREEN:
              screen = _react.default.createElement(PauseScreenToRender, _extends({}, this.props, {
                handleTouchEndOnPlayer: this.handleTouchEndOnPlayer,
                handleVrPlayerMouseDown: this.handleVrPlayerMouseDown,
                handleVrPlayerMouseMove: this.handleVrPlayerMouseMove,
                handleVrPlayerMouseUp: this.handleVrPlayerMouseUp,
                handleVrPlayerClick: this.handleVrPlayerClick,
                handleTouchEndOnWindow: this.handleTouchEndOnWindow,
                isVrMouseMove: isVrMouseMove,
                contentTree: contentTree,
                currentPlayhead: currentPlayhead,
                playerState: playerState,
                duration: duration,
                totalTime: totalTime,
                playheadTime: this.getPlayheadTime(),
                buffered: buffered,
                pauseAnimationDisabled: pauseAnimationDisabled,
                fullscreen: fullscreen,
                seeking: seeking,
                upNextInfo: upNextInfo,
                isLiveStream: isLiveStream,
                responsiveView: responsiveId,
                componentWidth: componentWidth,
                videoQualityOptions: videoQualityOptions,
                captionDirection: controller.captionDirection,
                ref: "pauseScreen" // eslint-disable-line

              }));
              break;

            case _constants.default.SCREEN.END_SCREEN:
              screen = _react.default.createElement(_endScreen.default, _extends({}, this.props, {
                contentTree: contentTree,
                discoveryData: discoveryData,
                currentPlayhead: currentPlayhead,
                duration: duration,
                totalTime: totalTime,
                playheadTime: this.getPlayheadTime(),
                buffered: buffered,
                fullscreen: fullscreen,
                playerState: playerState,
                seeking: seeking,
                isLiveStream: isLiveStream,
                responsiveView: responsiveId,
                videoQualityOptions: videoQualityOptions,
                componentWidth: componentWidth,
                ref: "endScreen" // eslint-disable-line

              }));
              break;

            case _constants.default.SCREEN.AD_SCREEN:
              screen = _react.default.createElement(_adScreen.default, _extends({}, this.props, {
                contentTree: contentTree,
                currentAdsInfo: currentAdsInfo,
                currentPlayhead: currentPlayhead,
                currentAdPlayhead: currentAdPlayhead,
                fullscreen: fullscreen,
                playerState: playerState,
                duration: duration,
                adVideoDuration: controller.state.adVideoDuration,
                buffered: buffered,
                seeking: seeking,
                responsiveView: responsiveId,
                componentWidth: componentWidth,
                videoQualityOptions: videoQualityOptions,
                adStartTime: adStartTime,
                ref: "adScreen" // eslint-disable-line

              }));
              break;

            case _constants.default.SCREEN.DISCOVERY_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screen: _constants.default.SCREEN.DISCOVERY_SCREEN,
                titleText: _constants.default.SKIN_TEXT.DISCOVER,
                icon: "discovery"
              }), _react.default.createElement(_discoveryPanel.default, _extends({}, this.props, {
                videosPerPage: {
                  xs: 2,
                  sm: 4,
                  md: 6,
                  lg: 8
                },
                forceCountDownTimer: forceCountDownTimerOnEndScreen,
                discoveryData: discoveryData,
                playerState: playerState,
                responsiveView: responsiveId,
                componentWidth: componentWidth
              })));
              break;

            case _constants.default.SCREEN.MORE_OPTIONS_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screen: _constants.default.SCREEN.MORE_OPTIONS_SCREEN
              }), _react.default.createElement(_moreOptionsPanel.default, _extends({}, this.props, {
                responsiveView: responsiveId,
                fullscreen: fullscreen
              })));
              break;

            case _constants.default.SCREEN.CLOSED_CAPTION_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screen: _constants.default.SCREEN.CLOSED_CAPTION_SCREEN,
                screenClassName: "oo-content-screen-closed-captions",
                titleText: _constants.default.SKIN_TEXT.CC_OPTIONS,
                autoFocus: closedCaptionOptions.autoFocus,
                closedCaptionOptions: closedCaptionOptions,
                element: _react.default.createElement(_onOffSwitch.default, _extends({}, this.props, {
                  ariaLabel: _constants.default.ARIA_LABELS.TOGGLE_CLOSED_CAPTIONS
                })),
                icon: "cc"
              }), _react.default.createElement(_closedCaptionPanel.default, _extends({}, this.props, {
                closedCaptionOptions: closedCaptionOptions,
                dataItemsPerPage: {
                  xs: 1,
                  sm: 4,
                  md: 8,
                  lg: 8
                },
                responsiveView: responsiveId,
                componentWidth: componentWidth
              })));
              break;

            case _constants.default.SCREEN.VIDEO_QUALITY_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screenClassName: "oo-menu-content-screen",
                screen: _constants.default.SCREEN.VIDEO_QUALITY_SCREEN,
                titleText: _constants.default.SKIN_TEXT.VIDEO_QUALITY,
                autoFocus: videoQualityOptions.autoFocus
              }), _react.default.createElement(_videoQualityPanel.default, _extends({}, this.props, {
                fullscreen: fullscreen,
                videoQualityOptions: videoQualityOptions,
                responsiveView: responsiveId
              })));
              break;

            case _constants.default.SCREEN.PLAYBACK_SPEED_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                screenClassName: "oo-menu-content-screen",
                screen: _constants.default.SCREEN.PLAYBACK_SPEED_SCREEN,
                titleText: _constants.default.SKIN_TEXT.PLAYBACK_SPEED,
                autoFocus: playbackSpeedOptions.autoFocus
              }), _react.default.createElement(_playbackSpeedPanel.default, {
                language: language,
                localizableStrings: localizableStrings,
                controller: controller,
                skinConfig: skinConfig,
                fullscreen: fullscreen,
                responsiveView: responsiveId
              }));
              break;

            case _constants.default.SCREEN.MULTI_AUDIO_SCREEN:
              screen = _react.default.createElement(_contentScreen.default, _extends({}, this.props, {
                cssClass: "oo-close-button oo-close-button--ma",
                dataItemsPerPage: {
                  xs: 1,
                  sm: 4,
                  md: 8,
                  lg: 8
                },
                screen: _constants.default.SCREEN.MULTI_AUDIO_SCREEN,
                screenClassName: "oo-cc-ma-container",
                autoFocus: multiAudioOptions.autoFocus,
                icon: "cc"
              }), _react.default.createElement(_closedCaptionMultiAudioMenu.default, this.props));
              break;

            case _constants.default.SCREEN.ERROR_SCREEN:
              screen = _react.default.createElement(_errorScreen.default, _extends({}, this.props, {
                errorCode: controller.state.errorCode
              }));
              break;

            default:
              screen = _react.default.createElement("div", null);
          }
        }
      }

      var className = (0, _classnames.default)(responsiveClass, 'oo-responsive', {
        'oo-audio-only': controller.state.audioOnly
      });
      return _react.default.createElement("div", {
        ref: function ref(domElement) {
          _this2.domElement = domElement;
        },
        className: className
      }, screen);
    }
  }]);

  return Skin;
}(_react.default.Component);

Skin.defaultProps = {
  skinConfig: {
    general: {
      loadingImage: {
        imageResource: {
          url: null
        }
      }
    },
    responsive: {
      breakpoints: {
        md: {
          multiplier: 1
        }
      }
    },
    controlBar: {
      height: 90
    }
  },
  controller: {
    state: {
      adVideoDuration: 0,
      errorCode: 404
    },
    publishOverlayRenderingEvent: function publishOverlayRenderingEvent() {}
  }
};
module.exports = Skin;

},{"./components/closed-caption-multi-audio-menu/closedCaptionMultiAudioMenu":14,"./components/closed-caption/closedCaptionPanel":20,"./components/closed-caption/onOffSwitch":26,"./components/discoveryPanel":37,"./components/moreOptionsPanel":46,"./components/playbackSpeedPanel":49,"./components/sharePanel":51,"./components/spinner":54,"./components/utils":63,"./components/videoQualityPanel":64,"./components/volumePanel":67,"./constants/constants":69,"./views/adScreen":74,"./views/audioOnlyScreen":75,"./views/contentScreen":76,"./views/endScreen":77,"./views/errorScreen":78,"./views/pauseScreen":80,"./views/playingScreen":81,"./views/startScreen":83,"classnames":86,"lodash.debounce":362,"react":378,"react-dom":374}],74:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _adPanel = _interopRequireDefault(require("../components/adPanel"));

var _controlBar = _interopRequireDefault(require("../components/controlBar"));

var _spinner = _interopRequireDefault(require("../components/spinner"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _unmuteIcon = _interopRequireDefault(require("../components/unmuteIcon"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("../components/utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * The screen to be displayed on advertising
 */
var AdScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AdScreen, _React$Component);

  function AdScreen(props) {
    var _this;

    _classCallCheck(this, AdScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      event.stopPropagation(); // W3C

      event.cancelBubble = true;
      /* IE specific */
      // eslint-disable-line

      _this.props.controller.state.accessibilityControlsEnabled = true;

      if ((event.type === 'click' || !_this.isMobile) && !_this.props.skinConfig.adScreen.showAdMarquee) {
        _this.props.controller.onAdsClicked(_constants.default.AD_CLICK_SOURCE.VIDEO_WINDOW);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerClicked", function (event) {
      if (event.type === 'touchend' || !_this.isMobile) {
        // since mobile would fire both click and touched events,
        // we need to make sure only one actually does the work
        // since after exiting the full screen, iPhone pauses the video and places an overlay play button in the middle
        // of the screen (which we can't remove), clicking the screen would start the video.
        if (!_utils.default.canRenderSkin() && _this.state.playerState === _constants.default.STATE.PAUSE) {
          _this.props.controller.togglePlayPause();
        } else {
          event.stopPropagation(); // W3C

          event.cancelBubble = true;
          /* IE specific */
          // eslint-disable-line

          _this.props.controller.onAdsClicked(_constants.default.AD_CLICK_SOURCE.VIDEO_WINDOW);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "showControlBar", function () {
      _this.setState({
        controlBarVisible: true
      });

      _this.props.controller.showControlBar();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hideControlBar", function (event) {
      if (_this.props.skinConfig.controlBar.autoHide === true && !(_this.isMobile && event)) {
        _this.setState({
          controlBarVisible: false
        });

        _this.props.controller.hideControlBar();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTouchEnd", function (event) {
      // handleTouchEnd is used to verify controlBar visibility.
      if (!_this.state.controlBarVisible && _this.props.skinConfig.adScreen.showControlBar) {
        _this.showControlBar(); // Do not start the process to hide the control bar unless we are leaving pause state.


        if (_this.props.playerState === _constants.default.STATE.PAUSE) {
          _this.props.controller.startHideControlBarTimer();
        }
      } // Even if our action was to start showing the control bar, we should still handle
      // the click to prevent the need to double tap.


      _this.handlePlayerClicked(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseMove", function () {
      if (_this.props.playerState !== _constants.default.STATE.PAUSE && !_this.isMobile && _this.props.fullscreen) {
        _this.showControlBar();

        _this.props.controller.startHideControlBarTimer();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function () {
      _this.props.controller.startHideControlBarTimer();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "unmuteClick", function () {
      _this.props.controller.handleMuteClick();
    });

    _this.isMobile = _this.props.controller.state.isMobile;
    _this.state = {
      controlBarVisible: true
    };
    return _this;
  }

  _createClass(AdScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // for mobile or desktop fullscreen, hide control bar after 3 seconds
      if (this.isMobile || this.props.fullscreen) {
        this.props.controller.startHideControlBarTimer();
      }
    }
    /**
     * Handle show/hide controlBar logic based on nextProps object
     * @param {Object} nextProps props object
     */

  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps) {
      if (nextProps) {
        if (nextProps.controller.state.controlBarVisible === false && this.state.controlBarVisible === true) {
          this.hideControlBar();
        }

        if (nextProps.controller.state.controlBarVisible === true && this.state.controlBarVisible === false) {
          this.showControlBar();
        }

        if (!this.props.fullscreen && nextProps.fullscreen && this.state.playerState !== _constants.default.STATE.PAUSE) {
          this.props.controller.startHideControlBarTimer();
        }

        if (this.props.fullscreen && !nextProps.fullscreen && this.isMobile) {
          this.showControlBar();
          this.props.controller.startHideControlBarTimer();
        }
      }
    }
    /**
     * Change the behavior if width of the element was changed
     * @param {Object} prevProps - props object
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.componentWidth !== this.props.componentWidth) {
        this.handleResize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.controller.cancelTimer();
    }
    /**
     * Playback control items array depends on player state. Handle this
     * @returns {Object} array of control items
     */

  }, {
    key: "getPlaybackControlItems",
    value: function getPlaybackControlItems() {
      if (!this.props.controller.state.showAdControls) return null;
      var showControlBar = this.props.playerState === _constants.default.STATE.PAUSE || this.props.controller.state.forceControlBarVisible || this.state.controlBarVisible;
      var playbackControlItemTemplates = {
        controlBar: _react.default.createElement(_controlBar.default, _extends({}, this.props, {
          height: this.props.skinConfig.controlBar.height,
          animatingControlBar: true,
          controlBarVisible: showControlBar,
          playerState: this.props.playerState,
          key: "controlBar"
        }))
      };
      var playbackControlItems = [];

      for (var item in playbackControlItemTemplates) {
        // eslint-disable-line no-restricted-syntax
        if (playbackControlItemTemplates.hasOwnProperty(item)) {
          // eslint-disable-line no-prototype-builtins
          playbackControlItems.push(playbackControlItemTemplates[item]);
        }
      }

      return playbackControlItems;
    }
    /**
     * Bubble up the click only for special conditions
     * @param {Object} event object
     */

  }, {
    key: "render",
    value: function render() {
      var actionIconStyle = {
        color: this.props.skinConfig.pauseScreen.PauseIconStyle.color,
        opacity: this.props.skinConfig.pauseScreen.PauseIconStyle.opacity
      };
      var actionIconClass = (0, _classnames.default)({
        'oo-action-icon-pause': !this.props.controller.state.adPauseAnimationDisabled,
        'oo-action-icon': this.props.controller.state.adPauseAnimationDisabled,
        'oo-animate-pause': !this.props.controller.state.adPauseAnimationDisabled,
        'oo-action-icon-top': this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf('top') > -1,
        'oo-action-icon-bottom': this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf('bottom') > -1,
        'oo-action-icon-left': this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf('left') > -1,
        'oo-action-icon-right': this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase().indexOf('right') > -1,
        'oo-hidden': !this.props.skinConfig.pauseScreen.showPauseIcon,
        'oo-icon-hidden': this.props.playerState !== _constants.default.STATE.PAUSE
      });
      var adPanel = null;

      if (this.props.skinConfig.adScreen.showAdMarquee && this.props.controller.state.showAdMarquee) {
        adPanel = _react.default.createElement(_adPanel.default, this.props);
      }

      var playbackControlItems = null;

      if (this.props.skinConfig.adScreen.showControlBar) {
        playbackControlItems = this.getPlaybackControlItems();
      }

      var showUnmute = this.props.controller.state.volumeState.mutingForAutoplay && this.props.controller.state.volumeState.muted;
      return _react.default.createElement("div", {
        // eslint-disable-line jsx-a11y/mouse-events-have-key-events
        className: "oo-state-screen oo-ad-screen",
        ref: "adScreen" // eslint-disable-line
        ,
        role: "presentation",
        onMouseOver: this.showControlBar,
        onMouseOut: this.hideControlBar,
        onMouseMove: this.handlePlayerMouseMove,
        onMouseUp: this.handleClick
      }, this.props.controller.state.buffering || this.props.buffered === 0 ? _react.default.createElement(_spinner.default, {
        loadingImage: this.props.skinConfig.general.loadingImage.imageResource.url
      }) : null, _react.default.createElement("a", {
        // eslint-disable-line
        className: actionIconClass
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "pause",
        style: actionIconStyle
      }))), _react.default.createElement("div", {
        // eslint-disable-line jsx-a11y/mouse-events-have-key-events
        className: "oo-ad-panel",
        role: "presentation",
        ref: "adPanel" // eslint-disable-line
        ,
        onClick: this.handlePlayerClicked,
        onTouchEnd: this.handleTouchEnd
      }, adPanel), _react.default.createElement("div", {
        className: "oo-interactive-container"
      }, playbackControlItems), showUnmute ? _react.default.createElement(_unmuteIcon.default, this.props) : null);
    }
  }]);

  return AdScreen;
}(_react.default.Component);

module.exports = AdScreen;

},{"../components/adPanel":10,"../components/controlBar":30,"../components/icon":42,"../components/spinner":54,"../components/unmuteIcon":61,"../components/utils":63,"../constants/constants":69,"classnames":86,"react":378}],75:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("../components/utils"));

var _controlBar = _interopRequireDefault(require("../components/controlBar"));

var _scrubberBar = _interopRequireDefault(require("../components/scrubberBar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * The screen that is shown while the player state is playing, paused, or ended for the audio only player.
 * Will display a title with description, a control bar, and a scrubber bar.
 */
var AudioOnlyScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(AudioOnlyScreen, _React$Component);

  function AudioOnlyScreen(props) {
    var _this;

    _classCallCheck(this, AudioOnlyScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AudioOnlyScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleLiveClick", function (event) {
      event.stopPropagation();
      event.cancelBubble = true;
      /* IE specific */
      // eslint-disable-line

      event.preventDefault();

      _this.props.controller.onLiveClick();

      _this.props.controller.seek(_this.props.duration);
    });

    _this.state = {
      forceResize: false
    };
    _this.handleLiveClick = _this.handleLiveClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Catch update component evet to proceed resize if necessary
   * @param {Object} prevProps - props object
   * @param {Object} prevState - state object
   */


  _createClass(AudioOnlyScreen, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      // [PLAYER-4848] If we find out that this is a live stream, we need to force a resize of the scrubber bar.
      // This ensures the playhead offset is correctly calculated for the UI differences when the stream is LIVE.
      if (this.state.forceResize !== prevState.forceResize) {
        this.setState({
          forceResize: false
        }); // eslint-disable-line
      } else if (!prevState.forceResize && this.props.isLiveStream !== prevProps.isLiveStream && this.props.isLiveStream) {
        this.setState({
          forceResize: true
        }); // eslint-disable-line
      }
    }
    /**
     * Stop click propagation if clicked on 'live' button
     * @param {Object} event - event object
     */

  }, {
    key: "render",
    value: function render() {
      var titleStyle = {
        color: this.props.skinConfig.startScreen.titleFont.color
      };
      var infoPanelClass = (0, _classnames.default)({
        'oo-state-screen-audio-title': true
      });
      var titleClass = (0, _classnames.default)({
        'oo-state-screen-audio-info': true
      });
      var textStyle = {
        maxWidth: '70%'
      };
      var textClass = (0, _classnames.default)({
        'oo-text-truncate': true
      });

      var titleMetadata = _react.default.createElement("div", {
        style: textStyle,
        className: textClass
      }, _react.default.createElement("span", {
        className: titleClass,
        style: titleStyle
      }, this.props.contentTree.title), ":\xA0", this.props.contentTree.description);

      var liveText = _utils.default.getLocalizedString(this.props.language, _constants.default.SKIN_TEXT.LIVE, this.props.localizableStrings);

      var timeShift = this.props.currentPlayhead - this.props.duration;
      var isLiveNow = Math.abs(timeShift) < 1;

      var scrubberLeft = _react.default.createElement("span", {
        className: "oo-scrubber-bar-left oo-scrubber-bar-current-time"
      }, this.props.playheadTime);

      var scrubberRight = _react.default.createElement("span", {
        className: "oo-scrubber-bar-right oo-scrubber-bar-duration"
      }, this.props.totalTime);

      if (this.props.isLiveStream) {
        var dvrText = isLiveNow ? '--:--' : this.props.playheadTime;
        var liveClick = isLiveNow ? null : this.handleLiveClick;
        var liveClass = (0, _classnames.default)({
          'oo-scrubber-bar-left oo-live oo-live-indicator': true,
          'oo-live-nonclickable': liveClick
        });
        scrubberLeft = _react.default.createElement("a", {
          // eslint-disable-line
          key: _constants.default.CONTROL_BAR_KEYS.LIVE,
          className: liveClass,
          ref: "LiveButton" // eslint-disable-line
          ,
          onClick: liveClick
        }, _react.default.createElement("div", {
          className: "oo-live-circle"
        }), _react.default.createElement("span", {
          className: "oo-live-text"
        }, liveText));
        scrubberRight = _react.default.createElement("span", {
          className: "oo-scrubber-bar-right oo-scrubber-bar-current-time"
        }, dvrText);
      }

      var shift = -2;
      var coverImageHeight = "".concat(_constants.default.UI.AUDIO_ONLY_WITH_COVER_HEIGHT.slice(0, shift) - _constants.default.UI.AUDIO_ONLY_DEFAULT_HEIGHT.slice(0, shift), "px"); // TODO: Consider multiple styling options for the control bar. We are restricted to a single row at this moment

      return _react.default.createElement("div", null, this.props.contentTree.promo_image && _react.default.createElement("img", {
        height: coverImageHeight,
        src: this.props.contentTree.promo_image,
        className: "oo-audio-only-coverImg",
        alt: "promo"
      }), _react.default.createElement("div", {
        className: "oo-state-screen-audio oo-flex-column-parent"
      }, _react.default.createElement("div", {
        className: infoPanelClass
      }, titleMetadata), _react.default.createElement("div", {
        className: "oo-interactive-container"
      }, _react.default.createElement(_controlBar.default, _extends({}, this.props, {
        audioOnly: true,
        hideVolumeControls: true,
        hideScrubberBar: true,
        controlBarVisible: true,
        playerState: this.props.playerState,
        isLiveStream: this.props.isLiveStream,
        a11yControls: this.props.controller.accessibilityControls,
        clickToVolumeScreen: true
      }))), _react.default.createElement("div", {
        className: "oo-interactive-container"
      }, _react.default.createElement("div", {
        className: "oo-scrubber-bar-parent oo-flex-row-parent"
      }, scrubberLeft, _react.default.createElement(_scrubberBar.default, _extends({}, this.props, {
        audioOnly: true,
        forceResize: this.state.forceResize
      })), scrubberRight))));
    }
  }]);

  return AudioOnlyScreen;
}(_react.default.Component);

module.exports = AudioOnlyScreen;

},{"../components/controlBar":30,"../components/scrubberBar":50,"../components/utils":63,"../constants/constants":69,"classnames":86,"react":378}],76:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _closeButton = _interopRequireDefault(require("../components/closeButton"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _watermark = _interopRequireDefault(require("../components/watermark"));

var _utils = _interopRequireDefault(require("../components/utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * A wrapper over discovery, volume, CC etc. extended options screens
 */
var ContentScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ContentScreen, _React$Component);

  function ContentScreen() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ContentScreen);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContentScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "storeRef", function (ref) {
      _this.domElement = ref;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (event) {
      if (event.key === _constants.default.KEY_VALUES.ESCAPE) {
        _this.handleClose();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClose", function () {
      switch (_this.props.screen) {
        case _constants.default.SCREEN.DISCOVERY_SCREEN:
          _this.props.controller.toggleDiscoveryScreen();

          break;

        case _constants.default.SCREEN.MULTI_AUDIO_SCREEN:
          _this.props.controller.toggleMultiAudioScreen();

          break;

        default:
          _this.props.controller.toggleScreen(_this.props.screen);

      }
    });

    return _this;
  }

  _createClass(ContentScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.controller.state.accessibilityControlsEnabled = false;

      if (this.props.autoFocus) {
        _utils.default.autoFocusFirstElement(this.domElement);
      }
    }
    /**
     * manage accessibility
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.controller.state.accessibilityControlsEnabled = true;
    }
    /**
     * Keep in self properties DOM element where we're rendered in
     * @param {Object} ref - DOM element
     */

  }, {
    key: "render",
    value: function render() {
      // overlay only for the closed captions screen. Needs to be different than the other screens because of closed caption preview.
      var closedCaptionOverlay = this.props.screen === _constants.default.SCREEN.CLOSED_CAPTION_SCREEN ? _react.default.createElement("div", {
        className: "oo-closed-caption-overlay"
      }) : null;
      var titleBarStyle = {};

      if (this.props.screen === _constants.default.SCREEN.DISCOVERY_SCREEN) {
        titleBarStyle.fontFamily = _utils.default.getPropertyValue(this.props.skinConfig, 'discoveryScreen.panelTitle.titleFont.fontFamily');
        titleBarStyle.color = _utils.default.getPropertyValue(this.props.skinConfig, 'discoveryScreen.panelTitle.titleFont.color');
      } // localized title bar, show nothing if no title text


      var titleBar = this.props.titleText ? _react.default.createElement("div", {
        className: "oo-content-screen-title",
        style: titleBarStyle
      }, _utils.default.getLocalizedString(this.props.language, this.props.titleText, this.props.localizableStrings), this.props.icon && _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: this.props.icon
      })), this.props.element) : null;
      return _react.default.createElement("div", {
        onKeyDown: this.handleKeyDown,
        ref: this.storeRef,
        role: "presentation"
      }, _react.default.createElement(_watermark.default, _extends({}, this.props, {
        controlBarVisible: false,
        nonClickable: true
      })), _react.default.createElement("div", {
        className: (0, _classnames.default)('oo-content-screen', this.props.screenClassName)
      }, closedCaptionOverlay, _react.default.createElement("div", {
        className: this.props.titleBarClassName
      }, titleBar), this.props.children, _react.default.createElement(_closeButton.default, _extends({}, this.props, {
        closeAction: this.handleClose
      }))));
    }
  }]);

  return ContentScreen;
}(_react.default.Component);

ContentScreen.propTypes = {
  controller: _propTypes.default.shape({
    toggleScreen: _propTypes.default.func,
    state: _propTypes.default.shape({
      accessibilityControlsEnabled: _propTypes.default.bool
    })
  }),
  element: _propTypes.default.element,
  icon: _propTypes.default.string,
  screen: _propTypes.default.string,
  skinConfig: _propTypes.default.shape({
    discoveryScreen: _propTypes.default.shape({
      panelTitle: _propTypes.default.shape({
        titleFont: _propTypes.default.shape({
          color: _propTypes.default.string,
          fontFamily: _propTypes.default.string
        })
      })
    })
  }).isRequired,
  titleBarClassName: _propTypes.default.string,
  titleText: _propTypes.default.string
};
ContentScreen.defaultProps = {
  screen: _constants.default.SCREEN.SHARE_SCREEN,
  titleBarClassName: 'oo-content-screen-title-bar',
  titleText: '',
  element: null,
  icon: null,
  controller: {
    toggleScreen: function toggleScreen() {},
    state: {
      accessibilityControlsEnabled: true
    }
  }
};
module.exports = ContentScreen;

},{"../components/closeButton":13,"../components/icon":42,"../components/utils":63,"../components/watermark":68,"../constants/constants":69,"classnames":86,"prop-types":370,"react":378}],77:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _controlBar = _interopRequireDefault(require("../components/controlBar"));

var _watermark = _interopRequireDefault(require("../components/watermark"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _castPanel = _interopRequireDefault(require("../components/castPanel"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("../components/utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * The screen to be displayed when asset has finished playing
 */
var EndScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(EndScreen, _React$Component);

  function EndScreen(props) {
    var _this;

    _classCallCheck(this, EndScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EndScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "componentWillReceiveProps", function (nextProps) {
      if (nextProps.componentWidth !== _this.props.componentWidth) {
        _this.handleResize();
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function () {
      if (_reactDom.default.findDOMNode(_this.refs.description)) {
        // eslint-disable-line
        _this.setState({
          descriptionText: _utils.default.truncateTextToWidth(_reactDom.default.findDOMNode(_this.refs.description), // eslint-disable-line
          _this.props.contentTree.description)
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      event.preventDefault();
      _this.props.controller.state.accessibilityControlsEnabled = true;

      _this.props.controller.togglePlayPause();
    });

    _this.state = {
      controlBarVisible: true,
      descriptionText: _this.props.contentTree.description
    };
    return _this;
  }

  _createClass(EndScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleResize();
    }
    /**
     * Launch handle resize if width changed
     * @param {Object} nextProps - next props object
     */

  }, {
    key: "render",
    value: function render() {
      var actionIconStyle = {
        color: this.props.skinConfig.endScreen.replayIconStyle.color,
        opacity: this.props.skinConfig.endScreen.replayIconStyle.opacity
      };

      if (this.props.controller.state.cast.connected) {
        actionIconStyle.fontSize = '125px';
      }

      var titleStyle = {
        color: this.props.skinConfig.startScreen.titleFont.color
      };
      var descriptionStyle = {
        color: this.props.skinConfig.startScreen.descriptionFont.color
      };
      var actionIconClass = (0, _classnames.default)({
        'oo-action-icon': true,
        'oo-hidden': !this.props.skinConfig.endScreen.showReplayButton
      });

      var infoPanelPosition = _utils.default.getPropertyValue(this.props.skinConfig, 'endScreen.infoPanelPosition');

      var infoPanelClass = infoPanelPosition ? (0, _classnames.default)({
        'oo-state-screen-info': true,
        'oo-info-panel-top': infoPanelPosition.toLowerCase().indexOf('top') > -1,
        'oo-info-panel-bottom': infoPanelPosition.toLowerCase().indexOf('bottom') > -1,
        'oo-info-panel-left': infoPanelPosition.toLowerCase().indexOf('left') > -1,
        'oo-info-panel-right': infoPanelPosition.toLowerCase().indexOf('right') > -1
      }) : undefined;
      var titleClass = infoPanelPosition ? (0, _classnames.default)({
        'oo-state-screen-title': true,
        'oo-text-truncate': true,
        'oo-pull-right': infoPanelPosition.toLowerCase().indexOf('right') > -1,
        'oo-hidden': !_utils.default.getPropertyValue(this.props.skinConfig, 'endScreen.showTitle')
      }) : undefined;
      var descriptionClass = infoPanelPosition ? (0, _classnames.default)({
        'oo-state-screen-description': true,
        'oo-pull-right': infoPanelPosition.toLowerCase().indexOf('right') > -1,
        'oo-hidden': !_utils.default.getPropertyValue(this.props.skinConfig, 'endScreen.showDescription')
      }) : undefined; // Shows the information of the chromecast device just below the replay icon

      var castPanelClass = (0, _classnames.default)({
        'oo-info-panel-cast-bottom': true
      });

      var titleMetadata = _react.default.createElement("div", {
        className: titleClass,
        style: titleStyle
      }, this.props.contentTree.title);

      var descriptionMetadata = _react.default.createElement("div", {
        className: descriptionClass,
        ref: "description" // eslint-disable-line
        ,
        style: descriptionStyle
      }, this.state.descriptionText);

      return _react.default.createElement("div", {
        className: "oo-state-screen oo-end-screen"
      }, _react.default.createElement("div", {
        className: "oo-underlay-gradient"
      }), _react.default.createElement("a", {
        // eslint-disable-line
        className: "oo-state-screen-selectable",
        onClick: this.handleClick
      }), _react.default.createElement(_watermark.default, _extends({}, this.props, {
        controlBarVisible: this.state.controlBarVisible
      })), _react.default.createElement("div", {
        className: infoPanelClass
      }, titleMetadata, descriptionMetadata), _react.default.createElement("button", {
        type: "button",
        className: actionIconClass,
        onClick: this.handleClick,
        onMouseUp: _utils.default.blurOnMouseUp,
        tabIndex: "0",
        "aria-label": _constants.default.ARIA_LABELS.REPLAY
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "replay",
        style: actionIconStyle
      }))), this.props.controller.state.cast.connected && _react.default.createElement(_castPanel.default, {
        language: this.props.language,
        localizableStrings: this.props.localizableStrings,
        device: this.props.controller.state.cast.device,
        className: castPanelClass
      }), _react.default.createElement("div", {
        className: "oo-interactive-container"
      }, _react.default.createElement(_controlBar.default, _extends({}, this.props, {
        height: this.props.skinConfig.controlBar.height,
        animatingControlBar: true,
        controlBarVisible: this.state.controlBarVisible,
        playerState: this.props.playerState,
        isLiveStream: this.props.isLiveStream
      }))));
    }
  }]);

  return EndScreen;
}(_react.default.Component);

module.exports = EndScreen;

},{"../components/castPanel":12,"../components/controlBar":30,"../components/icon":42,"../components/utils":63,"../components/watermark":68,"../constants/constants":69,"classnames":86,"react":378,"react-dom":374}],78:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _utils = _interopRequireDefault(require("../components/utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/* eslint-disable react/destructuring-assignment */

/**
 * Display errors in user friendly screen
 */
var ErrorScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ErrorScreen, _React$Component);

  function ErrorScreen() {
    _classCallCheck(this, ErrorScreen);

    return _possibleConstructorReturn(this, _getPrototypeOf(ErrorScreen).apply(this, arguments));
  }

  _createClass(ErrorScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.controller.state.accessibilityControlsEnabled = false;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.controller.state.accessibilityControlsEnabled = true;
    }
  }, {
    key: "render",
    value: function render() {
      var errorTitle;
      var errorDescription;
      var errorAction;

      if (_constants.default.ERROR_MESSAGE.hasOwnProperty(this.props.errorCode.code)) {
        // eslint-disable-line
        errorAction = _constants.default.SKIN_TEXT.ERROR_ACTION;

        if (_constants.default.ERROR_MESSAGE[this.props.errorCode.code].action) {
          errorAction = _constants.default.ERROR_MESSAGE[this.props.errorCode.code].action;
        }

        errorTitle = _utils.default.getLocalizedString(this.props.language, _constants.default.ERROR_MESSAGE[this.props.errorCode.code].title, this.props.localizableStrings);
        errorDescription = _utils.default.getLocalizedString(this.props.language, _constants.default.ERROR_MESSAGE[this.props.errorCode.code].description, this.props.localizableStrings); // TODO - need to make countdown functionality display for all languages

        var startTime = this.props.errorCode.flight_start_time;

        if (this.props.errorCode.code === _constants.default.ERROR_CODE.FUTURE && this.props.language === _constants.default.LANGUAGE.ENGLISH && startTime !== null && !Number.isNaN(startTime)) {
          var second = 1000;
          errorDescription = 'This video will be available in ' + "".concat(_utils.default.getStartCountdown(startTime * second - Date.now()));
        }

        errorAction = _utils.default.getLocalizedString(this.props.language, errorAction, this.props.localizableStrings);
      } else {
        errorDescription = _utils.default.getLocalizedString(this.props.language, _constants.default.SKIN_TEXT.UNKNOWN_ERROR, this.props.localizableStrings);
        errorTitle = null;
        errorAction = null;
      }

      var errorContentClass = (0, _classnames.default)({
        'oo-error-content': true,
        'oo-center-block': true
      });
      return _react.default.createElement("div", {
        className: "oo-state-screen oo-error-screen"
      }, _react.default.createElement("div", {
        className: errorContentClass
      }, _react.default.createElement("div", {
        className: "oo-error-title oo-text-uppercase"
      }, errorTitle), _react.default.createElement("div", {
        className: "oo-error-description"
      }, errorDescription), _react.default.createElement("div", {
        className: "oo-error-action oo-text-uppercase"
      }, errorAction)));
    }
  }]);

  return ErrorScreen;
}(_react.default.Component);

ErrorScreen.propTypes = {
  controller: _propTypes.default.shape({
    state: _propTypes.default.shape({
      accessibilityControlsEnabled: _propTypes.default.bool.isRequired
    }).isRequired
  }).isRequired,
  errorCode: _propTypes.default.shape({
    code: _propTypes.default.string,
    flight_start_time: _propTypes.default.number
  }).isRequired,
  language: _propTypes.default.string,
  localizableStrings: _propTypes.default.object // eslint-disable-line

};
ErrorScreen.defaultProps = {
  language: 'en',
  localizableStrings: {}
};
module.exports = ErrorScreen;

},{"../components/utils":63,"../constants/constants":69,"classnames":86,"prop-types":370,"react":378}],79:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _constants = _interopRequireDefault(require("../../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/* global document */

/**
 * Wraps a component within a div that handles auto-hide functionality based on mouse, touch, or keyboard usage.
 * @param {Object} ComposedComponent The component to wrap and add auto-hide functionality to
 * @returns {class} The enhanced component with auto-hide functionality
 */
function withAutoHide(ComposedComponent) {
  var _temp;

  return _temp =
  /*#__PURE__*/
  function (_React$Component) {
    _inherits(_temp, _React$Component);

    function _temp(props) {
      var _this;

      _classCallCheck(this, _temp);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_temp).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTouchEnd", function (event) {
        if (!_this.props.controller.state.controlBarVisible) {
          _this.showControlBar(event); // TODO: Address an existing issue where we don't cancel the timer upon touching control buttons


          _this.startHideControlBarTimer();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseMove", function () {
        if (!_this.props.controller.state.isMobile && _this.props.fullscreen) {
          _this.showControlBar();

          _this.startHideControlBarTimer();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function () {
        _this.startHideControlBarTimer();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleKeyDown", function (event) {
        var keysForAction = [_constants.default.KEY_VALUES.TAB, _constants.default.KEY_VALUES.SPACE, _constants.default.KEY_VALUES.ENTER, _constants.default.KEY_VALUES.ARROW_UP, _constants.default.KEY_VALUES.ARROW_RIGHT, _constants.default.KEY_VALUES.ARROW_DOWN, _constants.default.KEY_VALUES.ARROW_LEFT];

        if (keysForAction.indexOf(event.key) !== -1) {
          _this.showControlBar();

          _this.startHideControlBarTimer();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseOut", function () {
        if (!_this.props.controller.state.isMobile) {
          _this.hideControlBar();
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseOver", function () {
        _this.showControlBar();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "showControlBar", function (event) {
        if (!_this.props.controller.state.isMobile || event && event.type === 'touchend') {
          _this.props.controller.showControlBar();

          _this.autoHideRef.current.style.cursor = 'auto';
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hideControlBar", function () {
        if (_this.props.skinConfig.controlBar.autoHide === true) {
          _this.props.controller.hideControlBar();

          _this.autoHideRef.current.style.cursor = 'none';
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startHideControlBarTimer", function () {
        _this.props.controller.startHideControlBarTimer();
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cancelHideControlBarTimer", function () {
        _this.props.controller.cancelTimer();
      });

      _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.hideControlBar = _this.hideControlBar.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.showControlBar = _this.showControlBar.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.startHideControlBarTimer = _this.startHideControlBarTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.cancelHideControlBarTimer = _this.cancelHideControlBarTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.handlePlayerMouseMove = _this.handlePlayerMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.handleTouchEnd = _this.handleTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.autoHideRef = _react.default.createRef();
      return _this;
    }

    _createClass(_temp, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        document.addEventListener('mousemove', this.handlePlayerMouseMove, false);
        document.addEventListener('touchmove', this.handlePlayerMouseMove, false); // for mobile or desktop fullscreen, hide control bar after 3 seconds

        if (this.props.controller.state.isMobile || this.props.fullscreen || this.props.controller.state.browserSupportsTouch) {
          this.startHideControlBarTimer();
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.componentWidth !== this.props.componentWidth) {
          this.handleResize();
        }
      }
      /**
       * Launch show/hide controlBar logic on fullscreen or chromecast logic
       * @param {Object} nextProps - next props object
       */

    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate(nextProps) {
        if (!nextProps) {
          return;
        }

        if (!this.props.fullscreen && nextProps.fullscreen) {
          this.startHideControlBarTimer();
        }

        if (this.props.fullscreen && !nextProps.fullscreen && this.props.controller.state.isMobile) {
          this.props.controller.showControlBar();
          this.startHideControlBarTimer();
        }

        if (nextProps.controller.state.cast.connected) {
          this.props.controller.showControlBar();
          this.cancelHideControlBarTimer();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        document.removeEventListener('mousemove', this.handlePlayerMouseMove);
        document.removeEventListener('touchmove', this.handlePlayerMouseMove);
        this.cancelHideControlBarTimer();
      }
      /**
       * Handles the touchEnd event on the Auto Hide Screen.
       * @param {Event} event The touchEnd event object
       */

    }, {
      key: "render",
      value: function render() {
        return _react.default.createElement("div", {
          // eslint-disable-line
          ref: this.autoHideRef,
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut,
          onKeyDown: this.handleKeyDown,
          onTouchEnd: this.handleTouchEnd
        }, _react.default.createElement(ComposedComponent, _extends({}, this.props, {
          hideControlBar: this.hideControlBar,
          showControlBar: this.showControlBar,
          startHideControlBarTimer: this.startHideControlBarTimer,
          cancelHideControlBarTimer: this.cancelHideControlBarTimer
        })));
      }
    }]);

    return _temp;
  }(_react.default.Component), _temp;
}

module.exports = withAutoHide;

},{"../../constants/constants":69,"react":378}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PauseScreenWithAutoHide = exports.PauseScreen = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _controlBar = _interopRequireDefault(require("../components/controlBar"));

var _adOverlay = _interopRequireDefault(require("../components/adOverlay"));

var _upNextPanel = _interopRequireDefault(require("../components/upNextPanel"));

var _textTrackPanel = _interopRequireDefault(require("../components/textTrackPanel"));

var _watermark = _interopRequireDefault(require("../components/watermark"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _skipControls = _interopRequireDefault(require("../components/skipControls"));

var _spinner = _interopRequireDefault(require("../components/spinner"));

var _utils = _interopRequireDefault(require("../components/utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _viewControlsVr = _interopRequireDefault(require("../components/viewControlsVr"));

var _withAutoHide = _interopRequireDefault(require("./higher-order/withAutoHide"));

var _castPanel = _interopRequireDefault(require("../components/castPanel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/* global document */

/**
 * Represents a screen when a video is paused
 */
var PauseScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PauseScreen, _React$Component);

  _createClass(PauseScreen, null, [{
    key: "handlePlayerMouseUp",

    /**
     * call handlePlayerMouseUp when mouseup was called on selectedScreen
     * it prevents propagation
     * @param {Event} event - event object
     */
    value: function handlePlayerMouseUp(event) {
      event.stopPropagation(); // W3C

      event.cancelBubble = true;
      /* IE specific */
      // eslint-disable-line
    }
  }]);

  function PauseScreen(props) {
    var _this;

    _classCallCheck(this, PauseScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PauseScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "startAnimation", function () {
      _this.setState({
        animate: true
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function () {
      if (_reactDom.default.findDOMNode(_this.description)) {
        // eslint-disable-line
        _this.setState({
          descriptionText: _utils.default.truncateTextToWidth(_reactDom.default.findDOMNode(_this.description), // eslint-disable-line
          _this.props.contentTree.description)
        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      if (_this.props.controller.videoVr) {
        event.preventDefault();
      }

      if (!_this.props.isVrMouseMove && !_this.props.controller.state.isMobile) {
        _this.props.controller.togglePlayPause(event);
      }

      _this.props.controller.state.accessibilityControlsEnabled = true;
      _this.props.controller.state.isClickedOutside = false;

      _this.props.handleVrPlayerClick();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "hideVrPauseButton", function () {
      if (_this.props.controller.videoVr) {
        var second = 1000;
        setTimeout(function () {
          if (_this.pauseButton) {
            _this.pauseButton.style.display = 'none';
          }
        }, second);
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseDown", function (event) {
      event.preventDefault();

      if (_this.props.controller.videoVr) {
        event.persist();
      }

      _this.props.controller.state.accessibilityControlsEnabled = true;
      _this.props.controller.state.isClickedOutside = false;

      _this.props.handleVrPlayerMouseDown(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseMove", function (event) {
      _this.props.handleVrPlayerMouseMove(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function (event) {
      var isFocusableElement = event.target || event.target.hasAttribute(_constants.default.KEYBD_FOCUS_ID_ATTR);

      if (isFocusableElement) {
        _this.props.controller.state.accessibilityControlsEnabled = true;
        _this.props.controller.state.isClickedOutside = false;
      }
    });

    _this.state = {
      descriptionText: _this.props.contentTree.description,
      containsText: _this.props.skinConfig.pauseScreen.showTitle && !!_this.props.contentTree.title || _this.props.skinConfig.pauseScreen.showDescription && !!_this.props.contentTree.description,
      animate: false
    };
    return _this;
  }

  _createClass(PauseScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.animateTimer = setTimeout(this.startAnimation, 1);
      this.handleResize();
      this.hideVrPauseButton();

      if (this.props.controller.videoVr) {
        document.addEventListener('mousemove', this.handlePlayerMouseMove, false);
        document.addEventListener('touchmove', this.handlePlayerMouseMove, {
          passive: false
        });
        document.addEventListener('mouseup', this.props.handleVrPlayerMouseUp, false);
        document.addEventListener('touchend', this.props.handleTouchEndOnWindow, {
          passive: false
        });
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.componentWidth !== this.props.componentWidth) {
        this.handleResize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.animateTimer);
      this.props.controller.enablePauseAnimation();

      if (this.props.controller.videoVr) {
        document.removeEventListener('mousemove', this.handlePlayerMouseMove);
        document.removeEventListener('touchmove', this.handlePlayerMouseMove);
        document.removeEventListener('mouseup', this.props.handleVrPlayerMouseUp);
        document.removeEventListener('touchend', this.props.handleTouchEndOnWindow);
      }
    }
    /**
     * Sets the animate state to true.
     * @private
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // inline style for config/skin.json elements only
      var titleStyle = {
        color: this.props.skinConfig.startScreen.titleFont.color
      };
      var descriptionStyle = {
        color: this.props.skinConfig.startScreen.descriptionFont.color
      };
      var actionIconStyle = {
        color: this.props.skinConfig.pauseScreen.PauseIconStyle.color,
        opacity: this.props.skinConfig.pauseScreen.PauseIconStyle.opacity
      }; // CSS class manipulation from config/skin.json

      var fadeUnderlayClass = (0, _classnames.default)({
        'oo-fading-underlay': true,
        'oo-fading-underlay-active': this.props.pauseAnimationDisabled && this.props.controller.state.controlBarVisible,
        'oo-animate-fade': this.state.animate && (!this.props.pauseAnimationDisabled || this.props.controller.state.cast.connected) && this.props.controller.state.controlBarVisible
      });
      var infoPanelPosition = this.props.skinConfig.pauseScreen.infoPanelPosition.toLowerCase();
      var infoPanelClass = (0, _classnames.default)({
        'oo-state-screen-info': true,
        'oo-inactive': !this.props.controller.state.controlBarVisible,
        'oo-info-panel-top': infoPanelPosition.indexOf('top') > -1,
        'oo-info-panel-bottom': infoPanelPosition.indexOf('bottom') > -1,
        'oo-info-panel-left': infoPanelPosition.indexOf('left') > -1,
        'oo-info-panel-right': infoPanelPosition.indexOf('right') > -1
      });
      var titleClass = (0, _classnames.default)({
        'oo-state-screen-title': true,
        'oo-text-truncate': true,
        'oo-pull-right': infoPanelPosition.indexOf('right') > -1
      });
      var descriptionClass = (0, _classnames.default)({
        'oo-state-screen-description': true,
        'oo-pull-right': infoPanelPosition.indexOf('right') > -1
      });
      var pauseIconPosition = this.props.skinConfig.pauseScreen.pauseIconPosition.toLowerCase();
      var actionIconClass = (0, _classnames.default)({
        'oo-action-icon-pause': !this.props.pauseAnimationDisabled,
        'oo-action-icon': this.props.pauseAnimationDisabled,
        'oo-animate-pause': this.state.animate && !this.props.pauseAnimationDisabled,
        'oo-action-icon-top': pauseIconPosition.indexOf('top') > -1,
        'oo-action-icon-bottom': pauseIconPosition.indexOf('bottom') > -1,
        'oo-action-icon-left': pauseIconPosition.indexOf('left') > -1,
        'oo-action-icon-right': pauseIconPosition.indexOf('right') > -1,
        'oo-hidden': !this.props.skinConfig.pauseScreen.showPauseIcon || this.props.pauseAnimationDisabled
      });

      var titleMetadata = _react.default.createElement("div", {
        className: titleClass,
        style: titleStyle
      }, this.props.contentTree.title);

      var descriptionMetadata = _react.default.createElement("div", {
        className: descriptionClass,
        ref: function ref(text) {
          _this2.description = text;
        },
        style: descriptionStyle
      }, this.state.descriptionText);

      var adOverlay = this.props.controller.state.adOverlayUrl && this.props.controller.state.showAdOverlay ? _react.default.createElement(_adOverlay.default, _extends({}, this.props, {
        overlay: this.props.controller.state.adOverlayUrl,
        showOverlay: this.props.controller.state.showAdOverlay,
        showOverlayCloseButton: this.props.controller.state.showAdOverlayCloseButton
      })) : null;
      var upNextPanel = this.props.controller.state.upNextInfo.showing && this.props.controller.state.upNextInfo.upNextData ? _react.default.createElement(_upNextPanel.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible,
        currentPlayhead: this.props.currentPlayhead
      })) : null;
      var viewControlsVr = this.props.controller.videoVr ? _react.default.createElement(_viewControlsVr.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible
      })) : null;

      var skipControlsEnabled = _utils.default.getPropertyValue(this.props.skinConfig, 'skipControls.enabled', false);

      var isTextTrackInBackground = skipControlsEnabled || this.props.controller.state.scrubberBar.isHovering;

      if (this.state.containsText && this.props.controller.state.controlBarVisible) {
        this.props.controller.addBlur();
      } else {
        this.props.controller.removeBlur();
      } // Always show the poster image on cast session


      var posterImageUrl = this.props.skinConfig.startScreen.showPromo ? this.props.contentTree.promo_image : '';
      var posterStyle = {};

      if (_utils.default.isValidString(posterImageUrl)) {
        posterStyle.backgroundImage = "url('".concat(posterImageUrl, "')");
      }

      var stateScreenPosterClass = (0, _classnames.default)({
        'oo-blur': true,
        'oo-state-screen-poster': this.props.skinConfig.startScreen.promoImageSize !== 'small',
        'oo-state-screen-poster-small': this.props.skinConfig.startScreen.promoImageSize === 'small'
      }); // Depends of there's another element/panel at the center of the player we will push down
      // the cast panel to allow both elements be visible to the user

      var castPanelClass = (0, _classnames.default)({
        'oo-info-panel-cast-bottom': skipControlsEnabled
      });
      var _this$props$controlle = this.props.controller.state,
          buffering = _this$props$controlle.buffering,
          cast = _this$props$controlle.cast,
          isLiveStream = _this$props$controlle.isLiveStream;
      var showSpinner = buffering || !cast.connected && this.props.buffered === 0 && !isLiveStream;
      return _react.default.createElement("div", {
        className: "oo-state-screen oo-pause-screen"
      }, this.props.controller.state.cast.connected && _react.default.createElement("div", {
        className: stateScreenPosterClass,
        style: posterStyle
      }), !this.props.controller.videoVr && this.state.containsText && _react.default.createElement("div", {
        className: fadeUnderlayClass
      }), _react.default.createElement("div", {
        // eslint-disable-line
        className: _constants.default.CLASS_NAMES.SELECTABLE_SCREEN,
        onClick: this.handleClick,
        onMouseDown: this.handlePlayerMouseDown,
        onTouchStart: this.handlePlayerMouseDown,
        onTouchEnd: this.props.handleTouchEndOnPlayer,
        onMouseUp: this.handlePlayerMouseUp
      }), _react.default.createElement(_watermark.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible
      })), _react.default.createElement("div", {
        className: infoPanelClass
      }, this.props.skinConfig.pauseScreen.showTitle ? titleMetadata : null, this.props.skinConfig.pauseScreen.showDescription ? descriptionMetadata : null), _react.default.createElement("button", {
        ref: function ref(btn) {
          _this2.pauseButton = btn;
        },
        type: "button",
        className: actionIconClass,
        onClick: this.handleClick,
        "aria-hidden": "true",
        tabIndex: "-1"
      }, _react.default.createElement(_icon.default, _extends({}, this.props, {
        icon: "pause",
        style: actionIconStyle
      }))), this.props.controller.state.cast.connected && _react.default.createElement(_castPanel.default, {
        language: this.props.language,
        localizableStrings: this.props.localizableStrings,
        device: this.props.controller.state.cast.device,
        className: castPanelClass
      }), showSpinner && _react.default.createElement(_spinner.default, {
        loadingImage: this.props.skinConfig.general.loadingImage.imageResource.url
      }), viewControlsVr, skipControlsEnabled && _react.default.createElement(_skipControls.default, {
        className: "oo-absolute-centered",
        config: this.props.controller.state.skipControls,
        language: this.props.language,
        localizableStrings: this.props.localizableStrings,
        responsiveView: this.props.responsiveView,
        skinConfig: this.props.skinConfig,
        controller: this.props.controller,
        currentPlayhead: this.props.currentPlayhead,
        a11yControls: this.props.controller.accessibilityControls,
        isInactive: !this.props.controller.state.controlBarVisible,
        isInBackground: this.props.controller.state.scrubberBar.isHovering,
        onFocus: this.handleFocus
      }), _react.default.createElement("div", {
        className: "oo-interactive-container",
        onFocus: this.handleFocus
      }, this.props.closedCaptionOptions.enabled && _react.default.createElement(_textTrackPanel.default, {
        closedCaptionOptions: this.props.closedCaptionOptions,
        cueText: this.props.closedCaptionOptions.cueText,
        direction: this.props.captionDirection,
        responsiveView: this.props.responsiveView,
        isInBackground: isTextTrackInBackground
      }), adOverlay, upNextPanel, _react.default.createElement(_controlBar.default, _extends({}, this.props, {
        height: this.props.skinConfig.controlBar.height,
        animatingControlBar: true,
        controlBarVisible: this.props.controller.state.controlBarVisible,
        playerState: this.props.playerState,
        isLiveStream: this.props.isLiveStream
      }))));
    }
  }]);

  return PauseScreen;
}(_react.default.Component);

exports.PauseScreen = PauseScreen;
var PauseScreenWithAutoHide = (0, _withAutoHide.default)(PauseScreen);
exports.PauseScreenWithAutoHide = PauseScreenWithAutoHide;

},{"../components/adOverlay":9,"../components/castPanel":12,"../components/controlBar":30,"../components/icon":42,"../components/skipControls":52,"../components/spinner":54,"../components/textTrackPanel":56,"../components/upNextPanel":62,"../components/utils":63,"../components/viewControlsVr":65,"../components/watermark":68,"../constants/constants":69,"./higher-order/withAutoHide":79,"classnames":86,"react":378,"react-dom":374}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlayingScreenWithAutoHide = exports.PlayingScreen = void 0;

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = _interopRequireDefault(require("../components/utils"));

var _controlBar = _interopRequireDefault(require("../components/controlBar"));

var _adOverlay = _interopRequireDefault(require("../components/adOverlay"));

var _upNextPanel = _interopRequireDefault(require("../components/upNextPanel"));

var _spinner = _interopRequireDefault(require("../components/spinner"));

var _textTrackPanel = _interopRequireDefault(require("../components/textTrackPanel"));

var _watermark = _interopRequireDefault(require("../components/watermark"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _viewControlsVr = _interopRequireDefault(require("../components/viewControlsVr"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _skipControls = _interopRequireDefault(require("../components/skipControls"));

var _unmuteIcon = _interopRequireDefault(require("../components/unmuteIcon"));

var _withAutoHide = _interopRequireDefault(require("./higher-order/withAutoHide"));

var _castPanel = _interopRequireDefault(require("../components/castPanel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/* global document */

/**
 * Represents a screen when a video is playing
 */
var PlayingScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(PlayingScreen, _React$Component);

  function PlayingScreen(props) {
    var _this;

    _classCallCheck(this, PlayingScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlayingScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleVrAnimationEnd", function (ref, stateName) {
      if (!ref) {
        return;
      }

      var animationEndHandler = function animationEndHandler() {
        if (stateName) {
          var newState = {};
          newState[stateName] = true;

          _this.setState(newState);
        }

        ref.removeEventListener('animationend', animationEndHandler, false);
      };

      ref.addEventListener('animationend', animationEndHandler, false);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function (event) {
      var isFocusableElement = event.target || event.target.hasAttribute(_constants.default.KEYBD_FOCUS_ID_ATTR); // Only do this if the control bar hasn't been shown by now and limit to focus
      // events that are triggered on known focusable elements (control bar items and
      // skip buttons). Note that controlBarVisible controls both the control bar and
      // the skip buttons

      if (!_this.props.controller.state.controlBarVisible && isFocusableElement) {
        if (typeof _this.props.showControlBar === 'function') {
          _this.props.showControlBar();
        }

        if (typeof _this.props.startHideControlBarTimer === 'function') {
          _this.props.startHideControlBarTimer();
        }

        _this.props.controller.state.accessibilityControlsEnabled = true;
        _this.props.controller.state.isClickedOutside = false;
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseDown", function (event) {
      event.preventDefault();

      if (_this.props.controller.videoVr) {
        event.persist();
      }

      _this.props.handleVrPlayerMouseDown(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseMove", function (event) {
      _this.storeMousePosition(event);

      _this.props.handleVrPlayerMouseMove(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerMouseUp", function (event) {
      // pause or play the video if the skin is clicked on desktop
      if (!_this.isMobile) {
        event.stopPropagation(); // W3C

        event.cancelBubble = true;
        /* IE specific */
        // eslint-disable-line

        if (!_this.props.controller.videoVr) {
          _this.props.controller.togglePlayPause(event); // if clicked on selectableSceen

        } // the order of the loop and this.props.controller.state is not important


        _this.props.controller.state.accessibilityControlsEnabled = true;
        _this.props.controller.state.isClickedOutside = false;
      }

      _this.props.handleVrPlayerMouseUp(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleMouseOver", function (event) {
      _this.storeMousePosition(event);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleTouchStart", function () {
      // Disable "mouse over controls" check for all touch interactions
      _this.hasCheckedMouseOverControls = true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "storeMousePosition", function (event) {
      if (!event) {
        return;
      }

      _this.mousePosition.clientX = event.clientX;
      _this.mousePosition.clientY = event.clientY;

      _this.tryCheckMouseOverControls();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onSkipControlsMount", function (clientRect) {
      _this.skipControlsClientRect = clientRect;

      _this.tryCheckMouseOverControls();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "tryCheckMouseOverControls", function () {
      if (_this.hasCheckedMouseOverControls || !_this.skipControlsClientRect || !(_this.mousePosition.clientX && _this.mousePosition.clientY)) {
        return;
      } // Cancel auto-hide controls timer if mouse is over controls


      if (_utils.default.isMouseInsideRect(_this.mousePosition, _this.skipControlsClientRect)) {
        if (typeof _this.props.cancelHideControlBarTimer === 'function') {
          _this.props.cancelHideControlBarTimer();
        }
      }

      _this.hasCheckedMouseOverControls = true;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerClicked", function (event) {
      if (!_this.props.isVrMouseMove && !_this.isMobile) {
        _this.props.controller.togglePlayPause(event);
      }

      _this.props.handleVrPlayerClick();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handlePlayerFocus", function () {
      _this.props.handleVrPlayerFocus();
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "setAnimationDuration", function (vrDuration, userDefaultDuration) {
      var style = {};
      var functionDefaultfDuration = 3; // default value for Duration if userDefaultDuration is undefined

      var defaultDuration = _utils.default.ensureNumber(userDefaultDuration, functionDefaultfDuration);

      var animationDurations = _this.props.controller.state.config.animationDurations;

      if (animationDurations !== null && _typeof(animationDurations) === 'object' && typeof animationDurations[vrDuration] !== 'undefined') {
        var duration = "".concat(_utils.default.ensureNumber(animationDurations[vrDuration], defaultDuration), "s");
        style = {
          animationDuration: duration,
          webkitAnimationDuration: duration
        };
      }

      return style;
    });

    _this.isMobile = _this.props.controller.state.isMobile;
    _this.browserSupportsTouch = _this.props.controller.state.browserSupportsTouch;
    _this.skipControlsClientRect = null;
    _this.hasCheckedMouseOverControls = false;
    _this.mousePosition = {
      clientX: 0,
      clientY: 0
    };
    _this.state = {
      isVrNotificationHidden: false,
      isVrIconHidden: false
    };
    return _this;
  }

  _createClass(PlayingScreen, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.props.handleVrPlayerMouseUp();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.controller.videoVr) {
        document.addEventListener('mousemove', this.handlePlayerMouseMove, false);
        document.addEventListener('mouseup', this.handlePlayerMouseUp, false);
        document.addEventListener('touchmove', this.handlePlayerMouseMove, {
          passive: false
        });
        document.addEventListener('touchend', this.props.handleTouchEndOnWindow, {
          passive: false
        });
        this.handleVrAnimationEnd(this.vrNotificatioContainer, 'isVrNotificationHidden');
        this.handleVrAnimationEnd(this.vrIconContainer, 'isVrIconHidden');
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.controller.videoVr) {
        document.removeEventListener('mousemove', this.handlePlayerMouseMove);
        document.removeEventListener('touchmove', this.handlePlayerMouseMove);
        document.removeEventListener('mouseup', this.handlePlayerMouseUp);
        document.removeEventListener('touchend', this.props.handleTouchEndOnWindow);
      }
    }
    /**
     * @description need to show special information labels (or/and icons).
     * The labels should be animated.
     * Need to remove the labels (icons) after animation
     * Animation should be only one time
     * @param {string} ref - unique identificator of the label(icon)
     * @param {string} stateName - name for a state which indicates about necessary to show the label(icon)
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var adOverlay = this.props.controller.state.adOverlayUrl && this.props.controller.state.showAdOverlay ? _react.default.createElement(_adOverlay.default, _extends({}, this.props, {
        overlay: this.props.controller.state.adOverlayUrl,
        showOverlay: this.props.controller.state.showAdOverlay,
        showOverlayCloseButton: this.props.controller.state.showAdOverlayCloseButton
      })) : null;
      var upNextPanel = this.props.controller.state.upNextInfo.showing && this.props.controller.state.upNextInfo.upNextData ? _react.default.createElement(_upNextPanel.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible,
        currentPlayhead: this.props.currentPlayhead
      })) : null;
      var viewControlsVr = this.props.controller.videoVr ? _react.default.createElement(_viewControlsVr.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible
      })) : null;
      var showUnmute = this.props.controller.state.volumeState.mutingForAutoplay && this.props.controller.state.volumeState.muted;
      var vrNotification = null;

      if (this.props.controller.state.config.isVrAnimationEnabled !== null && _typeof(this.props.controller.state.config.isVrAnimationEnabled) === 'object' && this.props.controller.state.config.isVrAnimationEnabled.vrNotification && this.props.controller.videoVr && !this.state.isVrNotificationHidden && this.props.controller.isNewVrVideo) {
        // @Todo: When we know about the rules for vrIcon, change checking "if isNewVrVideo"
        var defaultDuration = 5;
        var style = this.setAnimationDuration('vrNotification', defaultDuration);
        vrNotification = _react.default.createElement("div", {
          ref: function ref(notification) {
            _this2.vrNotificatioContainer = notification;
          },
          className: "oo-state-screen-vr-notification-container"
        }, _react.default.createElement("p", {
          className: "oo-state-screen-vr-notification",
          style: style
        }, 'Select and drag to look around'));
      }

      var vrIcon = null;

      if (this.props.controller.state.config.isVrAnimationEnabled !== null && _typeof(this.props.controller.state.config.isVrAnimationEnabled) === 'object' && this.props.controller.state.config.isVrAnimationEnabled.vrIcon && this.props.controller.videoVr && !this.state.isVrIconHidden && this.props.controller.isNewVrVideo) {
        var _defaultDuration = 3;

        var _style = this.setAnimationDuration('vrIcon', _defaultDuration);

        vrIcon = _react.default.createElement("div", {
          ref: function ref(icon) {
            _this2.vrIconContainer = icon;
          },
          className: "oo-state-screen-vr-container",
          style: _style
        }, _react.default.createElement("div", {
          className: "oo-state-screen-vr-bg"
        }, _react.default.createElement(_icon.default, _extends({}, this.props, {
          icon: "vrIcon",
          className: "oo-state-screen-vr-icon"
        }))));
      }

      var skipControlsEnabled = _utils.default.getPropertyValue(this.props.skinConfig, 'skipControls.enabled', false);

      var isTextTrackInBackground = this.props.controller.state.scrubberBar.isHovering || skipControlsEnabled && this.props.controller.state.controlBarVisible;
      var className = (0, _classnames.default)('oo-state-screen oo-playing-screen', {
        'oo-controls-active': skipControlsEnabled && this.props.controller.state.controlBarVisible
      }); // Always show the poster image on cast session

      var posterImageUrl = this.props.skinConfig.startScreen.showPromo ? this.props.contentTree.promo_image : '';
      var posterStyle = {};

      if (_utils.default.isValidString(posterImageUrl)) {
        posterStyle.backgroundImage = "url('".concat(posterImageUrl, "')");
      }

      var stateScreenPosterClass = (0, _classnames.default)({
        'oo-blur': true,
        'oo-state-screen-poster': this.props.skinConfig.startScreen.promoImageSize !== 'small',
        'oo-state-screen-poster-small': this.props.skinConfig.startScreen.promoImageSize === 'small'
      }); // Depends of there's another element/panel at the center of the player we will push down
      // the cast panel to allow both elements be visible to the user

      var castPanelClass = (0, _classnames.default)({
        'oo-info-panel-cast-bottom': skipControlsEnabled
      }); // Add a blur only when the content it being casted on a chromecast device and a fading layer

      if (this.props.controller.state.cast.connected) {
        this.props.controller.addBlur();
      } else {
        this.props.controller.removeBlur();
      }

      var fadeUnderlayClass = (0, _classnames.default)({
        'oo-fading-underlay': true,
        'oo-fading-underlay-active': this.props.controller.state.cast.connected,
        'oo-animate-fade': true
      });
      var _this$props$controlle = this.props.controller.state,
          buffering = _this$props$controlle.buffering,
          isLiveStream = _this$props$controlle.isLiveStream;
      var showSpinner = buffering || this.props.buffered === 0 && !isLiveStream;
      return _react.default.createElement("div", {
        // eslint-disable-line
        className: className,
        onTouchStart: this.handleTouchStart,
        onMouseOver: this.handleMouseOver
      }, this.props.controller.state.cast.connected && _react.default.createElement("div", {
        className: stateScreenPosterClass,
        style: posterStyle
      }), this.props.controller.state.cast.connected && _react.default.createElement("div", {
        className: fadeUnderlayClass
      }), _react.default.createElement("div", {
        // eslint-disable-line
        className: _constants.default.CLASS_NAMES.SELECTABLE_SCREEN,
        onMouseDown: this.handlePlayerMouseDown,
        onTouchStart: this.handlePlayerMouseDown,
        onTouchEnd: this.props.handleTouchEndOnPlayer,
        onClick: this.handlePlayerClicked,
        onFocus: this.handlePlayerFocus
      }), vrNotification, vrIcon, _react.default.createElement(_watermark.default, _extends({}, this.props, {
        controlBarVisible: this.props.controller.state.controlBarVisible
      })), this.props.controller.state.cast.connected && _react.default.createElement(_castPanel.default, {
        language: this.props.language,
        localizableStrings: this.props.localizableStrings,
        device: this.props.controller.state.cast.device,
        className: castPanelClass
      }), showSpinner && _react.default.createElement(_spinner.default, {
        loadingImage: this.props.skinConfig.general.loadingImage.imageResource.url
      }), viewControlsVr, skipControlsEnabled && _react.default.createElement(_skipControls.default, {
        className: "oo-absolute-centered",
        config: this.props.controller.state.skipControls,
        language: this.props.language,
        localizableStrings: this.props.localizableStrings,
        responsiveView: this.props.responsiveView,
        skinConfig: this.props.skinConfig,
        controller: this.props.controller,
        currentPlayhead: this.props.currentPlayhead,
        a11yControls: this.props.controller.accessibilityControls,
        isInactive: !this.props.controller.state.controlBarVisible,
        isInBackground: this.props.controller.state.scrubberBar.isHovering,
        onMount: this.onSkipControlsMount,
        onFocus: this.handleFocus
      }), _react.default.createElement("div", {
        className: "oo-interactive-container",
        onFocus: this.handleFocus
      }, this.props.closedCaptionOptions.enabled && _react.default.createElement(_textTrackPanel.default, {
        closedCaptionOptions: this.props.closedCaptionOptions,
        cueText: this.props.closedCaptionOptions.cueText,
        direction: this.props.captionDirection,
        responsiveView: this.props.responsiveView,
        isInBackground: isTextTrackInBackground
      }), adOverlay, upNextPanel, _react.default.createElement(_controlBar.default, _extends({}, this.props, {
        height: this.props.skinConfig.controlBar.height,
        animatingControlBar: true,
        controlBarVisible: this.props.controller.state.controlBarVisible,
        playerState: this.props.playerState,
        isLiveStream: this.props.isLiveStream
      }))), showUnmute ? _react.default.createElement(_unmuteIcon.default, this.props) : null);
    }
  }]);

  return PlayingScreen;
}(_react.default.Component);

exports.PlayingScreen = PlayingScreen;
var PlayingScreenWithAutoHide = (0, _withAutoHide.default)(PlayingScreen);
exports.PlayingScreenWithAutoHide = PlayingScreenWithAutoHide;

},{"../components/adOverlay":9,"../components/castPanel":12,"../components/controlBar":30,"../components/icon":42,"../components/skipControls":52,"../components/spinner":54,"../components/textTrackPanel":56,"../components/unmuteIcon":61,"../components/upNextPanel":62,"../components/utils":63,"../components/viewControlsVr":65,"../components/watermark":68,"../constants/constants":69,"./higher-order/withAutoHide":79,"classnames":86,"react":378}],82:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = _interopRequireDefault(require("../components/utils"));

var _constants = _interopRequireDefault(require("../constants/constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/* global document */

/**
 * Popover element
 */
var Popover =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Popover, _React$Component);

  function Popover() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Popover);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Popover)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onKeyDown", function (event) {
      if (!_this.props.closeActionEnabled || typeof _this.props.closeAction !== 'function') {
        return;
      }

      if (event.which === _constants.default.KEYCODES.ESCAPE_KEY || event.keyCode === _constants.default.KEYCODES.ESCAPE_KEY) {
        // Ask parent to restore the focus of the toggle button that triggers this
        // popover if the ESC key was pressed while the focus was inside this element.
        // If the focus was outside the popover we shouldn't re-focus the toggle button.
        var targetIsChildElement = _this.domElement ? _this.domElement.contains(event.target) : false; // eslint-disable-line

        _this.props.closeAction({
          restoreToggleButtonFocus: targetIsChildElement
        });
      }
    });

    return _this;
  }

  _createClass(Popover, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // We listen to the event on the document instead of the element in order to
      // allow closing the popover with ESC even when it doesn't have focus.
      document.addEventListener('keydown', this.onKeyDown);

      if (this.props.autoFocus) {
        _utils.default.autoFocusFirstElement(this.domElement);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.onKeyDown);
    }
    /**
     * Handles the keydown event on the document when the popover is active.
     * @private
     * @param {event} event description
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react.default.createElement("div", {
        ref: function ref(error) {
          _this2.domElement = error;
        },
        className: this.props.popoverClassName
      }, this.props.children);
    }
  }]);

  return Popover;
}(_react.default.Component);

Popover.propTypes = {
  autoFocus: _propTypes.default.bool,
  popoverClassName: _propTypes.default.string,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  closeActionEnabled: _propTypes.default.bool,
  closeAction: _propTypes.default.func
};
Popover.defaultProps = {
  autoFocus: false,
  popoverClassName: 'oo-popover',
  closeActionEnabled: false,
  closeAction: function closeAction() {}
};
module.exports = Popover;

},{"../components/utils":63,"../constants/constants":69,"prop-types":370,"react":378}],83:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = _interopRequireDefault(require("../constants/constants"));

var _watermark = _interopRequireDefault(require("../components/watermark"));

var _icon = _interopRequireDefault(require("../components/icon"));

var _spinner = _interopRequireDefault(require("../components/spinner"));

var _utils = _interopRequireDefault(require("../components/utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/destructuring-assignment */

/**
 * The screen to be displayed on initial stage
 */
var StartScreen =
/*#__PURE__*/
function (_React$Component) {
  _inherits(StartScreen, _React$Component);

  function StartScreen(props) {
    var _this;

    _classCallCheck(this, StartScreen);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StartScreen).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleResize", function (nextProps) {
      var description = nextProps ? nextProps.contentTree.description : _this.props.contentTree.description;

      if (_reactDom.default.findDOMNode(_this.refs.description)) {
        // eslint-disable-line
        _this.setState({
          descriptionText: _utils.default.truncateTextToWidth(_reactDom.default.findDOMNode(_this.refs.description), description) // eslint-disable-line

        });
      }
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function (event) {
      if (_this.props.isInitializing) {
        return;
      }

      event.preventDefault();

      _this.props.controller.togglePlayPause();

      _this.props.controller.state.accessibilityControlsEnabled = true;

      _this.setState({
        playButtonClicked: true
      });
    });

    _this.state = {
      playButtonClicked: false,
      descriptionText: _this.props.contentTree.description
    };
    return _this;
  }

  _createClass(StartScreen, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.handleResize();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.contentTree.description !== this.props.contentTree.description || nextProps.componentWidth !== this.props.componentWidth) {
        this.handleResize(nextProps);
      }
    }
    /**
     * Update description test on resize
     * @param {Object} nextProps - props object
     */

  }, {
    key: "render",
    value: function render() {
      // inline style for config/skin.json elements only
      var titleStyle = {
        color: this.props.skinConfig.startScreen.titleFont.color
      };
      var descriptionStyle = {
        color: this.props.skinConfig.startScreen.descriptionFont.color
      };
      var actionIconStyle = {
        color: this.props.skinConfig.startScreen.playIconStyle.color,
        opacity: this.props.skinConfig.startScreen.playIconStyle.opacity
      };
      var posterImageUrl = this.props.skinConfig.startScreen.showPromo ? this.props.contentTree.promo_image : '';
      var posterStyle = {};

      if (_utils.default.isValidString(posterImageUrl)) {
        posterStyle.backgroundImage = "url('".concat(posterImageUrl, "')");
      } // CSS class manipulation from config/skin.json


      var stateScreenPosterClass = (0, _classnames.default)({
        'oo-state-screen-poster': this.props.skinConfig.startScreen.promoImageSize !== 'small',
        'oo-state-screen-poster-small': this.props.skinConfig.startScreen.promoImageSize === 'small'
      });
      var infoPanelPosition = this.props.skinConfig.startScreen.infoPanelPosition.toLowerCase();
      var playButtonPosition = this.props.skinConfig.startScreen.playButtonPosition.toLowerCase();
      var infoPanelClass = (0, _classnames.default)({
        'oo-state-screen-info': true,
        'oo-info-panel-top': infoPanelPosition.indexOf('top') > -1,
        'oo-info-panel-bottom': infoPanelPosition.indexOf('bottom') > -1,
        'oo-info-panel-left': infoPanelPosition.indexOf('left') > -1,
        'oo-info-panel-right': infoPanelPosition.indexOf('right') > -1
      });
      var titleClass = (0, _classnames.default)({
        'oo-state-screen-title': true,
        'oo-text-truncate': true,
        'oo-pull-right': infoPanelPosition.indexOf('right') > -1
      });
      var descriptionClass = (0, _classnames.default)({
        'oo-state-screen-description': true,
        'oo-pull-right': infoPanelPosition.indexOf('right') > -1
      });
      var actionIconClass = (0, _classnames.default)({
        'oo-action-icon': true,
        'oo-action-icon-top': playButtonPosition.indexOf('top') > -1,
        'oo-action-icon-bottom': playButtonPosition.indexOf('bottom') > -1,
        'oo-action-icon-left': playButtonPosition.indexOf('left') > -1,
        'oo-action-icon-right': playButtonPosition.indexOf('right') > -1,
        'oo-hidden': !this.props.skinConfig.startScreen.showPlayButton
      });

      var titleMetadata = _react.default.createElement("div", {
        className: titleClass,
        style: titleStyle
      }, this.props.contentTree.title);

      var iconName = this.props.controller.state.playerState === _constants.default.STATE.END ? 'replay' : 'play'; // The descriptionText value doesn't react to changes in contentTree.description since
      // it's being handled as internal state in order to allow truncating it on player resize.
      // We need to migrate truncateTextToWidth to a CSS solution in order to avoid this.

      var descriptionMetadata = _react.default.createElement("div", {
        className: descriptionClass,
        ref: "description" // eslint-disable-line
        ,
        style: descriptionStyle
      }, this.state.descriptionText || this.props.contentTree.description);

      var actionIcon;
      var infoPanel; // We do not show the action icon, title or description when the player is initializing

      if (!this.props.isInitializing) {
        actionIcon = _react.default.createElement("button", {
          type: "button",
          className: actionIconClass,
          onMouseUp: _utils.default.blurOnMouseUp,
          onClick: this.handleClick,
          tabIndex: "0",
          "aria-label": _constants.default.ARIA_LABELS.START_PLAYBACK
        }, _react.default.createElement(_icon.default, _extends({}, this.props, {
          icon: iconName,
          style: actionIconStyle
        })));
        infoPanel = _react.default.createElement("div", {
          className: infoPanelClass
        }, this.props.skinConfig.startScreen.showTitle ? titleMetadata : null, this.props.skinConfig.startScreen.showDescription ? descriptionMetadata : null);
      }

      return _react.default.createElement("div", {
        className: "oo-state-screen oo-start-screen"
      }, _react.default.createElement("div", {
        className: stateScreenPosterClass,
        style: posterStyle
      }, _react.default.createElement("div", {
        className: "oo-start-screen-linear-gradient"
      }), _react.default.createElement("a", {
        // eslint-disable-line
        className: "oo-state-screen-selectable",
        onClick: this.handleClick
      })), _react.default.createElement(_watermark.default, _extends({}, this.props, {
        controlBarVisible: false
      })), infoPanel, this.state.playButtonClicked && this.props.controller.state.playerState === _constants.default.STATE.START || this.props.controller.state.buffering || this.props.showSpinner ? _react.default.createElement(_spinner.default, {
        loadingImage: this.props.skinConfig.general.loadingImage.imageResource.url
      }) : actionIcon);
    }
  }]);

  return StartScreen;
}(_react.default.Component);

StartScreen.propTypes = {
  isInitializing: _propTypes.default.bool,
  skinConfig: _propTypes.default.shape({
    startScreen: _propTypes.default.shape({
      playIconStyle: _propTypes.default.shape({
        color: _propTypes.default.string
      })
    }),
    icons: _propTypes.default.objectOf(_propTypes.default.object)
  }),
  showSpinner: _propTypes.default.bool,
  controller: _propTypes.default.shape({
    togglePlayPause: _propTypes.default.func,
    state: _propTypes.default.shape({
      playerState: _propTypes.default.string,
      buffering: _propTypes.default.bool
    })
  }),
  contentTree: _propTypes.default.shape({
    promo_image: _propTypes.default.string,
    description: _propTypes.default.string,
    title: _propTypes.default.string
  })
};
StartScreen.defaultProps = {
  isInitializing: false,
  skinConfig: {
    general: {
      loadingImage: {
        imageResource: {
          url: null
        }
      }
    },
    startScreen: {
      titleFont: {},
      descriptionFont: {},
      playIconStyle: {
        color: 'white'
      },
      infoPanelPosition: 'topLeft',
      playButtonPosition: 'center',
      showPlayButton: true,
      showPromo: true,
      showTitle: true,
      showDescription: true,
      promoImageSize: 'default'
    },
    icons: {
      play: {
        fontStyleClass: 'oo-icon oo-icon-play'
      },
      replay: {
        fontStyleClass: 'oo-icon oo-icon-upnext-replay'
      }
    }
  },
  controller: {
    togglePlayPause: function togglePlayPause() {},
    state: {
      playerState: 'start',
      buffering: false
    }
  },
  contentTree: {
    promo_image: '',
    description: '',
    title: ''
  },
  showSpinner: false
};
module.exports = StartScreen;

},{"../components/icon":42,"../components/spinner":54,"../components/utils":63,"../components/watermark":68,"../constants/constants":69,"classnames":86,"prop-types":370,"react":378,"react-dom":374}],84:[function(require,module,exports){
"use strict";

require("core-js/es6");

require("core-js/fn/array/includes");

require("core-js/fn/string/pad-start");

require("core-js/fn/string/pad-end");

require("core-js/fn/symbol/async-iterator");

require("core-js/fn/object/get-own-property-descriptors");

require("core-js/fn/object/values");

require("core-js/fn/object/entries");

require("core-js/fn/promise/finally");

require("core-js/web");

require("regenerator-runtime/runtime");
},{"core-js/es6":87,"core-js/fn/array/includes":88,"core-js/fn/object/entries":89,"core-js/fn/object/get-own-property-descriptors":90,"core-js/fn/object/values":91,"core-js/fn/promise/finally":92,"core-js/fn/string/pad-end":93,"core-js/fn/string/pad-start":94,"core-js/fn/symbol/async-iterator":95,"core-js/web":360,"regenerator-runtime/runtime":379}],85:[function(require,module,exports){
require("./lib/noConflict");

},{"./lib/noConflict":84}],86:[function(require,module,exports){
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],87:[function(require,module,exports){
require('../modules/es6.symbol');
require('../modules/es6.object.create');
require('../modules/es6.object.define-property');
require('../modules/es6.object.define-properties');
require('../modules/es6.object.get-own-property-descriptor');
require('../modules/es6.object.get-prototype-of');
require('../modules/es6.object.keys');
require('../modules/es6.object.get-own-property-names');
require('../modules/es6.object.freeze');
require('../modules/es6.object.seal');
require('../modules/es6.object.prevent-extensions');
require('../modules/es6.object.is-frozen');
require('../modules/es6.object.is-sealed');
require('../modules/es6.object.is-extensible');
require('../modules/es6.object.assign');
require('../modules/es6.object.is');
require('../modules/es6.object.set-prototype-of');
require('../modules/es6.object.to-string');
require('../modules/es6.function.bind');
require('../modules/es6.function.name');
require('../modules/es6.function.has-instance');
require('../modules/es6.parse-int');
require('../modules/es6.parse-float');
require('../modules/es6.number.constructor');
require('../modules/es6.number.to-fixed');
require('../modules/es6.number.to-precision');
require('../modules/es6.number.epsilon');
require('../modules/es6.number.is-finite');
require('../modules/es6.number.is-integer');
require('../modules/es6.number.is-nan');
require('../modules/es6.number.is-safe-integer');
require('../modules/es6.number.max-safe-integer');
require('../modules/es6.number.min-safe-integer');
require('../modules/es6.number.parse-float');
require('../modules/es6.number.parse-int');
require('../modules/es6.math.acosh');
require('../modules/es6.math.asinh');
require('../modules/es6.math.atanh');
require('../modules/es6.math.cbrt');
require('../modules/es6.math.clz32');
require('../modules/es6.math.cosh');
require('../modules/es6.math.expm1');
require('../modules/es6.math.fround');
require('../modules/es6.math.hypot');
require('../modules/es6.math.imul');
require('../modules/es6.math.log10');
require('../modules/es6.math.log1p');
require('../modules/es6.math.log2');
require('../modules/es6.math.sign');
require('../modules/es6.math.sinh');
require('../modules/es6.math.tanh');
require('../modules/es6.math.trunc');
require('../modules/es6.string.from-code-point');
require('../modules/es6.string.raw');
require('../modules/es6.string.trim');
require('../modules/es6.string.iterator');
require('../modules/es6.string.code-point-at');
require('../modules/es6.string.ends-with');
require('../modules/es6.string.includes');
require('../modules/es6.string.repeat');
require('../modules/es6.string.starts-with');
require('../modules/es6.string.anchor');
require('../modules/es6.string.big');
require('../modules/es6.string.blink');
require('../modules/es6.string.bold');
require('../modules/es6.string.fixed');
require('../modules/es6.string.fontcolor');
require('../modules/es6.string.fontsize');
require('../modules/es6.string.italics');
require('../modules/es6.string.link');
require('../modules/es6.string.small');
require('../modules/es6.string.strike');
require('../modules/es6.string.sub');
require('../modules/es6.string.sup');
require('../modules/es6.date.now');
require('../modules/es6.date.to-json');
require('../modules/es6.date.to-iso-string');
require('../modules/es6.date.to-string');
require('../modules/es6.date.to-primitive');
require('../modules/es6.array.is-array');
require('../modules/es6.array.from');
require('../modules/es6.array.of');
require('../modules/es6.array.join');
require('../modules/es6.array.slice');
require('../modules/es6.array.sort');
require('../modules/es6.array.for-each');
require('../modules/es6.array.map');
require('../modules/es6.array.filter');
require('../modules/es6.array.some');
require('../modules/es6.array.every');
require('../modules/es6.array.reduce');
require('../modules/es6.array.reduce-right');
require('../modules/es6.array.index-of');
require('../modules/es6.array.last-index-of');
require('../modules/es6.array.copy-within');
require('../modules/es6.array.fill');
require('../modules/es6.array.find');
require('../modules/es6.array.find-index');
require('../modules/es6.array.species');
require('../modules/es6.array.iterator');
require('../modules/es6.regexp.constructor');
require('../modules/es6.regexp.to-string');
require('../modules/es6.regexp.flags');
require('../modules/es6.regexp.match');
require('../modules/es6.regexp.replace');
require('../modules/es6.regexp.search');
require('../modules/es6.regexp.split');
require('../modules/es6.promise');
require('../modules/es6.map');
require('../modules/es6.set');
require('../modules/es6.weak-map');
require('../modules/es6.weak-set');
require('../modules/es6.typed.array-buffer');
require('../modules/es6.typed.data-view');
require('../modules/es6.typed.int8-array');
require('../modules/es6.typed.uint8-array');
require('../modules/es6.typed.uint8-clamped-array');
require('../modules/es6.typed.int16-array');
require('../modules/es6.typed.uint16-array');
require('../modules/es6.typed.int32-array');
require('../modules/es6.typed.uint32-array');
require('../modules/es6.typed.float32-array');
require('../modules/es6.typed.float64-array');
require('../modules/es6.reflect.apply');
require('../modules/es6.reflect.construct');
require('../modules/es6.reflect.define-property');
require('../modules/es6.reflect.delete-property');
require('../modules/es6.reflect.enumerate');
require('../modules/es6.reflect.get');
require('../modules/es6.reflect.get-own-property-descriptor');
require('../modules/es6.reflect.get-prototype-of');
require('../modules/es6.reflect.has');
require('../modules/es6.reflect.is-extensible');
require('../modules/es6.reflect.own-keys');
require('../modules/es6.reflect.prevent-extensions');
require('../modules/es6.reflect.set');
require('../modules/es6.reflect.set-prototype-of');
module.exports = require('../modules/_core');

},{"../modules/_core":114,"../modules/es6.array.copy-within":212,"../modules/es6.array.every":213,"../modules/es6.array.fill":214,"../modules/es6.array.filter":215,"../modules/es6.array.find":217,"../modules/es6.array.find-index":216,"../modules/es6.array.for-each":218,"../modules/es6.array.from":219,"../modules/es6.array.index-of":220,"../modules/es6.array.is-array":221,"../modules/es6.array.iterator":222,"../modules/es6.array.join":223,"../modules/es6.array.last-index-of":224,"../modules/es6.array.map":225,"../modules/es6.array.of":226,"../modules/es6.array.reduce":228,"../modules/es6.array.reduce-right":227,"../modules/es6.array.slice":229,"../modules/es6.array.some":230,"../modules/es6.array.sort":231,"../modules/es6.array.species":232,"../modules/es6.date.now":233,"../modules/es6.date.to-iso-string":234,"../modules/es6.date.to-json":235,"../modules/es6.date.to-primitive":236,"../modules/es6.date.to-string":237,"../modules/es6.function.bind":238,"../modules/es6.function.has-instance":239,"../modules/es6.function.name":240,"../modules/es6.map":241,"../modules/es6.math.acosh":242,"../modules/es6.math.asinh":243,"../modules/es6.math.atanh":244,"../modules/es6.math.cbrt":245,"../modules/es6.math.clz32":246,"../modules/es6.math.cosh":247,"../modules/es6.math.expm1":248,"../modules/es6.math.fround":249,"../modules/es6.math.hypot":250,"../modules/es6.math.imul":251,"../modules/es6.math.log10":252,"../modules/es6.math.log1p":253,"../modules/es6.math.log2":254,"../modules/es6.math.sign":255,"../modules/es6.math.sinh":256,"../modules/es6.math.tanh":257,"../modules/es6.math.trunc":258,"../modules/es6.number.constructor":259,"../modules/es6.number.epsilon":260,"../modules/es6.number.is-finite":261,"../modules/es6.number.is-integer":262,"../modules/es6.number.is-nan":263,"../modules/es6.number.is-safe-integer":264,"../modules/es6.number.max-safe-integer":265,"../modules/es6.number.min-safe-integer":266,"../modules/es6.number.parse-float":267,"../modules/es6.number.parse-int":268,"../modules/es6.number.to-fixed":269,"../modules/es6.number.to-precision":270,"../modules/es6.object.assign":271,"../modules/es6.object.create":272,"../modules/es6.object.define-properties":273,"../modules/es6.object.define-property":274,"../modules/es6.object.freeze":275,"../modules/es6.object.get-own-property-descriptor":276,"../modules/es6.object.get-own-property-names":277,"../modules/es6.object.get-prototype-of":278,"../modules/es6.object.is":282,"../modules/es6.object.is-extensible":279,"../modules/es6.object.is-frozen":280,"../modules/es6.object.is-sealed":281,"../modules/es6.object.keys":283,"../modules/es6.object.prevent-extensions":284,"../modules/es6.object.seal":285,"../modules/es6.object.set-prototype-of":286,"../modules/es6.object.to-string":287,"../modules/es6.parse-float":288,"../modules/es6.parse-int":289,"../modules/es6.promise":290,"../modules/es6.reflect.apply":291,"../modules/es6.reflect.construct":292,"../modules/es6.reflect.define-property":293,"../modules/es6.reflect.delete-property":294,"../modules/es6.reflect.enumerate":295,"../modules/es6.reflect.get":298,"../modules/es6.reflect.get-own-property-descriptor":296,"../modules/es6.reflect.get-prototype-of":297,"../modules/es6.reflect.has":299,"../modules/es6.reflect.is-extensible":300,"../modules/es6.reflect.own-keys":301,"../modules/es6.reflect.prevent-extensions":302,"../modules/es6.reflect.set":304,"../modules/es6.reflect.set-prototype-of":303,"../modules/es6.regexp.constructor":305,"../modules/es6.regexp.flags":306,"../modules/es6.regexp.match":307,"../modules/es6.regexp.replace":308,"../modules/es6.regexp.search":309,"../modules/es6.regexp.split":310,"../modules/es6.regexp.to-string":311,"../modules/es6.set":312,"../modules/es6.string.anchor":313,"../modules/es6.string.big":314,"../modules/es6.string.blink":315,"../modules/es6.string.bold":316,"../modules/es6.string.code-point-at":317,"../modules/es6.string.ends-with":318,"../modules/es6.string.fixed":319,"../modules/es6.string.fontcolor":320,"../modules/es6.string.fontsize":321,"../modules/es6.string.from-code-point":322,"../modules/es6.string.includes":323,"../modules/es6.string.italics":324,"../modules/es6.string.iterator":325,"../modules/es6.string.link":326,"../modules/es6.string.raw":327,"../modules/es6.string.repeat":328,"../modules/es6.string.small":329,"../modules/es6.string.starts-with":330,"../modules/es6.string.strike":331,"../modules/es6.string.sub":332,"../modules/es6.string.sup":333,"../modules/es6.string.trim":334,"../modules/es6.symbol":335,"../modules/es6.typed.array-buffer":336,"../modules/es6.typed.data-view":337,"../modules/es6.typed.float32-array":338,"../modules/es6.typed.float64-array":339,"../modules/es6.typed.int16-array":340,"../modules/es6.typed.int32-array":341,"../modules/es6.typed.int8-array":342,"../modules/es6.typed.uint16-array":343,"../modules/es6.typed.uint32-array":344,"../modules/es6.typed.uint8-array":345,"../modules/es6.typed.uint8-clamped-array":346,"../modules/es6.weak-map":347,"../modules/es6.weak-set":348}],88:[function(require,module,exports){
require('../../modules/es7.array.includes');
module.exports = require('../../modules/_core').Array.includes;

},{"../../modules/_core":114,"../../modules/es7.array.includes":349}],89:[function(require,module,exports){
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;

},{"../../modules/_core":114,"../../modules/es7.object.entries":350}],90:[function(require,module,exports){
require('../../modules/es7.object.get-own-property-descriptors');
module.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;

},{"../../modules/_core":114,"../../modules/es7.object.get-own-property-descriptors":351}],91:[function(require,module,exports){
require('../../modules/es7.object.values');
module.exports = require('../../modules/_core').Object.values;

},{"../../modules/_core":114,"../../modules/es7.object.values":352}],92:[function(require,module,exports){
'use strict';
require('../../modules/es6.promise');
require('../../modules/es7.promise.finally');
module.exports = require('../../modules/_core').Promise['finally'];

},{"../../modules/_core":114,"../../modules/es6.promise":290,"../../modules/es7.promise.finally":353}],93:[function(require,module,exports){
require('../../modules/es7.string.pad-end');
module.exports = require('../../modules/_core').String.padEnd;

},{"../../modules/_core":114,"../../modules/es7.string.pad-end":354}],94:[function(require,module,exports){
require('../../modules/es7.string.pad-start');
module.exports = require('../../modules/_core').String.padStart;

},{"../../modules/_core":114,"../../modules/es7.string.pad-start":355}],95:[function(require,module,exports){
require('../../modules/es7.symbol.async-iterator');
module.exports = require('../../modules/_wks-ext').f('asyncIterator');

},{"../../modules/_wks-ext":209,"../../modules/es7.symbol.async-iterator":356}],96:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],97:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":110}],98:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":132,"./_wks":210}],99:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],100:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":141}],101:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":195,"./_to-length":199,"./_to-object":200}],102:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":195,"./_to-length":199,"./_to-object":200}],103:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":195,"./_to-iobject":198,"./_to-length":199}],104:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":107,"./_ctx":116,"./_iobject":137,"./_to-length":199,"./_to-object":200}],105:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":96,"./_iobject":137,"./_to-length":199,"./_to-object":200}],106:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":139,"./_is-object":141,"./_wks":210}],107:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":106}],108:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":96,"./_invoke":136,"./_is-object":141}],109:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":110,"./_wks":210}],110:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],111:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":99,"./_ctx":116,"./_descriptors":120,"./_for-of":129,"./_iter-define":145,"./_iter-step":147,"./_meta":154,"./_object-create":158,"./_object-dp":159,"./_redefine-all":177,"./_set-species":181,"./_validate-collection":207}],112:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":99,"./_an-object":100,"./_array-methods":104,"./_for-of":129,"./_has":131,"./_is-object":141,"./_meta":154,"./_redefine-all":177,"./_validate-collection":207}],113:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":99,"./_export":124,"./_fails":126,"./_for-of":129,"./_global":130,"./_inherit-if-required":135,"./_is-object":141,"./_iter-detect":146,"./_meta":154,"./_redefine":178,"./_redefine-all":177,"./_set-to-string-tag":182}],114:[function(require,module,exports){
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],115:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":159,"./_property-desc":176}],116:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":96}],117:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":126}],118:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":100,"./_to-primitive":201}],119:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],120:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":126}],121:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":130,"./_is-object":141}],122:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],123:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":164,"./_object-keys":167,"./_object-pie":168}],124:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":114,"./_ctx":116,"./_global":130,"./_hide":132,"./_redefine":178}],125:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":210}],126:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],127:[function(require,module,exports){
'use strict';
var hide = require('./_hide');
var redefine = require('./_redefine');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":119,"./_fails":126,"./_hide":132,"./_redefine":178,"./_wks":210}],128:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":100}],129:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":100,"./_ctx":116,"./_is-array-iter":138,"./_iter-call":143,"./_to-length":199,"./core.get-iterator-method":211}],130:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],131:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],132:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":120,"./_object-dp":159,"./_property-desc":176}],133:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":130}],134:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":120,"./_dom-create":121,"./_fails":126}],135:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":141,"./_set-proto":180}],136:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],137:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":110}],138:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":148,"./_wks":210}],139:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":110}],140:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":141}],141:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],142:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":110,"./_is-object":141,"./_wks":210}],143:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":100}],144:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":132,"./_object-create":158,"./_property-desc":176,"./_set-to-string-tag":182,"./_wks":210}],145:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":124,"./_hide":132,"./_iter-create":144,"./_iterators":148,"./_library":149,"./_object-gpo":165,"./_redefine":178,"./_set-to-string-tag":182,"./_wks":210}],146:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":210}],147:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],148:[function(require,module,exports){
module.exports = {};

},{}],149:[function(require,module,exports){
module.exports = false;

},{}],150:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],151:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":153}],152:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],153:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],154:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":126,"./_has":131,"./_is-object":141,"./_object-dp":159,"./_uid":205}],155:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":110,"./_global":130,"./_task":194}],156:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":96}],157:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":126,"./_iobject":137,"./_object-gops":164,"./_object-keys":167,"./_object-pie":168,"./_to-object":200}],158:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":100,"./_dom-create":121,"./_enum-bug-keys":122,"./_html":133,"./_object-dps":160,"./_shared-key":183}],159:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":100,"./_descriptors":120,"./_ie8-dom-define":134,"./_to-primitive":201}],160:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":100,"./_descriptors":120,"./_object-dp":159,"./_object-keys":167}],161:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":120,"./_has":131,"./_ie8-dom-define":134,"./_object-pie":168,"./_property-desc":176,"./_to-iobject":198,"./_to-primitive":201}],162:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":163,"./_to-iobject":198}],163:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":122,"./_object-keys-internal":166}],164:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],165:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":131,"./_shared-key":183,"./_to-object":200}],166:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":103,"./_has":131,"./_shared-key":183,"./_to-iobject":198}],167:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":122,"./_object-keys-internal":166}],168:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],169:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":114,"./_export":124,"./_fails":126}],170:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":167,"./_object-pie":168,"./_to-iobject":198}],171:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":100,"./_global":130,"./_object-gopn":163,"./_object-gops":164}],172:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":130,"./_string-trim":192,"./_string-ws":193}],173:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":130,"./_string-trim":192,"./_string-ws":193}],174:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],175:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":100,"./_is-object":141,"./_new-promise-capability":156}],176:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],177:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":178}],178:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":114,"./_global":130,"./_has":131,"./_hide":132,"./_uid":205}],179:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],180:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":100,"./_ctx":116,"./_is-object":141,"./_object-gopd":161}],181:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":120,"./_global":130,"./_object-dp":159,"./_wks":210}],182:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":131,"./_object-dp":159,"./_wks":210}],183:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":184,"./_uid":205}],184:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":114,"./_global":130,"./_library":149}],185:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":96,"./_an-object":100,"./_wks":210}],186:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":126}],187:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":119,"./_to-integer":197}],188:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":119,"./_is-regexp":142}],189:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":119,"./_export":124,"./_fails":126}],190:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":119,"./_string-repeat":191,"./_to-length":199}],191:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":119,"./_to-integer":197}],192:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":119,"./_export":124,"./_fails":126,"./_string-ws":193}],193:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],194:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":110,"./_ctx":116,"./_dom-create":121,"./_global":130,"./_html":133,"./_invoke":136}],195:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":197}],196:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":197,"./_to-length":199}],197:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],198:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":119,"./_iobject":137}],199:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":197}],200:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":119}],201:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":141}],202:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":99,"./_array-copy-within":101,"./_array-fill":102,"./_array-includes":103,"./_array-methods":104,"./_classof":109,"./_ctx":116,"./_descriptors":120,"./_export":124,"./_fails":126,"./_global":130,"./_has":131,"./_hide":132,"./_is-array-iter":138,"./_is-object":141,"./_iter-detect":146,"./_iterators":148,"./_library":149,"./_object-create":158,"./_object-dp":159,"./_object-gopd":161,"./_object-gopn":163,"./_object-gpo":165,"./_property-desc":176,"./_redefine-all":177,"./_set-species":181,"./_species-constructor":185,"./_to-absolute-index":195,"./_to-index":196,"./_to-integer":197,"./_to-length":199,"./_to-object":200,"./_to-primitive":201,"./_typed":204,"./_typed-buffer":203,"./_uid":205,"./_wks":210,"./core.get-iterator-method":211,"./es6.array.iterator":222}],203:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":99,"./_array-fill":102,"./_descriptors":120,"./_fails":126,"./_global":130,"./_hide":132,"./_library":149,"./_object-dp":159,"./_object-gopn":163,"./_redefine-all":177,"./_set-to-string-tag":182,"./_to-index":196,"./_to-integer":197,"./_to-length":199,"./_typed":204}],204:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":130,"./_hide":132,"./_uid":205}],205:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],206:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":130}],207:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":141}],208:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":114,"./_global":130,"./_library":149,"./_object-dp":159,"./_wks-ext":209}],209:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":210}],210:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":130,"./_shared":184,"./_uid":205}],211:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":109,"./_core":114,"./_iterators":148,"./_wks":210}],212:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":98,"./_array-copy-within":101,"./_export":124}],213:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":104,"./_export":124,"./_strict-method":186}],214:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":98,"./_array-fill":102,"./_export":124}],215:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":104,"./_export":124,"./_strict-method":186}],216:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":98,"./_array-methods":104,"./_export":124}],217:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":98,"./_array-methods":104,"./_export":124}],218:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":104,"./_export":124,"./_strict-method":186}],219:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":115,"./_ctx":116,"./_export":124,"./_is-array-iter":138,"./_iter-call":143,"./_iter-detect":146,"./_to-length":199,"./_to-object":200,"./core.get-iterator-method":211}],220:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":103,"./_export":124,"./_strict-method":186}],221:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":124,"./_is-array":139}],222:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":98,"./_iter-define":145,"./_iter-step":147,"./_iterators":148,"./_to-iobject":198}],223:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":124,"./_iobject":137,"./_strict-method":186,"./_to-iobject":198}],224:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":124,"./_strict-method":186,"./_to-integer":197,"./_to-iobject":198,"./_to-length":199}],225:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":104,"./_export":124,"./_strict-method":186}],226:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":115,"./_export":124,"./_fails":126}],227:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":105,"./_export":124,"./_strict-method":186}],228:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":105,"./_export":124,"./_strict-method":186}],229:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":110,"./_export":124,"./_fails":126,"./_html":133,"./_to-absolute-index":195,"./_to-length":199}],230:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":104,"./_export":124,"./_strict-method":186}],231:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":96,"./_export":124,"./_fails":126,"./_strict-method":186,"./_to-object":200}],232:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":181}],233:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":124}],234:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":117,"./_export":124}],235:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":124,"./_fails":126,"./_to-object":200,"./_to-primitive":201}],236:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":118,"./_hide":132,"./_wks":210}],237:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":178}],238:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":108,"./_export":124}],239:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":141,"./_object-dp":159,"./_object-gpo":165,"./_wks":210}],240:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":120,"./_object-dp":159}],241:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":113,"./_collection-strong":111,"./_validate-collection":207}],242:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":124,"./_math-log1p":152}],243:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":124}],244:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":124}],245:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":124,"./_math-sign":153}],246:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":124}],247:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":124}],248:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":124,"./_math-expm1":150}],249:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":124,"./_math-fround":151}],250:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":124}],251:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":124,"./_fails":126}],252:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":124}],253:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":124,"./_math-log1p":152}],254:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":124}],255:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":124,"./_math-sign":153}],256:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":124,"./_fails":126,"./_math-expm1":150}],257:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":124,"./_math-expm1":150}],258:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":124}],259:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":110,"./_descriptors":120,"./_fails":126,"./_global":130,"./_has":131,"./_inherit-if-required":135,"./_object-create":158,"./_object-dp":159,"./_object-gopd":161,"./_object-gopn":163,"./_redefine":178,"./_string-trim":192,"./_to-primitive":201}],260:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":124}],261:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":124,"./_global":130}],262:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":124,"./_is-integer":140}],263:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":124}],264:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":124,"./_is-integer":140}],265:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":124}],266:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":124}],267:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":124,"./_parse-float":172}],268:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":124,"./_parse-int":173}],269:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":97,"./_export":124,"./_fails":126,"./_string-repeat":191,"./_to-integer":197}],270:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":97,"./_export":124,"./_fails":126}],271:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":124,"./_object-assign":157}],272:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":124,"./_object-create":158}],273:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":120,"./_export":124,"./_object-dps":160}],274:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":120,"./_export":124,"./_object-dp":159}],275:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":141,"./_meta":154,"./_object-sap":169}],276:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":161,"./_object-sap":169,"./_to-iobject":198}],277:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":162,"./_object-sap":169}],278:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":165,"./_object-sap":169,"./_to-object":200}],279:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":141,"./_object-sap":169}],280:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":141,"./_object-sap":169}],281:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":141,"./_object-sap":169}],282:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":124,"./_same-value":179}],283:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":167,"./_object-sap":169,"./_to-object":200}],284:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":141,"./_meta":154,"./_object-sap":169}],285:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":141,"./_meta":154,"./_object-sap":169}],286:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":124,"./_set-proto":180}],287:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":109,"./_redefine":178,"./_wks":210}],288:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":124,"./_parse-float":172}],289:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":124,"./_parse-int":173}],290:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":96,"./_an-instance":99,"./_classof":109,"./_core":114,"./_ctx":116,"./_export":124,"./_for-of":129,"./_global":130,"./_is-object":141,"./_iter-detect":146,"./_library":149,"./_microtask":155,"./_new-promise-capability":156,"./_perform":174,"./_promise-resolve":175,"./_redefine-all":177,"./_set-species":181,"./_set-to-string-tag":182,"./_species-constructor":185,"./_task":194,"./_user-agent":206,"./_wks":210}],291:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":96,"./_an-object":100,"./_export":124,"./_fails":126,"./_global":130}],292:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":96,"./_an-object":100,"./_bind":108,"./_export":124,"./_fails":126,"./_global":130,"./_is-object":141,"./_object-create":158}],293:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":100,"./_export":124,"./_fails":126,"./_object-dp":159,"./_to-primitive":201}],294:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":100,"./_export":124,"./_object-gopd":161}],295:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":100,"./_export":124,"./_iter-create":144}],296:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":100,"./_export":124,"./_object-gopd":161}],297:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":100,"./_export":124,"./_object-gpo":165}],298:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":100,"./_export":124,"./_has":131,"./_is-object":141,"./_object-gopd":161,"./_object-gpo":165}],299:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":124}],300:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":100,"./_export":124}],301:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":124,"./_own-keys":171}],302:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":100,"./_export":124}],303:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":124,"./_set-proto":180}],304:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":100,"./_export":124,"./_has":131,"./_is-object":141,"./_object-dp":159,"./_object-gopd":161,"./_object-gpo":165,"./_property-desc":176}],305:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":120,"./_fails":126,"./_flags":128,"./_global":130,"./_inherit-if-required":135,"./_is-regexp":142,"./_object-dp":159,"./_object-gopn":163,"./_redefine":178,"./_set-species":181,"./_wks":210}],306:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":120,"./_flags":128,"./_object-dp":159}],307:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

},{"./_fix-re-wks":127}],308:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

},{"./_fix-re-wks":127}],309:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

},{"./_fix-re-wks":127}],310:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = require('./_is-regexp');
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

},{"./_fix-re-wks":127,"./_is-regexp":142}],311:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":100,"./_descriptors":120,"./_fails":126,"./_flags":128,"./_redefine":178,"./es6.regexp.flags":306}],312:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":113,"./_collection-strong":111,"./_validate-collection":207}],313:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":189}],314:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":189}],315:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":189}],316:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":189}],317:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":124,"./_string-at":187}],318:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":124,"./_fails-is-regexp":125,"./_string-context":188,"./_to-length":199}],319:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":189}],320:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":189}],321:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":189}],322:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":124,"./_to-absolute-index":195}],323:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":124,"./_fails-is-regexp":125,"./_string-context":188}],324:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":189}],325:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":145,"./_string-at":187}],326:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":189}],327:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":124,"./_to-iobject":198,"./_to-length":199}],328:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":124,"./_string-repeat":191}],329:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":189}],330:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":124,"./_fails-is-regexp":125,"./_string-context":188,"./_to-length":199}],331:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":189}],332:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":189}],333:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":189}],334:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":192}],335:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":100,"./_descriptors":120,"./_enum-keys":123,"./_export":124,"./_fails":126,"./_global":130,"./_has":131,"./_hide":132,"./_is-array":139,"./_is-object":141,"./_library":149,"./_meta":154,"./_object-create":158,"./_object-dp":159,"./_object-gopd":161,"./_object-gopn":163,"./_object-gopn-ext":162,"./_object-gops":164,"./_object-keys":167,"./_object-pie":168,"./_property-desc":176,"./_redefine":178,"./_set-to-string-tag":182,"./_shared":184,"./_to-iobject":198,"./_to-primitive":201,"./_uid":205,"./_wks":210,"./_wks-define":208,"./_wks-ext":209}],336:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":100,"./_export":124,"./_fails":126,"./_global":130,"./_is-object":141,"./_set-species":181,"./_species-constructor":185,"./_to-absolute-index":195,"./_to-length":199,"./_typed":204,"./_typed-buffer":203}],337:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":124,"./_typed":204,"./_typed-buffer":203}],338:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],339:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],340:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],341:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],342:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],343:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],344:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],345:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":202}],346:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":202}],347:[function(require,module,exports){
'use strict';
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var fails = require('./_fails');
var validate = require('./_validate-collection');
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":104,"./_collection":113,"./_collection-weak":112,"./_fails":126,"./_is-object":141,"./_meta":154,"./_object-assign":157,"./_redefine":178,"./_validate-collection":207}],348:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":113,"./_collection-weak":112,"./_validate-collection":207}],349:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":98,"./_array-includes":103,"./_export":124}],350:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":124,"./_object-to-array":170}],351:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":115,"./_export":124,"./_object-gopd":161,"./_own-keys":171,"./_to-iobject":198}],352:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":124,"./_object-to-array":170}],353:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":114,"./_export":124,"./_global":130,"./_promise-resolve":175,"./_species-constructor":185}],354:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":124,"./_string-pad":190,"./_user-agent":206}],355:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":124,"./_string-pad":190,"./_user-agent":206}],356:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":208}],357:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":130,"./_hide":132,"./_iterators":148,"./_object-keys":167,"./_redefine":178,"./_wks":210,"./es6.array.iterator":222}],358:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":124,"./_task":194}],359:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":124,"./_global":130,"./_user-agent":206}],360:[function(require,module,exports){
require('../modules/web.timers');
require('../modules/web.immediate');
require('../modules/web.dom.iterable');
module.exports = require('../modules/_core');

},{"../modules/_core":114,"../modules/web.dom.iterable":357,"../modules/web.immediate":358,"../modules/web.timers":359}],361:[function(require,module,exports){
'use strict';

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice();
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
        }
    });
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function(key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
        });
    }
    Object.keys(source).forEach(function(key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    if (!sourceAndTargetTypesMatch) {
        return cloneIfNecessary(source, optionsArgument)
    } else if (sourceIsArray) {
        var arrayMerge = options.arrayMerge || defaultArrayMerge;
        return arrayMerge(target, source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;

},{}],362:[function(require,module,exports){
/**
 * lodash 4.0.3 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @type {Function}
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => logs the number of milliseconds it took for the deferred function to be invoked
 */
var now = Date.now;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide an options object to indicate whether `func` should be invoked on
 * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent calls
 * to the debounced function return the result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
 * on the trailing edge of the timeout only if the debounced function is
 * invoked more than once during the `wait` timeout.
 *
 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.leading=false] Specify invoking on the leading
 *  edge of the timeout.
 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
 *  delayed before it's invoked.
 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
 *  edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var args,
      maxTimeoutId,
      result,
      stamp,
      thisArg,
      timeoutId,
      trailingCall,
      lastCalled = 0,
      leading = false,
      maxWait = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function cancel() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    if (maxTimeoutId) {
      clearTimeout(maxTimeoutId);
    }
    lastCalled = 0;
    args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
  }

  function complete(isCalled, id) {
    if (id) {
      clearTimeout(id);
    }
    maxTimeoutId = timeoutId = trailingCall = undefined;
    if (isCalled) {
      lastCalled = now();
      result = func.apply(thisArg, args);
      if (!timeoutId && !maxTimeoutId) {
        args = thisArg = undefined;
      }
    }
  }

  function delayed() {
    var remaining = wait - (now() - stamp);
    if (remaining <= 0 || remaining > wait) {
      complete(trailingCall, maxTimeoutId);
    } else {
      timeoutId = setTimeout(delayed, remaining);
    }
  }

  function flush() {
    if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
      result = func.apply(thisArg, args);
    }
    cancel();
    return result;
  }

  function maxDelayed() {
    complete(trailing, timeoutId);
  }

  function debounced() {
    args = arguments;
    stamp = now();
    thisArg = this;
    trailingCall = trailing && (timeoutId || !leading);

    if (maxWait === false) {
      var leadingCall = leading && !timeoutId;
    } else {
      if (!lastCalled && !maxTimeoutId && !leading) {
        lastCalled = stamp;
      }
      var remaining = maxWait - (stamp - lastCalled);

      var isCalled = (remaining <= 0 || remaining > maxWait) &&
        (leading || maxTimeoutId);

      if (isCalled) {
        if (maxTimeoutId) {
          maxTimeoutId = clearTimeout(maxTimeoutId);
        }
        lastCalled = stamp;
        result = func.apply(thisArg, args);
      }
      else if (!maxTimeoutId) {
        maxTimeoutId = setTimeout(maxDelayed, remaining);
      }
    }
    if (isCalled && timeoutId) {
      timeoutId = clearTimeout(timeoutId);
    }
    else if (!timeoutId && wait !== maxWait) {
      timeoutId = setTimeout(delayed, wait);
    }
    if (leadingCall) {
      isCalled = true;
      result = func.apply(thisArg, args);
    }
    if (isCalled && !timeoutId && !maxTimeoutId) {
      args = thisArg = undefined;
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8 which returns 'object' for typed array constructors, and
  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3);
 * // => 3
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3');
 * // => 3
 */
function toNumber(value) {
  if (isObject(value)) {
    var other = isFunction(value.valueOf) ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = debounce;

},{}],363:[function(require,module,exports){
/**
 * lodash 4.1.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
var keys = require('lodash.keys');

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

/**
 * Creates an array of the own enumerable property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object ? baseValues(object, keys(object)) : [];
}

module.exports = values;

},{"lodash.keys":364}],364:[function(require,module,exports){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{}],365:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],366:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],367:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          )

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":371,"_process":366}],368:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":371}],369:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":367,"./lib/ReactPropTypesSecret":371,"_process":366,"object-assign":365}],370:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

}).call(this,require('_process'))
},{"./factoryWithThrowingShims":368,"./factoryWithTypeCheckers":369,"_process":366}],371:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],372:[function(require,module,exports){
(function (process){
/** @license React v16.5.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var _assign = require('object-assign');
var checkPropTypes = require('prop-types/checkPropTypes');
var schedule = require('schedule');
var tracing = require('schedule/tracing');

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function () {};

{
  validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error = void 0;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.

!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);
  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // untintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!

  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
      var evt = document.createEvent('Event');

      // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.
      var didError = true;

      // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.
      var windowEvent = window.event;

      // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false);

        // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.
        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      }

      // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.
      var error = void 0;
      // Use this to track whether the error event is ever called.
      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;
        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }
        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {
              // Ignore.
            }
          }
        }
      }

      // Create a fake event type.
      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

      // Attach our event handlers
      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false);

      // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }
        this.onError(error);
      }

      // Remove our event listeners
      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

// Used by Fiber to simulate a try-catch.
var hasError = false;
var caughtError = null;

// Used by event system to capture/rethrow the first error.
var hasRethrowError = false;
var rethrowError = null;

var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */
function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);
  if (hasError) {
    var error = clearCaughtError();
    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */
function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}

function hasCaughtError() {
  return hasError;
}

function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
  }
}

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
    if (plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
  eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */

/**
 * Ordered list of injected plugins.
 */
var plugins = [];

/**
 * Mapping from event name to dispatch config
 */
var eventNameDispatchConfigs = {};

/**
 * Mapping from registration name to plugin module
 */
var registrationNameModules = {};

/**
 * Mapping from registration name to event name
 */
var registrationNameDependencies = {};

/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */
var possibleRegistrationNames = {};
// Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */
function injectEventPluginOrder(injectedEventPluginOrder) {
  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
  // Clone the ordering so it cannot be dynamically mutated.
  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}

/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */
function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;
  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }
    var pluginModule = injectedNamesToPlugins[pluginName];
    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }
  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }
    if (condition) {
      return;
    }
    if (typeof console !== 'undefined') {
      var _args$map = args.map(function (item) {
        return '' + item;
      }),
          a = _args$map[0],
          b = _args$map[1],
          c = _args$map[2],
          d = _args$map[3],
          e = _args$map[4],
          f = _args$map[5],
          g = _args$map[6],
          h = _args$map[7];

      var message = 'Warning: ' + format;

      // We intentionally don't use spread (or .apply) because it breaks IE9:
      // https://github.com/facebook/react/issues/13610
      switch (args.length) {
        case 0:
          console.error(message);
          break;
        case 1:
          console.error(message, a);
          break;
        case 2:
          console.error(message, a, b);
          break;
        case 3:
          console.error(message, a, b, c);
          break;
        case 4:
          console.error(message, a, b, c, d);
          break;
        case 5:
          console.error(message, a, b, c, d, e);
          break;
        case 6:
          console.error(message, a, b, c, d, e, f);
          break;
        case 7:
          console.error(message, a, b, c, d, e, f, g);
          break;
        case 8:
          console.error(message, a, b, c, d, e, f, g, h);
          break;
        default:
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
      }
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var _message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(_message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;

function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;
  {
    !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
  }
}

var validateEventDispatches = void 0;
{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */

/**
 * Methods for injecting dependencies.
 */
var injection = {
  /**
   * @param {array} InjectedEventPluginOrder
   * @public
   */
  injectEventPluginOrder: injectEventPluginOrder,

  /**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */
  injectEventPluginsByName: injectEventPluginsByName
};

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */
function getListener(inst, registrationName) {
  var listener = void 0;

  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon
  var stateNode = inst.stateNode;
  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }
  var props = getFiberCurrentPropsFromNode(stateNode);
  if (!props) {
    // Work in progress.
    return null;
  }
  listener = props[registrationName];
  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }
  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
  return listener;
}

/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */
function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = null;
  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];
    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }
  return events;
}

function runEventsInBatch(events, simulated) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  }

  // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.
  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  if (simulated) {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
  } else {
    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
  }
  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
  // This would be a good time to rethrow if any of the event handlers threw.
  rethrowCaughtError();
}

function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
  runEventsInBatch(events, false);
}

var FunctionalComponent = 0;
var FunctionalComponentLazy = 1;
var ClassComponent = 2;
var ClassComponentLazy = 3;
var IndeterminateComponent = 4; // Before we know whether it is functional or class
var HostRoot = 5; // Root of a host tree. Could be nested inside another node.
var HostPortal = 6; // A subtree. Could be an entry point to a different renderer.
var HostComponent = 7;
var HostText = 8;
var Fragment = 9;
var Mode = 10;
var ContextConsumer = 11;
var ContextProvider = 12;
var ForwardRef = 13;
var ForwardRefLazy = 14;
var Profiler = 15;
var PlaceholderComponent = 16;

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  while (!node[internalInstanceKey]) {
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var inst = node[internalInstanceKey];
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber, this will always be the deepest root.
    return inst;
  }

  return null;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey];
  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      return inst;
    } else {
      return null;
    }
  }
  return null;
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  }

  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(false, 'getNodeFromInstance: Invalid argument.');
}

function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}

function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return;
    // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);
  if (inst) {
    return inst;
  }
  return null;
}

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }
    instA = getParent(instA);
    instB = getParent(instB);
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */


/**
 * Return the parent instance of the passed-in instance.
 */


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }
  var i = void 0;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (true) {
    if (!from) {
      break;
    }
    if (from === common) {
      break;
    }
    var alternate = from.alternate;
    if (alternate !== null && alternate === common) {
      break;
    }
    pathFrom.push(from);
    from = getParent(from);
  }
  var pathTo = [];
  while (true) {
    if (!to) {
      break;
    }
    if (to === common) {
      break;
    }
    var _alternate = to.alternate;
    if (_alternate !== null && _alternate === common) {
      break;
    }
    pathTo.push(to);
    to = getParent(to);
  }
  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  {
    !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}



function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)

function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}

function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */
var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');


var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel');

// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

var root = null;
var startText = null;
var fallbackText = null;

function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}

function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}

function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start = void 0;
  var startValue = startText;
  var startLength = startValue.length;
  var end = void 0;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;
  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}

function getText() {
  if ('value' in root) {
    return root.value;
  }
  return root.textContent;
}

/* eslint valid-typeof: 0 */

var EVENT_POOL_SIZE = 10;

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }
  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = functionThatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }
    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;
    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 */
SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }
  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);

  return Class;
};

addEventPoolingTo(SyntheticEvent);

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;
  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }
  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;
  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
  event.destructor();
  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;
    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;
    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
}

// Track the current IME composition status, if any.
var isComposing = false;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType = void 0;
  var fallbackData = void 0;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);
    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }
      return null;
    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars = void 0;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

// Use to restore controlled state after a change event has fired.

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);
  if (!internalInstance) {
    // Unmounted
    return;
  }
  !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
  restoreImpl(internalInstance.stateNode, internalInstance.type, props);
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}

function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}

function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}

function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }
  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;

  restoreStateOfTarget(target);
  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.

// Defaults
var _batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};
var _interactiveUpdatesImpl = function (fn, a, b) {
  return fn(a, b);
};
var _flushInteractiveUpdatesImpl = function () {};

var isBatching = false;
function batchedUpdates(fn, bookkeeping) {
  if (isBatching) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }
  isBatching = true;
  try {
    return _batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    isBatching = false;
    var controlledComponentsHavePendingUpdates = needsStateRestore();
    if (controlledComponentsHavePendingUpdates) {
      // If a controlled event was fired, we may need to restore the state of
      // the DOM node back to the controlled value. This is necessary when React
      // bails out of the update without touching the DOM.
      _flushInteractiveUpdatesImpl();
      restoreStateIfNeeded();
    }
  }
}

function interactiveUpdates(fn, a, b) {
  return _interactiveUpdatesImpl(fn, a, b);
}



function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
  _batchedUpdatesImpl = batchedUpdatesImpl;
  _interactiveUpdatesImpl = interactiveUpdatesImpl;
  _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * HTML nodeType values that represent the type of the node
 */

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';
  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

  var currentValue = '' + node[valueField];

  // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)
  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }
  var get = descriptor.get,
      set = descriptor.set;

  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  });
  // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768
  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });

  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  }

  // TODO: Once it's just Fiber we can move this to node._wrapperState
  node._valueTracker = trackValueOnNode(node);
}

function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node);
  // if there is no tracker at this point it's unlikely
  // that trying again will succeed
  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);
  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }
  return false;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';
  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
          var pathBeforeSlash = match[1];
          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }
    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }
  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function getResultFromResolvedThenable(thenable) {
  return thenable._reactResult;
}

function refineResolvedThenable(thenable) {
  return thenable._reactStatus === Resolved ? thenable._reactResult : null;
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }
  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }
  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';
    case REACT_PORTAL_TYPE:
      return 'Portal';
    case REACT_PROFILER_TYPE:
      return 'Profiler';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_PLACEHOLDER_TYPE:
      return 'Placeholder';
  }
  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_FORWARD_REF_TYPE:
        var renderFn = type.render;
        var functionName = renderFn.displayName || renderFn.name || '';
        return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    }
    if (typeof type.then === 'function') {
      var thenable = type;
      var resolvedThenable = refineResolvedThenable(thenable);
      if (resolvedThenable) {
        return getComponentName(resolvedThenable);
      }
    }
  }
  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case FunctionalComponentLazy:
    case ClassComponent:
    case ClassComponentLazy:
    case HostComponent:
    case Mode:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName(owner.type);
      }
      return describeComponentFrame(name, source, ownerName);
    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);
  return info;
}

var current = null;
var phase = null;

function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }
    var owner = current._debugOwner;
    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }
  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    }
    // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.
    return getStackByFiberInDevAndProd(current);
  }
  return '';
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    phase = null;
  }
}

function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    phase = null;
  }
}

function setCurrentPhase(lifeCyclePhase) {
  {
    phase = lifeCyclePhase;
  }
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0;

// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING = 1;

// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING = 2;

// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN = 3;

// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN = 4;

// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC = 5;

// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */
var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';


var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }
  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  {
    warning$1(false, 'Invalid attribute name: `%s`', attributeName);
  }
  return false;
}

function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }
  return false;
}

function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }
  switch (typeof value) {
    case 'function':
    // $FlowIssue symbol is perfectly valid here
    case 'symbol':
      // eslint-disable-line
      return true;
    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }
    default:
      return false;
  }
}

function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }
  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }
  if (isCustomComponentTag) {
    return false;
  }
  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;
      case OVERLOADED_BOOLEAN:
        return value === false;
      case NUMERIC:
        return isNaN(value);
      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }
  return false;
}

function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
}

// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties = {};

// These props are reserved by React. They shouldn't be written to the DOM.
['children', 'dangerouslySetInnerHTML',
// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];

  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML boolean attributes.
['allowFullScreen', 'async',
// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',
// Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',
// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture', 'download'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be positive numbers.
['cols', 'rows', 'size', 'span'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null);
} // attributeNamespace
);

// These are HTML attributes that must be numbers.
['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null);
} // attributeNamespace
);

var CAMELIZE = /[\-\:]([a-z])/g;
var capitalize = function (token) {
  return token[1].toUpperCase();
};

// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null);
} // attributeNamespace
);

// String SVG attributes with the xlink namespace.
['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink');
});

// String SVG attributes with the xml namespace.
['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace');
});

// Special case: this attribute exists both in HTML and SVG.
// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
// its React `tabIndex` name, like we do for attributes that exist only in HTML.
properties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty
'tabindex', // attributeName
null);

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;

      return node[propertyName];
    } else {
      var attributeName = propertyInfo.attributeName;

      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);
          if (value === '') {
            return true;
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }
          if (value === '' + expected) {
            return expected;
          }
          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }
        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        }
        // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.
        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */
function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }
    var value = node.getAttribute(name);
    if (value === '' + expected) {
      return expected;
    }
    return value;
  }
}

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */
function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);
  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }
  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  }
  // If the prop isn't in the special list, treat it as a simple attribute.
  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;
      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName, '' + value);
      }
    }
    return;
  }
  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;

      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }
    return;
  }
  // The rest are treated as attributes with special cases.
  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;

    var attributeValue = void 0;
    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      attributeValue = '' + value;
    }
    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}

function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;
    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var ReactDebugCurrentFrame$1 = null;

var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };

  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
        return null;
      }
      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };

  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */
  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
  };
}

// Exports ReactDOM.createRoot
var enableUserTimingAPI = true;

// Experimental error-boundary API that can recover from errors within a single
// render phase
var enableGetDerivedStateFromCatch = false;
// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects = false;

// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode = true;

// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback = true;

// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles = false;

// Warn about legacy context API
var warnAboutLegacyContextAPI = false;

// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer = true;

// Trace which interactions trigger each commit.
var enableSchedulerTracing = true;

// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing = false;

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}

function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnCheckedDefaultChecked = true;
    }
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;

  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}

function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;
  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}

function updateWrapper(element, props) {
  var node = element;
  {
    var _controlled = isControlled(props);

    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
      warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnUncontrolledToControlled = true;
    }
    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
      warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);

  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' ||
      // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the value attribute, React only assigns a new value
    // whenever the defaultValue React prop has changed. When not present,
    // React does nothing
    if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  } else {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the attribute is directly
    // controllable from the defaultValue React property. It needs to be
    // updated as new props come in.
    if (props.defaultChecked == null) {
      node.removeAttribute('checked');
    } else {
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}

function postMountWrapper(element, props, isHydrating) {
  var node = element;

  // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.
  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset';

    // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872
    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var _initialValue = toString(node._wrapperState.initialValue);

    // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.
    if (!isHydrating) {
      if (disableInputAttributeSyncing) {
        var value = getToStringValue(props.value);

        // When not syncing the value attribute, the value property points
        // directly to the React prop. Only assign it if it exists.
        if (value != null) {
          // Always assign on buttons so that it is possible to assign an
          // empty string to clear button text.
          //
          // Otherwise, do not re-assign the value property if is empty. This
          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
          // prematurely marking required inputs as invalid. Equality is compared
          // to the current value in case the browser provided value is not an
          // empty string.
          if (isButton || value !== node.value) {
            node.value = toString(value);
          }
        }
      } else {
        // When syncing the value attribute, the value property should use
        // the the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (_initialValue !== node.value) {
          node.value = _initialValue;
        }
      }
    }

    if (disableInputAttributeSyncing) {
      // When not syncing the value attribute, assign the value attribute
      // directly from the defaultValue React property (when present)
      var defaultValue = getToStringValue(props.defaultValue);
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    } else {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = _initialValue;
    }
  }

  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.
  var name = node.name;
  if (name !== '') {
    node.name = '';
  }

  if (disableInputAttributeSyncing) {
    // When not syncing the checked attribute, the checked property
    // never gets assigned. It must be manually set. We don't want
    // to do this when hydrating so that existing user input isn't
    // modified
    if (!isHydrating) {
      updateChecked(element, props);
    }

    // Only assign the checked attribute if it is defined. This saves
    // a DOM write when controlling the checked attribute isn't needed
    // (text inputs, submit/reset)
    if (props.hasOwnProperty('defaultChecked')) {
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!props.defaultChecked;
    }
  } else {
    // When syncing the checked attribute, both the the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}

function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

      // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set
      updateValueIfChanged(otherNode);

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      updateWrapper(otherNode, otherProps);
    }
  }
}

// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node, type, value) {
  if (
  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change';
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event, false);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);
  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  if (!disableInputAttributeSyncing) {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes$1,

  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    var getTargetInstFunc = void 0,
        handleEventFunc = void 0;
    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0;
// Use flags to signal movementX/Y has already been set
var isMovementXSet = false;
var isMovementYSet = false;

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */
var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win = void 0;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from = void 0;
    var to = void 0;
    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface = void 0,
        leaveEventType = void 0,
        enterEventType = void 0,
        eventTypePrefix = void 0;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);

    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

/*eslint-disable no-self-compare */

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */


function get(key) {
  return key._reactInternalFiber;
}

function has(key) {
  return key._reactInternalFiber !== undefined;
}

function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect = /*              */0;
var PerformedWork = /*         */1;

// You can change the rest (and add more).
var Placement = /*             */2;
var Update = /*                */4;
var PlacementAndUpdate = /*    */6;
var Deletion = /*              */8;
var ContentReset = /*          */16;
var Callback = /*              */32;
var DidCapture = /*            */64;
var Ref = /*                   */128;
var Snapshot = /*              */256;

// Update & Callback & Ref & Snapshot
var LifecycleEffectMask = /*   */420;

// Union of all host effects
var HostEffectMask = /*        */511;

var Incomplete = /*            */512;
var ShouldCapture = /*         */1024;

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;

var MOUNTING = 1;
var MOUNTED = 2;
var UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
  var node = fiber;
  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    if ((node.effectTag & Placement) !== NoEffect) {
      return MOUNTING;
    }
    while (node.return) {
      node = node.return;
      if ((node.effectTag & Placement) !== NoEffect) {
        return MOUNTING;
      }
    }
  } else {
    while (node.return) {
      node = node.return;
    }
  }
  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return MOUNTED;
  }
  // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.
  return UNMOUNTED;
}

function isFiberMounted(fiber) {
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function isMounted(component) {
  {
    var owner = ReactCurrentOwner$1.current;
    if (owner !== null && (owner.tag === ClassComponent || owner.tag === ClassComponentLazy)) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;
      !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);
  if (!fiber) {
    return false;
  }
  return isFiberMountedImpl(fiber) === MOUNTED;
}

function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var state = isFiberMountedImpl(fiber);
    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    if (state === MOUNTING) {
      return null;
    }
    return fiber;
  }
  // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.
  var a = fiber;
  var b = alternate;
  while (true) {
    var parentA = a.return;
    var parentB = parentA ? parentA.alternate : null;
    if (!parentA || !parentB) {
      // We're at the root.
      break;
    }

    // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.
    if (parentA.child === parentB.child) {
      var child = parentA.child;
      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }
        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }
        child = child.sibling;
      }
      // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.
      invariant(false, 'Unable to find node on an unmounted component.');
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;
      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        _child = _child.sibling;
      }
      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;
        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          _child = _child.sibling;
        }
        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
      }
    }

    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  }
  // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.
  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  }
  // Otherwise B has to be current branch.
  return alternate;
}

function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);
  if (!currentParent) {
    return null;
  }

  // Next we'll drill down this component to find the first HostComponent/Text.
  var node = currentParent;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === currentParent) {
      return null;
    }
    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable
  return null;
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}

function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode = void 0;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.
  if (charCode === 10) {
    charCode = 13;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },

  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];

var eventTypes$4 = {};
var topLevelEventsToDispatchConfig = {};

function addEventTypeNameToConfig(_ref, isInteractive) {
  var topEvent = _ref[0],
      event = _ref[1];

  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent],
    isInteractive: isInteractive
  };
  eventTypes$4[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
}

interactiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, true);
});
nonInteractiveEventTypeNames.forEach(function (eventTuple) {
  addEventTypeNameToConfig(eventTuple, false);
});

// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];

var SimpleEventPlugin = {
  eventTypes: eventTypes$4,

  isInteractiveTopLevelEventType: function (topLevelType) {
    var config = topLevelEventsToDispatchConfig[topLevelType];
    return config !== undefined && config.isInteractive === true;
  },


  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor = void 0;
    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;
      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP:
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;
      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;
      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;
      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;
      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;
      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;
      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;
      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;
      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;
      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        }
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
    }
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;


var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findRootContainerNode(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst.return) {
    inst = inst.return;
  }
  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }
  return inst.stateNode.containerInfo;
}

// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }
  return {
    topLevelType: topLevelType,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;
  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    if (!ancestor) {
      bookKeeping.ancestors.push(ancestor);
      break;
    }
    var root = findRootContainerNode(ancestor);
    if (!root) {
      break;
    }
    bookKeeping.ancestors.push(ancestor);
    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// TODO: can we stop exporting these?
var _enabled = true;

function setEnabled(enabled) {
  _enabled = !!enabled;
}

function isEnabled() {
  return _enabled;
}

/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapBubbledEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventBubbleListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */
function trapCapturedEvent(topLevelType, element) {
  if (!element) {
    return null;
  }
  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;

  addEventCaptureListener(element, getRawEventName(topLevelType),
  // Check if interactive and wrap in interactiveUpdates
  dispatch.bind(null, topLevelType));
}

function dispatchInteractiveEvent(topLevelType, nativeEvent) {
  interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
}

function dispatchEvent(topLevelType, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
    // If we get an event (ex: img onload) before committing that
    // component's mount, ignore it for now (that is, treat it as if it was an
    // event on a non-React tree). We might also consider queueing events and
    // dispatching them after the mount.
    targetInst = null;
  }

  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var reactTopListenersCounter = 0;

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */
function listenTo(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      switch (dependency) {
        case TOP_SCROLL:
          trapCapturedEvent(TOP_SCROLL, mountAt);
          break;
        case TOP_FOCUS:
        case TOP_BLUR:
          trapCapturedEvent(TOP_FOCUS, mountAt);
          trapCapturedEvent(TOP_BLUR, mountAt);
          // We set the flag for a single dependency later in this function,
          // but this ensures we mark both as attached rather than just one.
          isListening[TOP_BLUR] = true;
          isListening[TOP_FOCUS] = true;
          break;
        case TOP_CANCEL:
        case TOP_CLOSE:
          if (isEventSupported(getRawEventName(dependency))) {
            trapCapturedEvent(dependency, mountAt);
          }
          break;
        case TOP_INVALID:
        case TOP_SUBMIT:
        case TOP_RESET:
          // We listen to them on the target DOM elements.
          // Some of them bubble so we don't want them to fire twice.
          break;
        default:
          // By default, listen on the top level to all non-media events.
          // Media events don't bubble so adding the listener wouldn't do anything.
          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;
          if (!isMediaEvent) {
            trapBubbledEvent(dependency, mountAt);
          }
          break;
      }
      isListening[dependency] = true;
    }
  }
}

function isListeningToAllDependencies(registrationName, mountAt) {
  var isListening = getListeningForDocument(mountAt);
  var dependencies = registrationNameDependencies[registrationName];
  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
      return false;
    }
  }
  return true;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */
function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;

  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset;

  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */
function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }
      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      }
      // Moving from `node` to its first child `next`.
      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }
      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }
      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }
      if ((next = node.nextSibling) !== null) {
        break;
      }
      node = parentNode;
      parentNode = node.parentNode;
    }

    // Moving from `node` to its next sibling `next`.
    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window;
  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }
    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();
  while (element instanceof win.HTMLIFrameElement) {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute
    try {
      win = element.contentDocument.defaultView;
    } catch (e) {
      return element;
    }
    element = getActiveElement(win.document);
  }
  return element;
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}

function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
  };
}

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */
function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;
  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    }

    // Focusing a node can change the scroll position, which is undesirable
    var ancestors = [];
    var ancestor = priorFocusedElem;
    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */
function getSelection$1(input) {
  var selection = void 0;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || { start: 0, end: 0 };
}

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */
function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}

/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */
function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement$1);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;

    accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes$3,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var doc = getEventTargetDocument(nativeEventTarget);
    // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.
    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }
        break;
      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;
      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */
injection.injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);

/**
 * Some important event plugins included by default (without having to require
 * them).
 */
injection.injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    content += child;
    // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }
        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }
        if (typeof child.type !== 'string') {
          return;
        }
        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;
          warning$1(false, 'Only strings and numbers are supported as <option> children.');
        }
      });
    }

    // TODO: Remove support for `selected` in <option>.
    if (props.selected != null && !didWarnSelectedSetOnOption) {
      warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
      didWarnSelectedSetOnOption = true;
    }
  }
}

function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}

function getHostProps$1(element, props) {
  var hostProps = _assign({ children: undefined }, props);
  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1 = void 0;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();
  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 */
function checkSelectPropTypes(props) {
  ReactControlledValuePropTypes.checkPropTypes('select', props);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
    } else if (!props.multiple && isArray) {
      warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};
    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }
    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }
      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));
    var defaultSelected = null;
    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;
        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }
        return;
      }
      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }
    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}

function initWrapperState$1(element, props) {
  var node = element;
  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
      didWarnValueDefaultValue$1 = true;
    }
  }
}

function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}

function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;

  var value = props.value;
  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}

function restoreControlledState$2(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

function getHostProps$3(element, props) {
  var node = element;
  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

  // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.
  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}

function initWrapperState$2(element, props) {
  var node = element;
  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value;

  // Only bother fetching default value if we're going to use it
  if (initialValue == null) {
    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      {
        warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }
      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
        children = children[0];
      }

      defaultValue = children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}

function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);
  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value);
    // To avoid side effects (such as losing text selection), only set value if changed
    if (newValue !== node.value) {
      node.value = newValue;
    }
    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }
  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}

function postMountWrapper$3(element, props) {
  var node = element;
  // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.
  var textContent = node.textContent;

  // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
  if (textContent === node._wrapperState.initialValue) {
    node.value = textContent;
  }
}

function restoreControlledState$3(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

var Namespaces = {
  html: HTML_NAMESPACE$1,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
};

// Assumes there is no parent namespace.
function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;
    case 'math':
      return MATH_NAMESPACE;
    default:
      return HTML_NAMESPACE$1;
  }
}

function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }
  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE$1;
  }
  // By default, pass namespace below.
  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer = void 0;

/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node

  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */
function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported style property %s. Did you mean %s?', name,
    // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;
    warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */
function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + hyphenateStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

        delimiter = ';';
      }
    }
    return serialized || null;
  }
}

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */
function setValueForStyles(node, styles) {
  var style = node.style;
  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var isCustomProperty = styleName.indexOf('--') === 0;
    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }
    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1 = '__html';

var ReactDebugCurrentFrame$2 = null;
{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
  }
  {
    !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }
  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;
    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',

  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0, // state
  'aria-details': 0,
  'aria-disabled': 0, // state
  'aria-hidden': 0, // state
  'aria-invalid': 0, // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
    return true;
  }

  if (rARIACamel.test(name)) {
    var ariaName = 'aria-' + name.slice(4).toLowerCase();
    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (correctName == null) {
      warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
      warnedProperties[name] = true;
      return true;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== correctName) {
      warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
      warnedProperties[name] = true;
      return true;
    }
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  var invalidProps = [];

  for (var key in props) {
    var isValid = validateProperty(type, key);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  } else if (invalidProps.length > 1) {
    warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;

function validateProperties$1(type, props) {
  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
    return;
  }

  if (props != null && props.value === null && !didWarnValueNull) {
    didWarnValueNull = true;
    if (type === 'select' && props.multiple) {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
    } else {
      warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();
    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
      warnedProperties$1[name] = true;
      return true;
    }

    // We can't rely on the event system being injected on the server.
    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }
      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
      if (registrationName != null) {
        warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
        warnedProperties$1[name] = true;
        return true;
      }
      if (EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Let the ARIA attribute hook validate ARIA attributes
    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

    // Known attributes should match the casing specified in the property config.
    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];
      if (standardName !== name) {
        warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }
      warnedProperties$1[name] = true;
      return true;
    }

    // Now that we've validated casing, do not validate
    // data types for reserved props
    if (isReserved) {
      return true;
    }

    // Warn when a known attribute is a bad type
    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    }

    // Warn when passing the strings 'false' or 'true' into a boolean prop
    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  var unknownProps = [];
  for (var key in props) {
    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');
  if (unknownProps.length === 1) {
    warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  } else if (unknownProps.length > 1) {
    warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }
  warnUnknownProperties(type, props, canUseEventSystem);
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration = false;
var didWarnShadyDOM = false;

var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML = '__html';

var HTML_NAMESPACE = Namespaces.html;


var warnedUnknownTags = void 0;
var suppressHydrationWarning = void 0;

var validatePropertiesInDevelopment = void 0;
var warnForTextDifference = void 0;
var warnForPropDifference = void 0;
var warnForExtraAttributes = void 0;
var warnForInvalidEventListener = void 0;
var canDiffStyleForHydrationWarning = void 0;

var normalizeMarkupForTextOrAttribute = void 0;
var normalizeHTML = void 0;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, /* canUseEventSystem */true);
  };

  // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807
  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

  // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.
  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
    if (normalizedServerText === normalizedClientText) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }
    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
    if (normalizedServerValue === normalizedClientValue) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });
    warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  };

  // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.
  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  listenTo(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = nextProps[propKey];
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      // Relies on `updateStylesByID` not mutating `styleUpdates`.
      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // We polyfill it separately on the client during commit.
      // We could have excluded it in the property list instead of
      // adding a special case here, but then it wouldn't be emitted
      // on server rendering (but we *do* want to emit it in SSR).
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];
    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag = void 0;

  // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.
  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement = void 0;
  var namespaceURI = parentNamespace;
  if (namespaceURI === HTML_NAMESPACE) {
    namespaceURI = getIntrinsicNamespace(type);
  }
  if (namespaceURI === HTML_NAMESPACE) {
    {
      isCustomComponentTag = isCustomComponent(type, props);
      // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.
      !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');
      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.
      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, { is: props.is });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type);
      // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
      // attribute on `select`s needs to be added before `option`s are inserted. This prevents
      // a bug where the `select` does not scroll to the correct option because singular
      // `select` elements automatically pick the first item.
      // See https://github.com/facebook/react/issues/13222
      if (type === 'select' && props.multiple) {
        var node = domElement;
        node.multiple = true;
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;
        warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}

function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}

function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);
  {
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  var props = void 0;
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      props = rawProps;
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    default:
      props = rawProps;
  }

  assertValidProps(tag, props);

  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;
    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;
    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }
}

// Calculate the diff between the two objects.
function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;

  var lastProps = void 0;
  var nextProps = void 0;
  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;
    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;
    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;
      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  assertValidProps(tag, nextProps);

  var propKey = void 0;
  var styleName = void 0;
  var styleUpdates = null;
  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }
    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];
      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }
          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
      // Noop. This is handled by the clear text mechanism.
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (propKey === AUTOFOCUS) {
      // Noop. It doesn't work on updates anyway.
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }
  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }
    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }
      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = '';
          }
        }
        // Update styles that changed since `lastProp`.
        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }
            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }
          updatePayload.push(propKey, styleUpdates);
        }
        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML] : undefined;
      var lastHtml = lastProp ? lastProp[HTML] : undefined;
      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
        }
      } else {
        // TODO: It might be too late to clear this if we have children
        // inserted already.
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
      // Noop
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }
  if (styleUpdates) {
    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }
  return updatePayload;
}

// Apply the diff.
function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
  // Apply the diff.
  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

  // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.
  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;
    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;
    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();
    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }
    return possibleStandardNames[lowerCasedName] || null;
  }
  return null;
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag = void 0;
  var extraAttributeNames = void 0;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
      warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
      didWarnShadyDOM = true;
    }
  }

  // TODO: Make sure that we check isMounted before firing any of these events.
  switch (tag) {
    case 'iframe':
    case 'object':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }
      break;
    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;
    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;
    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;
    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;
    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'option':
      validateProps(domElement, rawProps);
      break;
    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement);
      // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.
      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;
    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();
      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        case 'value':
          break;
        case 'checked':
          break;
        case 'selected':
          break;
        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;
  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }
    var nextProp = rawProps[propKey];
    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if (true && !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }
          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if (true && typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }
        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (true &&
    // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);
      if (suppressHydrationWarning) {
        // Don't bother comparing. We're ignoring all these warnings.
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
      // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
        // Noop
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');
        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');
          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;
        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;
          if (ownNamespace === HTML_NAMESPACE) {
            ownNamespace = getIntrinsicNamespace(tag);
          }
          if (ownNamespace === HTML_NAMESPACE) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);
            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true;
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(standardName);
            }
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);
          }
          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;
    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement, rawProps);
      break;
    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;
    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }
      break;
  }

  return updatePayload;
}

function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}

function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}

function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}

function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}

function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }
    if (didWarnInvalidHydration) {
      return;
    }
    didWarnInvalidHydration = true;
    warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}

function restoreControlledState$1(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;
    case 'textarea':
      restoreControlledState$3(domElement, props);
      return;
    case 'select':
      restoreControlledState$2(domElement, props);
      return;
  }
}

// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting = function () {};
var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;
    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();

    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
    if (didWarn[warnKey]) {
      return;
    }
    didWarn[warnKey] = true;

    var tagDisplayName = childTag;
    var whitespaceInfo = '';
    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';
      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
      }
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
    } else {
      warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
    }
  };
}

// Renderers that don't support persistence
// can re-export everything from this module.

function shim() {
  invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
}

// Persistence (when unsupported)
var supportsPersistence = false;
var cloneInstance = shim;
var createContainerChildSet = shim;
var appendChildToContainerChildSet = shim;
var finalizeContainerChildren = shim;
var replaceContainerChildren = shim;

var SUPPRESS_HYDRATION_WARNING = void 0;
{
  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
}

var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }
  return false;
}

function getRootHostContext(rootContainerInstance) {
  var type = void 0;
  var namespace = void 0;
  var nodeType = rootContainerInstance.nodeType;
  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }
    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }
  {
    var validatedTag = type.toLowerCase();
    var _ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return { namespace: namespace, ancestorInfo: _ancestorInfo };
  }
  return namespace;
}

function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
  }
  var parentNamespace = parentHostContext;
  return getChildNamespace(parentNamespace, type);
}

function getPublicInstance(instance) {
  return instance;
}

function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}

function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  selectionInformation = null;
  setEnabled(eventsEnabled);
  eventsEnabled = null;
}

function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace = void 0;
  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);
    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
    parentNamespace = hostContextDev.namespace;
  }
  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}

function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}

function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;
    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }
  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}

function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}

function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}

function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }
  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}

var isPrimaryRenderer = true;
var scheduleTimeout = setTimeout;
var cancelTimeout = clearTimeout;
var noTimeout = -1;

// -------------------
//     Mutation
// -------------------

var supportsMutation = true;

function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}

function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps);
  // Apply the diff to the DOM node.
  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}

function resetTextContent(domElement) {
  setTextContent(domElement, '');
}

function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}

function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}

function appendChildToContainer(container, child) {
  var parentNode = void 0;
  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  }
  // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that containers have inline onclick defined.
  // https://github.com/facebook/react/issues/11918
  if (parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}

function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}

function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}

function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

// -------------------
//     Hydration
// -------------------

var supportsHydration = true;

function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  }
  // This has now been refined to an element node.
  return instance;
}

function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  }
  // This has now been refined to a text node.
  return instance;
}

function getNextHydratableSibling(instance) {
  var node = instance.nextSibling;
  // Skip non-hydratable nodes.
  while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
    node = node.nextSibling;
  }
  return node;
}

function getFirstHydratableChild(parentInstance) {
  var next = parentInstance.firstChild;
  // Skip non-hydratable nodes.
  while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
    next = next.nextSibling;
  }
  return next;
}

function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance);
  // TODO: Possibly defer this until the commit phase where all the events
  // get attached.
  updateFiberProps(instance, props);
  var parentNamespace = void 0;
  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }
  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}

function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}

function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}

function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}

function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}

function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type, props);
  }
}

function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}

function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedElement(parentInstance, type, props);
  }
}

function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = '\u269B';
var warningEmoji = '\u26D4';
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber = null;
// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase = null;
var currentPhaseFiber = null;
// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
var isWaitingForCallback = false;
// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + ' ' + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
  var suffix = warning ? ' Warning: ' + warning : '';
  return '' + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);
  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {}
  // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.

  // Clear marks immediately to avoid growing buffer.
  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + ' (#' + debugID + ')';
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
  } else {
    // Composite component methods.
    return componentName + '.' + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }
  labelsInCurrentCommit.add(label);

  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;
    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }
  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;
  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }
    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }
  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  if (enableUserTimingAPI) {
    effectCountInCurrentCommit++;
  }
}

function recordScheduleUpdate() {
  if (enableUserTimingAPI) {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }
    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}

function startRequestCallbackTimer() {
  if (enableUserTimingAPI) {
    if (supportsUserTiming && !isWaitingForCallback) {
      isWaitingForCallback = true;
      beginMark('(Waiting for async callback...)');
    }
  }
}

function stopRequestCallbackTimer(didExpire, expirationTime) {
  if (enableUserTimingAPI) {
    if (supportsUserTiming) {
      isWaitingForCallback = false;
      var warning = didExpire ? 'React was blocked by main thread' : null;
      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
    }
  }
}

function startWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, this is the fiber to unwind from.
    currentFiber = fiber;
    if (!beginFiberMark(fiber, null)) {
      return;
    }
    fiber._debugIsCurrentlyTiming = true;
  }
}

function cancelWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.
    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}

function stopWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}

function stopFailedWorkTimer(fiber) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    }
    // If we pause, its parent is the fiber to unwind from.
    currentFiber = fiber.return;
    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }
    fiber._debugIsCurrentlyTiming = false;
    var warning = 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}

function startPhaseTimer(fiber, phase) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    clearPendingPhaseMeasurement();
    if (!beginFiberMark(fiber, phase)) {
      return;
    }
    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}

function stopPhaseTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }
    currentPhase = null;
    currentPhaseFiber = null;
  }
}

function startWorkLoopTimer(nextUnitOfWork) {
  if (enableUserTimingAPI) {
    currentFiber = nextUnitOfWork;
    if (!supportsUserTiming) {
      return;
    }
    commitCountInCurrentWorkLoop = 0;
    // This is top level call.
    // Any other measurements are performed within.
    beginMark('(React Tree Reconciliation)');
    // Resume any measurements that were in progress during the last loop.
    resumeTimers();
  }
}

function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var warning = null;
    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = 'An update to ' + componentName + ' interrupted the previous render';
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }
    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';
    // Pause any measurements until the next loop.
    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}

function startCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}

function stopCommitTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;
    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }
    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();

    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}

function startCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}

function stopCommitSnapshotEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
  }
}

function startCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}

function stopCommitHostEffectsTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
  }
}

function startCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}

function stopCommitLifeCyclesTimer() {
  if (enableUserTimingAPI) {
    if (!supportsUserTiming) {
      return;
    }
    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];

var fiberStack = void 0;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      warningWithoutStack$1(false, 'Unexpected pop.');
    }
    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      warningWithoutStack$1(false, 'Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];

  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;

  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

function checkThatStackIsEmpty() {
  {
    if (index !== -1) {
      warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
    }
  }
}

function resetStackAfterFatalErrorInDev() {
  {
    index = -1;
    valueStack.length = 0;
    fiberStack.length = 0;
  }
}

var warnedAboutMissingGetChildContext = void 0;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};
{
  Object.freeze(emptyContextObject);
}

// A cursor to the current merged context object on the stack.
var contextStackCursor = createCursor(emptyContextObject);
// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor = createCursor(false);
// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  if (didPushOwnContextIfProvider && isContextProvider(Component)) {
    // If the fiber is a context provider itself, when we read its context
    // we may have already pushed its own child context on the stack. A context
    // provider should not "see" its own child context. Therefore we read the
    // previous (parent) context instead for a context provider.
    return previousContext;
  }
  return contextStackCursor.current;
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  var instance = workInProgress.stateNode;
  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

function getMaskedContext(workInProgress, unmaskedContext) {
  var type = workInProgress.type;
  var contextTypes = type.contextTypes;
  if (!contextTypes) {
    return emptyContextObject;
  }

  // Avoid recreating masked context unless unmasked context has changed.
  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
  // This may trigger infinite loops if componentWillReceiveProps calls setState.
  var instance = workInProgress.stateNode;
  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
    return instance.__reactInternalMemoizedMaskedChildContext;
  }

  var context = {};
  for (var key in contextTypes) {
    context[key] = unmaskedContext[key];
  }

  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // Context is created before the class component is instantiated so check for instance.
  if (instance) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return context;
}

function hasContextChanged() {
  return didPerformWorkStackCursor.current;
}

function isContextProvider(type) {
  var childContextTypes = type.childContextTypes;
  return childContextTypes !== null && childContextTypes !== undefined;
}

function popContext(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function popTopLevelContextObject(fiber) {
  pop(didPerformWorkStackCursor, fiber);
  pop(contextStackCursor, fiber);
}

function pushTopLevelContextObject(fiber, context, didChange) {
  !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  push(contextStackCursor, context, fiber);
  push(didPerformWorkStackCursor, didChange, fiber);
}

function processChildContext(fiber, type, parentContext) {
  var instance = fiber.stateNode;
  var childContextTypes = type.childContextTypes;

  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
  if (typeof instance.getChildContext !== 'function') {
    {
      var componentName = getComponentName(type) || 'Unknown';

      if (!warnedAboutMissingGetChildContext[componentName]) {
        warnedAboutMissingGetChildContext[componentName] = true;
        warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
      }
    }
    return parentContext;
  }

  var childContext = void 0;
  {
    setCurrentPhase('getChildContext');
  }
  startPhaseTimer(fiber, 'getChildContext');
  childContext = instance.getChildContext();
  stopPhaseTimer();
  {
    setCurrentPhase(null);
  }
  for (var contextKey in childContext) {
    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
  }
  {
    var name = getComponentName(type) || 'Unknown';
    checkPropTypes(childContextTypes, childContext, 'child context', name,
    // In practice, there is one case in which we won't get a stack. It's when
    // somebody calls unstable_renderSubtreeIntoContainer() and we process
    // context from the parent component instance. The stack will be missing
    // because it's outside of the reconciliation, and so the pointer has not
    // been set. This is rare and doesn't matter. We'll also remove that API.
    getCurrentFiberStackInDev);
  }

  return _assign({}, parentContext, childContext);
}

function pushContextProvider(workInProgress) {
  var instance = workInProgress.stateNode;
  // We push the context as early as possible to ensure stack integrity.
  // If the instance does not exist yet, we will push null at first,
  // and replace it on the stack later when invalidating the context.
  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;

  // Remember the parent context so we can merge with it later.
  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
  previousContext = contextStackCursor.current;
  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

  return true;
}

function invalidateContextProvider(workInProgress, type, didChange) {
  var instance = workInProgress.stateNode;
  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  if (didChange) {
    // Merge parent and own context.
    // Skip this if we're not updating due to sCU.
    // This avoids unnecessarily recomputing memoized values.
    var mergedContext = processChildContext(workInProgress, type, previousContext);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

    // Replace the old (or empty) context with the new one.
    // It is important to unwind the context in the reverse order.
    pop(didPerformWorkStackCursor, workInProgress);
    pop(contextStackCursor, workInProgress);
    // Now push the new context and mark that it has changed.
    push(contextStackCursor, mergedContext, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  } else {
    pop(didPerformWorkStackCursor, workInProgress);
    push(didPerformWorkStackCursor, didChange, workInProgress);
  }
}

function findCurrentUnmaskedContext(fiber) {
  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
  // makes sense elsewhere
  !(isFiberMounted(fiber) && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var node = fiber;
  do {
    switch (node.tag) {
      case HostRoot:
        return node.stateNode.context;
      case ClassComponent:
        {
          var Component = node.type;
          if (isContextProvider(Component)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }
          break;
        }
      case ClassComponentLazy:
        {
          var _Component = getResultFromResolvedThenable(node.type);
          if (isContextProvider(_Component)) {
            return node.stateNode.__reactInternalMemoizedMergedChildContext;
          }
          break;
        }
    }
    node = node.return;
  } while (node !== null);
  invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
}

var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;

function catchErrors(fn) {
  return function (arg) {
    try {
      return fn(arg);
    } catch (err) {
      if (true && !hasLoggedError) {
        hasLoggedError = true;
        warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
      }
    }
  };
}

var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }
  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }
  if (!hook.supportsFiber) {
    {
      warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    }
    // DevTools exists, even though it doesn't support Fiber.
    return true;
  }
  try {
    var rendererID = hook.inject(internals);
    // We have successfully injected, so now it is safe to set up hooks.
    onCommitFiberRoot = catchErrors(function (root) {
      return hook.onCommitFiberRoot(rendererID, root);
    });
    onCommitFiberUnmount = catchErrors(function (fiber) {
      return hook.onCommitFiberUnmount(rendererID, fiber);
    });
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
    }
  }
  // DevTools exists
  return true;
}

function onCommitRoot(root) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root);
  }
}

function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt = 1073741823;

var NoWork = 0;
var Sync = 1;
var Never = maxSigned31BitInt;

var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = 2;

// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms) {
  // Always add an offset so that we don't clash with the magic number for NoWork.
  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
}

function expirationTimeToMs(expirationTime) {
  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET + ceiling(currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
}

var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;

function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}

// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION = 500;
var HIGH_PRIORITY_BATCH_SIZE = 100;

function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}

var NoContext = 0;
var AsyncMode = 1;
var StrictMode = 2;
var ProfileMode = 4;

var hasBadMapPolyfill = void 0;

{
  hasBadMapPolyfill = false;
  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]);
    // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.
    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.


var debugCounter = void 0;

{
  debugCounter = 1;
}

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.type = null;
  this.stateNode = null;

  // Fiber
  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;

  this.ref = null;

  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.firstContextDependency = null;

  this.mode = mode;

  // Effects
  this.effectTag = NoEffect;
  this.nextEffect = null;

  this.firstEffect = null;
  this.lastEffect = null;

  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;

  this.alternate = null;

  if (enableProfilerTimer) {
    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugIsCurrentlyTiming = false;
    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
}

// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function resolveLazyComponentTag(fiber, Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponentLazy : FunctionalComponentLazy;
  } else if (Component !== undefined && Component !== null && Component.$$typeof) {
    return ForwardRefLazy;
  }
  return IndeterminateComponent;
}

// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current, pendingProps, expirationTime) {
  var workInProgress = current.alternate;
  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps;

    // We already have an alternate.
    // Reset the effect tag.
    workInProgress.effectTag = NoEffect;

    // The effect list is no longer valid.
    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    if (enableProfilerTimer) {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  // Don't touching the subtree's expiration time, which has not changed.
  workInProgress.childExpirationTime = current.childExpirationTime;
  if (pendingProps !== current.pendingProps) {
    // This fiber has new props.
    workInProgress.expirationTime = expirationTime;
  } else {
    // This fiber's props have not changed.
    workInProgress.expirationTime = current.expirationTime;
  }

  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.firstContextDependency = current.firstContextDependency;

  // These will be overridden during the parent's reconciliation
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  if (enableProfilerTimer) {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  return workInProgress;
}

function createHostRootFiber(isAsync) {
  var mode = isAsync ? AsyncMode | StrictMode : NoContext;

  if (enableProfilerTimer && isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}

function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;
  {
    owner = element._owner;
  }

  var fiber = void 0;
  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;

  var fiberTag = void 0;
  if (typeof type === 'function') {
    fiberTag = shouldConstruct(type) ? ClassComponent : IndeterminateComponent;
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
      case REACT_ASYNC_MODE_TYPE:
        fiberTag = Mode;
        mode |= AsyncMode | StrictMode;
        break;
      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;
      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
      case REACT_PLACEHOLDER_TYPE:
        fiberTag = PlaceholderComponent;
        break;
      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;
              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;
              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;
                break getTag;
              default:
                {
                  if (typeof type.then === 'function') {
                    fiberTag = IndeterminateComponent;
                    break getTag;
                  }
                }
            }
          }
          var info = '';
          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }
            var ownerName = owner ? getComponentName(owner.type) : null;
            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }
          invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.type = type;
  fiber.expirationTime = expirationTime;

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}

function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;

  return fiber;
}

function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoContext);
  fiber.type = 'DELETED';
  return fiber;
}

function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null, // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
}

// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoContext);
  }

  // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.

  target.tag = source.tag;
  target.key = source.key;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.firstContextDependency = source.firstContextDependency;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;
  if (enableProfilerTimer) {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }
  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  return target;
}

/* eslint-disable no-use-before-define */
// TODO: This should be lifted into the renderer.


// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.


// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)

/* eslint-enable no-use-before-define */

function createFiberRoot(containerInfo, isAsync, hydrate) {
  // Cyclic construction. This cheats the type system right now because
  // stateNode is any.
  var uninitializedFiber = createHostRootFiber(isAsync);

  var root = void 0;
  if (enableSchedulerTracing) {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null,

      interactionThreadID: tracing.unstable_getThreadID(),
      memoizedInteractions: new Set(),
      pendingInteractionMap: new Map()
    };
  } else {
    root = {
      current: uninitializedFiber,
      containerInfo: containerInfo,
      pendingChildren: null,

      earliestPendingTime: NoWork,
      latestPendingTime: NoWork,
      earliestSuspendedTime: NoWork,
      latestSuspendedTime: NoWork,
      latestPingedTime: NoWork,

      didError: false,

      pendingCommitExpirationTime: NoWork,
      finishedWork: null,
      timeoutHandle: noTimeout,
      context: null,
      pendingContext: null,
      hydrate: hydrate,
      nextExpirationTimeToWorkOn: NoWork,
      expirationTime: NoWork,
      firstBatch: null,
      nextScheduledRoot: null
    };
  }

  uninitializedFiber.stateNode = root;

  // The reason for the way the Flow types are structured in this file,
  // Is to avoid needing :any casts everywhere interaction tracing fields are used.
  // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
  // $FlowFixMe Remove this :any cast and replace it with something better.
  return root;
}

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

var ReactStrictModeWarnings = {
  discardPendingWarnings: function () {},
  flushPendingDeprecationWarnings: function () {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordDeprecationWarnings: function (fiber, instance) {},
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {}
};

{
  var LIFECYCLE_SUGGESTIONS = {
    UNSAFE_componentWillMount: 'componentDidMount',
    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
    UNSAFE_componentWillUpdate: 'componentDidUpdate'
  };

  var pendingComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUnsafeLifecycleWarnings = new Map();
  var pendingLegacyContextWarning = new Map();

  // Tracks components we have already warned about.
  var didWarnAboutDeprecatedLifecycles = new Set();
  var didWarnAboutUnsafeLifecycles = new Set();
  var didWarnAboutLegacyContext = new Set();

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUnsafeLifecycleWarnings = new Map();
    pendingLegacyContextWarning = new Map();
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
      var lifecyclesWarningMesages = [];

      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];
        if (lifecycleWarnings.length > 0) {
          var componentNames = new Set();
          lifecycleWarnings.forEach(function (fiber) {
            componentNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });

          var formatted = lifecycle.replace('UNSAFE_', '');
          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
          var sortedComponentNames = setToSortedString(componentNames);

          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
        }
      });

      if (lifecyclesWarningMesages.length > 0) {
        var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

        warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\n\n'));
      }
    });

    pendingUnsafeLifecycleWarnings = new Map();
  };

  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;

    var node = fiber;
    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }
      node = node.return;
    }

    return maybeStrictRoot;
  };

  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
    if (pendingComponentWillMountWarnings.length > 0) {
      var uniqueNames = new Set();
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);

      lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);

      pendingComponentWillMountWarnings = [];
    }

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      var _uniqueNames = new Set();
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        _uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames = setToSortedString(_uniqueNames);

      lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);

      pendingComponentWillReceivePropsWarnings = [];
    }

    if (pendingComponentWillUpdateWarnings.length > 0) {
      var _uniqueNames2 = new Set();
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        _uniqueNames2.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutDeprecatedLifecycles.add(fiber.type);
      });

      var _sortedNames2 = setToSortedString(_uniqueNames2);

      lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);

      pendingComponentWillUpdateWarnings = [];
    }
  };

  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
      return;
    }

    // Don't warn about react-lifecycles-compat polyfilled components.
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    // This is difficult to track any other way since component names
    // are often vague and are likely to collide between 3rd party libraries.
    // An expand property is probably okay to use here since it's DEV-only,
    // and will only be set in the event of serious warnings.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    var warningsForRoot = void 0;
    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
      warningsForRoot = {
        UNSAFE_componentWillMount: [],
        UNSAFE_componentWillReceiveProps: [],
        UNSAFE_componentWillUpdate: []
      };

      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
    } else {
      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
    }

    var unsafeLifecycles = [];
    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillMount');
    }
    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
    }
    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
      unsafeLifecycles.push('UNSAFE_componentWillUpdate');
    }

    if (unsafeLifecycles.length > 0) {
      unsafeLifecycles.forEach(function (lifecycle) {
        warningsForRoot[lifecycle].push(fiber);
      });
    }
  };

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);
    if (strictRoot === null) {
      warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
      return;
    }

    // Dedup strategy: Warn once per component.
    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }
      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });

      var sortedNames = setToSortedString(uniqueNames);
      var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);

      warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
    });
  };
}

// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation = {
  debugTool: null
};

var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.

function markPendingPriorityLevel(root, expirationTime) {
  // If there's a gap between completing a failed root and retrying it,
  // additional updates may be scheduled. Clear `didError`, in case the update
  // is sufficient to fix the error.
  root.didError = false;

  // Update the latest and earliest pending times
  var earliestPendingTime = root.earliestPendingTime;
  if (earliestPendingTime === NoWork) {
    // No other pending updates.
    root.earliestPendingTime = root.latestPendingTime = expirationTime;
  } else {
    if (earliestPendingTime > expirationTime) {
      // This is the earliest pending update.
      root.earliestPendingTime = expirationTime;
    } else {
      var latestPendingTime = root.latestPendingTime;
      if (latestPendingTime < expirationTime) {
        // This is the latest pending update
        root.latestPendingTime = expirationTime;
      }
    }
  }
  findNextExpirationTimeToWorkOn(expirationTime, root);
}

function markCommittedPriorityLevels(root, earliestRemainingTime) {
  root.didError = false;

  if (earliestRemainingTime === NoWork) {
    // Fast path. There's no remaining work. Clear everything.
    root.earliestPendingTime = NoWork;
    root.latestPendingTime = NoWork;
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  // Let's see if the previous latest known pending level was just flushed.
  var latestPendingTime = root.latestPendingTime;
  if (latestPendingTime !== NoWork) {
    if (latestPendingTime < earliestRemainingTime) {
      // We've flushed all the known pending levels.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      var earliestPendingTime = root.earliestPendingTime;
      if (earliestPendingTime < earliestRemainingTime) {
        // We've flushed the earliest known pending level. Set this to the
        // latest pending time.
        root.earliestPendingTime = root.latestPendingTime;
      }
    }
  }

  // Now let's handle the earliest remaining level in the whole tree. We need to
  // decide whether to treat it as a pending level or as suspended. Check
  // it falls within the range of known suspended levels.

  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestRemainingTime > latestSuspendedTime) {
    // The earliest remaining level is later than all the suspended work. That
    // means we've flushed all the suspended work.
    root.earliestSuspendedTime = NoWork;
    root.latestSuspendedTime = NoWork;
    root.latestPingedTime = NoWork;

    // There's no suspended work. Treat the earliest remaining level as a
    // pending level.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  if (earliestRemainingTime < earliestSuspendedTime) {
    // The earliest remaining time is earlier than all the suspended work.
    // Treat it as a pending update.
    markPendingPriorityLevel(root, earliestRemainingTime);
    findNextExpirationTimeToWorkOn(NoWork, root);
    return;
  }

  // The earliest remaining time falls within the range of known suspended
  // levels. We should treat this as suspended work.
  findNextExpirationTimeToWorkOn(NoWork, root);
}

function hasLowerPriorityWork(root, erroredExpirationTime) {
  var latestPendingTime = root.latestPendingTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var latestPingedTime = root.latestPingedTime;
  return latestPendingTime !== NoWork && latestPendingTime > erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime > erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime > erroredExpirationTime;
}

function isPriorityLevelSuspended(root, expirationTime) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  return earliestSuspendedTime !== NoWork && expirationTime >= earliestSuspendedTime && expirationTime <= latestSuspendedTime;
}

function markSuspendedPriorityLevel(root, suspendedTime) {
  root.didError = false;
  clearPing(root, suspendedTime);

  // First, check the known pending levels and update them if needed.
  var earliestPendingTime = root.earliestPendingTime;
  var latestPendingTime = root.latestPendingTime;
  if (earliestPendingTime === suspendedTime) {
    if (latestPendingTime === suspendedTime) {
      // Both known pending levels were suspended. Clear them.
      root.earliestPendingTime = root.latestPendingTime = NoWork;
    } else {
      // The earliest pending level was suspended. Clear by setting it to the
      // latest pending level.
      root.earliestPendingTime = latestPendingTime;
    }
  } else if (latestPendingTime === suspendedTime) {
    // The latest pending level was suspended. Clear by setting it to the
    // latest pending level.
    root.latestPendingTime = earliestPendingTime;
  }

  // Finally, update the known suspended levels.
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  if (earliestSuspendedTime === NoWork) {
    // No other suspended levels.
    root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
  } else {
    if (earliestSuspendedTime > suspendedTime) {
      // This is the earliest suspended level.
      root.earliestSuspendedTime = suspendedTime;
    } else if (latestSuspendedTime < suspendedTime) {
      // This is the latest suspended level
      root.latestSuspendedTime = suspendedTime;
    }
  }

  findNextExpirationTimeToWorkOn(suspendedTime, root);
}

function markPingedPriorityLevel(root, pingedTime) {
  root.didError = false;

  // TODO: When we add back resuming, we need to ensure the progressed work
  // is thrown out and not reused during the restarted render. One way to
  // invalidate the progressed work is to restart at expirationTime + 1.
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime === NoWork || latestPingedTime < pingedTime) {
    root.latestPingedTime = pingedTime;
  }
  findNextExpirationTimeToWorkOn(pingedTime, root);
}

function clearPing(root, completedTime) {
  // TODO: Track whether the root was pinged during the render phase. If so,
  // we need to make sure we don't lose track of it.
  var latestPingedTime = root.latestPingedTime;
  if (latestPingedTime !== NoWork && latestPingedTime <= completedTime) {
    root.latestPingedTime = NoWork;
  }
}

function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
  var earliestExpirationTime = renderExpirationTime;

  var earliestPendingTime = root.earliestPendingTime;
  var earliestSuspendedTime = root.earliestSuspendedTime;
  if (earliestExpirationTime === NoWork || earliestPendingTime !== NoWork && earliestPendingTime < earliestExpirationTime) {
    earliestExpirationTime = earliestPendingTime;
  }
  if (earliestExpirationTime === NoWork || earliestSuspendedTime !== NoWork && earliestSuspendedTime < earliestExpirationTime) {
    earliestExpirationTime = earliestSuspendedTime;
  }
  return earliestExpirationTime;
}

function didExpireAtExpirationTime(root, currentTime) {
  var expirationTime = root.expirationTime;
  if (expirationTime !== NoWork && currentTime >= expirationTime) {
    // The root has expired. Flush all work up to the current time.
    root.nextExpirationTimeToWorkOn = currentTime;
  }
}

function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
  var earliestSuspendedTime = root.earliestSuspendedTime;
  var latestSuspendedTime = root.latestSuspendedTime;
  var earliestPendingTime = root.earliestPendingTime;
  var latestPingedTime = root.latestPingedTime;

  // Work on the earliest pending time. Failing that, work on the latest
  // pinged time.
  var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime;

  // If there is no pending or pinged work, check if there's suspended work
  // that's lower priority than what we just completed.
  if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime > completedExpirationTime)) {
    // The lowest priority suspended work is the work most likely to be
    // committed next. Let's start rendering it again, so that if it times out,
    // it's ready to commit.
    nextExpirationTimeToWorkOn = latestSuspendedTime;
  }

  var expirationTime = nextExpirationTimeToWorkOn;
  if (expirationTime !== NoWork && earliestSuspendedTime !== NoWork && earliestSuspendedTime < expirationTime) {
    // Expire using the earliest known expiration time.
    expirationTime = earliestSuspendedTime;
  }

  root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
  root.expirationTime = expirationTime;
}

// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which is
// can be mutated and processed asynchronously before it is committed — a form
// of double buffering. If a work-in-progress render is discarded before
// finishing, we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3;

// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate = false;

var didWarnUpdateInsideUpdate = void 0;
var currentlyProcessingQueue = void 0;
var resetCurrentlyProcessingQueue = void 0;
{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
  resetCurrentlyProcessingQueue = function () {
    currentlyProcessingQueue = null;
  };
}

function createUpdateQueue(baseState) {
  var queue = {
    baseState: baseState,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function cloneUpdateQueue(currentQueue) {
  var queue = {
    baseState: currentQueue.baseState,
    firstUpdate: currentQueue.firstUpdate,
    lastUpdate: currentQueue.lastUpdate,

    // TODO: With resuming, if we bail out and resuse the child tree, we should
    // keep these effects.
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,

    firstEffect: null,
    lastEffect: null,

    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
  return queue;
}

function createUpdate(expirationTime) {
  return {
    expirationTime: expirationTime,

    tag: UpdateState,
    payload: null,
    callback: null,

    next: null,
    nextEffect: null
  };
}

function appendUpdateToQueue(queue, update) {
  // Append the update to the end of the list.
  if (queue.lastUpdate === null) {
    // Queue is empty
    queue.firstUpdate = queue.lastUpdate = update;
  } else {
    queue.lastUpdate.next = update;
    queue.lastUpdate = update;
  }
}

function enqueueUpdate(fiber, update) {
  // Update queues are created lazily.
  var alternate = fiber.alternate;
  var queue1 = void 0;
  var queue2 = void 0;
  if (alternate === null) {
    // There's only one fiber.
    queue1 = fiber.updateQueue;
    queue2 = null;
    if (queue1 === null) {
      queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
    }
  } else {
    // There are two owners.
    queue1 = fiber.updateQueue;
    queue2 = alternate.updateQueue;
    if (queue1 === null) {
      if (queue2 === null) {
        // Neither fiber has an update queue. Create new ones.
        queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
      } else {
        // Only one fiber has an update queue. Clone to create a new one.
        queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
      }
    } else {
      if (queue2 === null) {
        // Only one fiber has an update queue. Clone to create a new one.
        queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
      } else {
        // Both owners have an update queue.
      }
    }
  }
  if (queue2 === null || queue1 === queue2) {
    // There's only a single queue.
    appendUpdateToQueue(queue1, update);
  } else {
    // There are two queues. We need to append the update to both queues,
    // while accounting for the persistent structure of the list — we don't
    // want the same update to be added multiple times.
    if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
      // One of the queues is not empty. We must add the update to both queues.
      appendUpdateToQueue(queue1, update);
      appendUpdateToQueue(queue2, update);
    } else {
      // Both queues are non-empty. The last update is the same in both lists,
      // because of structural sharing. So, only append to one of the lists.
      appendUpdateToQueue(queue1, update);
      // But we still need to update the `lastUpdate` pointer of queue2.
      queue2.lastUpdate = update;
    }
  }

  {
    if ((fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
      warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
      didWarnUpdateInsideUpdate = true;
    }
  }
}

function enqueueCapturedUpdate(workInProgress, update) {
  // Captured updates go into a separate list, and only on the work-in-
  // progress queue.
  var workInProgressQueue = workInProgress.updateQueue;
  if (workInProgressQueue === null) {
    workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
  } else {
    // TODO: I put this here rather than createWorkInProgress so that we don't
    // clone the queue unnecessarily. There's probably a better way to
    // structure this.
    workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
  }

  // Append the update to the end of the list.
  if (workInProgressQueue.lastCapturedUpdate === null) {
    // This is the first render phase update
    workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
  } else {
    workInProgressQueue.lastCapturedUpdate.next = update;
    workInProgressQueue.lastCapturedUpdate = update;
  }
}

function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
  var current = workInProgress.alternate;
  if (current !== null) {
    // If the work-in-progress queue is equal to the current queue,
    // we need to clone it first.
    if (queue === current.updateQueue) {
      queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
    }
  }
  return queue;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var _payload = update.payload;
        if (typeof _payload === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }
          return _payload.call(instance, prevState, nextProps);
        }
        // State object
        return _payload;
      }
    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough
    case UpdateState:
      {
        var _payload2 = update.payload;
        var partialState = void 0;
        if (typeof _payload2 === 'function') {
          // Updater function
          {
            if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
              _payload2.call(instance, prevState, nextProps);
            }
          }
          partialState = _payload2.call(instance, prevState, nextProps);
        } else {
          // Partial state object
          partialState = _payload2;
        }
        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        }
        // Merge the partial state and the previous state.
        return _assign({}, prevState, partialState);
      }
    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }
  return prevState;
}

function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
  hasForceUpdate = false;

  queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);

  {
    currentlyProcessingQueue = queue;
  }

  // These values may change as we process the queue.
  var newBaseState = queue.baseState;
  var newFirstUpdate = null;
  var newExpirationTime = NoWork;

  // Iterate through the list of updates to compute the result.
  var update = queue.firstUpdate;
  var resultState = newBaseState;
  while (update !== null) {
    var updateExpirationTime = update.expirationTime;
    if (updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstUpdate === null) {
        // This is the first skipped update. It will be the first update in
        // the new list.
        newFirstUpdate = update;
        // Since this is the first update that was skipped, the current result
        // is the new base state.
        newBaseState = resultState;
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > updateExpirationTime) {
        newExpirationTime = updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback = update.callback;
      if (_callback !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastEffect === null) {
          queue.firstEffect = queue.lastEffect = update;
        } else {
          queue.lastEffect.nextEffect = update;
          queue.lastEffect = update;
        }
      }
    }
    // Continue to the next update.
    update = update.next;
  }

  // Separately, iterate though the list of captured updates.
  var newFirstCapturedUpdate = null;
  update = queue.firstCapturedUpdate;
  while (update !== null) {
    var _updateExpirationTime = update.expirationTime;
    if (_updateExpirationTime > renderExpirationTime) {
      // This update does not have sufficient priority. Skip it.
      if (newFirstCapturedUpdate === null) {
        // This is the first skipped captured update. It will be the first
        // update in the new list.
        newFirstCapturedUpdate = update;
        // If this is the first update that was skipped, the current result is
        // the new base state.
        if (newFirstUpdate === null) {
          newBaseState = resultState;
        }
      }
      // Since this update will remain in the list, update the remaining
      // expiration time.
      if (newExpirationTime === NoWork || newExpirationTime > _updateExpirationTime) {
        newExpirationTime = _updateExpirationTime;
      }
    } else {
      // This update does have sufficient priority. Process it and compute
      // a new result.
      resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
      var _callback2 = update.callback;
      if (_callback2 !== null) {
        workInProgress.effectTag |= Callback;
        // Set this to null, in case it was mutated during an aborted render.
        update.nextEffect = null;
        if (queue.lastCapturedEffect === null) {
          queue.firstCapturedEffect = queue.lastCapturedEffect = update;
        } else {
          queue.lastCapturedEffect.nextEffect = update;
          queue.lastCapturedEffect = update;
        }
      }
    }
    update = update.next;
  }

  if (newFirstUpdate === null) {
    queue.lastUpdate = null;
  }
  if (newFirstCapturedUpdate === null) {
    queue.lastCapturedUpdate = null;
  } else {
    workInProgress.effectTag |= Callback;
  }
  if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
    // We processed every update, without skipping. That means the new base
    // state is the same as the result state.
    newBaseState = resultState;
  }

  queue.baseState = newBaseState;
  queue.firstUpdate = newFirstUpdate;
  queue.firstCapturedUpdate = newFirstCapturedUpdate;

  // Set the remaining expiration time to be whatever is remaining in the queue.
  // This should be fine because the only two other things that contribute to
  // expiration time are props and context. We're already in the middle of the
  // begin phase by the time we start processing the queue, so we've already
  // dealt with the props. Context in components that specify
  // shouldComponentUpdate is tricky; but we'll have to account for
  // that regardless.
  workInProgress.expirationTime = newExpirationTime;
  workInProgress.memoizedState = resultState;

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}

function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}

function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
  // If the finished render included captured updates, and there are still
  // lower priority updates left over, we need to keep the captured updates
  // in the queue so that they are rebased and not dropped once we process the
  // queue again at the lower priority.
  if (finishedQueue.firstCapturedUpdate !== null) {
    // Join the captured update list to the end of the normal list.
    if (finishedQueue.lastUpdate !== null) {
      finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
      finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
    }
    // Clear the list of captured updates.
    finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
  }

  // Commit the effects
  commitUpdateEffects(finishedQueue.firstEffect, instance);
  finishedQueue.firstEffect = finishedQueue.lastEffect = null;

  commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
  finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
}

function commitUpdateEffects(effect, instance) {
  while (effect !== null) {
    var _callback3 = effect.callback;
    if (_callback3 !== null) {
      effect.callback = null;
      callCallback(_callback3, instance);
    }
    effect = effect.nextEffect;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

var valueCursor = createCursor(null);

var rendererSigil = void 0;
{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;

function resetContextDependences() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
}

function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);

    context._currentValue = nextValue;
    {
      !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);

    context._currentValue2 = nextValue;
    {
      !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
      context._currentRenderer2 = rendererSigil;
    }
  }
}

function popProvider(providerFiber) {
  var currentValue = valueCursor.current;

  pop(valueCursor, providerFiber);

  var context = providerFiber.type._context;
  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}

function calculateChangedBits(context, newValue, oldValue) {
  // Use Object.is to compare the new context value to the old value. Inlined
  // Object.is polyfill.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare
  ) {
      // No change
      return 0;
    } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;

    {
      !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
    }
    return changedBits | 0;
  }
}

function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;
  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }
  while (fiber !== null) {
    var nextFiber = void 0;

    // Visit this fiber.
    var dependency = fiber.firstContextDependency;
    if (dependency !== null) {
      do {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.

          if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime);
            update.tag = ForceUpdate;
            // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.
            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime === NoWork || fiber.expirationTime > renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > renderExpirationTime)) {
            alternate.expirationTime = renderExpirationTime;
          }
          // Update the child expiration time of all the ancestors, including
          // the alternates.
          var node = fiber.return;
          while (node !== null) {
            alternate = node.alternate;
            if (node.childExpirationTime === NoWork || node.childExpirationTime > renderExpirationTime) {
              node.childExpirationTime = renderExpirationTime;
              if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
                alternate.childExpirationTime = renderExpirationTime;
              }
            } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > renderExpirationTime)) {
              alternate.childExpirationTime = renderExpirationTime;
            } else {
              // Neither alternate was updated, which means the rest of the
              // ancestor path already has sufficient priority.
              break;
            }
            node = node.return;
          }
        }
        nextFiber = fiber.child;
        dependency = dependency.next;
      } while (dependency !== null);
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;
      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }
        var sibling = nextFiber.sibling;
        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        }
        // No more siblings. Traverse up.
        nextFiber = nextFiber.return;
      }
    }
    fiber = nextFiber;
  }
}

function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  // Reset the work-in-progress list
  workInProgress.firstContextDependency = null;
}

function readContext(context, observedBits) {
  if (lastContextWithAllBitsObserved === context) {
    // Nothing to do. We already observe everything in this context.
  } else if (observedBits === false || observedBits === 0) {
    // Do not observe any updates.
  } else {
    var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.
    if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = maxSigned31BitInt;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      !(currentlyRenderingFiber !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
      // This is the first dependency in the list
      currentlyRenderingFiber.firstContextDependency = lastContextDependency = contextItem;
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }
  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

var NO_CONTEXT = {};

var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber);
  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);

  // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.
  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance);
  // Now that we know this function doesn't throw, replace it.
  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance);

  // Don't push this Fiber's context unless it's unique.
  if (context === nextContext) {
    return;
  }

  // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.
  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {
  if (!enableProfilerTimer) {
    return;
  }
  commitTime = schedule.unstable_now();
}

function startProfilerTimer(fiber) {
  if (!enableProfilerTimer) {
    return;
  }

  profilerStartTime = schedule.unstable_now();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = schedule.unstable_now();
  }
}

function stopProfilerTimerIfRunning(fiber) {
  if (!enableProfilerTimer) {
    return;
  }
  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
  if (!enableProfilerTimer) {
    return;
  }

  if (profilerStartTime >= 0) {
    var elapsedTime = schedule.unstable_now() - profilerStartTime;
    fiber.actualDuration += elapsedTime;
    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }
    profilerStartTime = -1;
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray;

// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject = new React.Component().refs;

var didWarnAboutStateAssignmentForComponent = void 0;
var didWarnAboutUninitializedState = void 0;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
var didWarnAboutUndefinedDerivedState = void 0;
var warnOnUndefinedDerivedState = void 0;
var warnOnInvalidCallback$1 = void 0;
var didWarnAboutDirectlyAssigningPropsToState = void 0;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();

  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback$1 = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }
    var key = callerName + '_' + callback;
    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);
      warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';
      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);
        warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  };

  // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.
  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  }
  // Merge the partial state and the previous state.
  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState;

  // Once the update queue is empty, persist the derived state onto the
  // base state.
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
    updateQueue.baseState = memoizedState;
  }
}

var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.payload = payload;
    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'setState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'replaceState');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTime();
    var expirationTime = computeExpirationForFiber(currentTime, fiber);

    var update = createUpdate(expirationTime);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback$1(callback, 'forceUpdate');
      }
      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext) {
  var instance = workInProgress.stateNode;
  if (typeof instance.shouldComponentUpdate === 'function') {
    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextLegacyContext);
    stopPhaseTimer();

    {
      !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;
  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
    !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
    var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
    !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
    var noInstancePropTypes = !instance.propTypes;
    !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
    var noInstanceContextTypes = !instance.contextTypes;
    !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;
    var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
    !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;
    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }
    var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
    !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
    var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
    !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
    var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
    !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
    var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
    !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
    var hasMutatedProps = instance.props !== newProps;
    !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
    var noInstanceDefaultProps = !instance.defaultProps;
    !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
      warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
    !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';
    !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
    var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
    !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
    var _state = instance.state;
    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
    }
    if (typeof instance.getChildContext === 'function') {
      !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance;
  // The instance needs access to the fiber so that it can schedule updates
  set(instance, workInProgress);
  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
  var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var contextTypes = ctor.contextTypes;
  var isContextConsumer = contextTypes !== null && contextTypes !== undefined;
  var context = isContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;

  // Instantiate twice to help detect side-effects.
  {
    if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);
        warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.
    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;
      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }
      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }
      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }
      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';
        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
          warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
        }
      }
    }
  }

  // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.
  if (isContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }
  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');
  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextLegacyContext);
  }
  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextLegacyContext);
  }
  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';
      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);
        warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }
    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);

  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  instance.context = getMaskedContext(workInProgress, unmaskedContext);

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';
      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);
        warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);

      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
    }
  }

  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  }

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance);
    // If we had additional state updates during this life-cycle, let's
    // process them now.
    updateQueue = workInProgress.updateQueue;
    if (updateQueue !== null) {
      processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
      instance.state = workInProgress.memoizedState;
    }
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextLegacyContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }
  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextLegacyContext;

  return shouldUpdate;
}

// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;

  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;

  var oldContext = instance.context;
  var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
  var nextLegacyContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';

  // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.

  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.
  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextLegacyContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextLegacyContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();

  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  var updateQueue = workInProgress.updateQueue;
  if (updateQueue !== null) {
    processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
    newState = workInProgress.memoizedState;
  }

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }
    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextLegacyContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextLegacyContext);
      }
      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextLegacyContext);
      }
      stopPhaseTimer();
    }
    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }
    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.
    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  }

  // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.
  instance.props = newProps;
  instance.state = newState;
  instance.context = nextLegacyContext;

  return shouldUpdate;
}

var didWarnAboutMaps = void 0;
var didWarnAboutGenerators = void 0;
var didWarnAboutStringRefInStrictMode = void 0;
var ownerHasKeyUseWarning = void 0;
var ownerHasFunctionTypeWarning = void 0;
var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefInStrictMode = {};

  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */
  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }
    if (!child._store || child._store.validated || child.key != null) {
      return;
    }
    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
    child._store.validated = true;

    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();
    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }
    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    warning$1(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current$$1, element) {
  var mixedRef = element.ref;
  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      if (returnFiber.mode & StrictMode) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (!didWarnAboutStringRefInStrictMode[componentName]) {
          warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          didWarnAboutStringRefInStrictMode[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst = void 0;
      if (owner) {
        var ownerFiber = owner;
        !(ownerFiber.tag === ClassComponent || ownerFiber.tag === ClassComponentLazy) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
        inst = ownerFiber.stateNode;
      }
      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
      var stringRef = '' + mixedRef;
      // Check if previous string ref matches new string ref
      if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
        return current$$1.ref;
      }
      var ref = function (value) {
        var refs = inst.refs;
        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }
        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };
      ref._stringRef = stringRef;
      return ref;
    } else {
      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a functional component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
    }
  }
  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';
    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }
    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
  }
}

function warnOnFunctionType() {
  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

  warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
}

// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    }
    // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.
    var last = returnFiber.lastEffect;
    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    }

    // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.
    var childToDelete = currentFirstChild;
    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }
    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    var existingChildren = new Map();

    var existingChild = currentFirstChild;
    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }
      existingChild = existingChild.sibling;
    }
    return existingChildren;
  }

  function useFiber(fiber, pendingProps, expirationTime) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }
    var current$$1 = newFiber.alternate;
    if (current$$1 !== null) {
      var oldIndex = current$$1.index;
      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }
    return newFiber;
  }

  function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current$$1, element, expirationTime) {
    if (current$$1 !== null && current$$1.type === element.type) {
      // Move based on index
      var existing = useFiber(current$$1, element.props, expirationTime);
      existing.ref = coerceRef(returnFiber, current$$1, element);
      existing.return = returnFiber;
      {
        existing._debugSource = element._source;
        existing._debugOwner = element._owner;
      }
      return existing;
    } else {
      // Insert
      var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
      created.ref = coerceRef(returnFiber, current$$1, element);
      created.return = returnFiber;
      return created;
    }
  }

  function updatePortal(returnFiber, current$$1, portal, expirationTime) {
    if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, portal.children || [], expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
    if (current$$1 === null || current$$1.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current$$1, fragment, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }
        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.

    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }
      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }
              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }
            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }
        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;
        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  /**
   * Warns if there is a duplicate or missing key
   */
  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }
      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;
          if (typeof key !== 'string') {
            break;
          }
          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }
          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }
          warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
          break;
        default:
          break;
      }
    }
    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from boths ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.

    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.

    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.

    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.

    {
      // First, validate keys.
      var knownKeys = null;
      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
        if (!_newFiber) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }
        previousNewFiber = _newFiber;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
      if (_newFiber2) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }
        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.

    var iteratorFn = getIteratorFn(newChildrenIterable);
    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' &&
      // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
        didWarnAboutGenerators = true;
      }

      // Warn about using Maps as children
      if (newChildrenIterable.entries === iteratorFn) {
        !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
        didWarnAboutMaps = true;
      }

      // First, validate keys.
      // We'll get a different iterator later for the main pass.
      var _newChildren = iteratorFn.call(newChildrenIterable);
      if (_newChildren) {
        var knownKeys = null;
        var _step = _newChildren.next();
        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);
    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

    var resultingFirstChild = null;
    var previousNewFiber = null;

    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    var step = newChildren.next();
    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (!oldFiber) {
          oldFiber = nextOldFiber;
        }
        break;
      }
      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }
      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
        if (_newFiber3 === null) {
          continue;
        }
        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }
        previousNewFiber = _newFiber3;
      }
      return resultingFirstChild;
    }

    // Add all children to a key map for quick lookups.
    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

    // Keep scanning and use the map to restore deleted items as moves.
    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }
        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }
        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent, expirationTime);
      existing.return = returnFiber;
      return existing;
    }
    // The existing first child is not a text node so we need to create one
    // and delete the existing ones.
    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, child, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;
    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }
      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.
  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.

    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    }

    // Handle object types
    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }
    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
        case ClassComponentLazy:
          {
            {
              var instance = returnFiber.stateNode;
              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough
        case FunctionalComponent:
          {
            var Component = returnFiber.type;
            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
          }
      }
    }

    // Remaining cases are all treated as empty.
    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);

function cloneChildFibers(current$$1, workInProgress) {
  !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
  workInProgress.child = newChild;

  newChild.return = workInProgress;
  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
    newChild.return = workInProgress;
  }
  newChild.sibling = null;
}

// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;
      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion;

  // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.
  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag |= Placement;
  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;
          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;
            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }
          break;
        }
      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;
          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;
            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;
          }
          break;
        }
      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);
        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }
        return false;
      }
    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);
        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }
        return false;
      }
    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }
  var nextInstance = nextHydratableInstance;
  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }
  var firstAttemptedInstance = nextInstance;
  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }
    // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.
    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }
  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
  // TODO: Type this specific to this type of component.
  fiber.updateQueue = updatePayload;
  // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.
  if (updatePayload !== null) {
    return true;
  }
  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;
      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }
          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }
  return shouldUpdate;
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;
  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
    parent = parent.return;
  }
  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }
  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }
  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type;

  // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.
  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;
    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);
  nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

function readLazyComponentType(thenable) {
  var status = thenable._reactStatus;
  switch (status) {
    case Resolved:
      var Component = thenable._reactResult;
      return Component;
    case Rejected:
      throw thenable._reactResult;
    case Pending:
      throw thenable;
    default:
      {
        thenable._reactStatus = Pending;
        thenable.then(function (resolvedValue) {
          if (thenable._reactStatus === Pending) {
            thenable._reactStatus = Resolved;
            if (typeof resolvedValue === 'object' && resolvedValue !== null) {
              // If the `default` property is not empty, assume it's the result
              // of an async import() and use that. Otherwise, use the
              // resolved value itself.
              var defaultExport = resolvedValue.default;
              resolvedValue = defaultExport !== undefined && defaultExport !== null ? defaultExport : resolvedValue;
            } else {
              resolvedValue = resolvedValue;
            }
            thenable._reactResult = resolvedValue;
          }
        }, function (error) {
          if (thenable._reactStatus === Pending) {
            thenable._reactStatus = Rejected;
            thenable._reactResult = error;
          }
        });
        throw thenable;
      }
  }
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;

var didWarnAboutBadClass = void 0;
var didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;
var didWarnAboutStatelessRefs = void 0;

{
  didWarnAboutBadClass = {};
  didWarnAboutGetDerivedStateOnFunctionalComponent = {};
  didWarnAboutStatelessRefs = {};
}

function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
  if (current$$1 === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.

    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
  }
}

function updateForwardRef(current$$1, workInProgress, type, nextProps, renderExpirationTime) {
  var render = type.render;
  var ref = workInProgress.ref;
  if (hasContextChanged()) {
    // Normally we can bail out on props equality but if context has changed
    // we don't do the bailout and we have to reuse existing props instead.
  } else if (workInProgress.memoizedProps === nextProps) {
    var currentRef = current$$1 !== null ? current$$1.ref : null;
    if (ref === currentRef) {
      return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
    }
  }

  var nextChildren = void 0;
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = render(nextProps, ref);
    setCurrentPhase(null);
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateFragment(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateMode(current$$1, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextChildren);
  return workInProgress.child;
}

function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
  if (enableProfilerTimer) {
    workInProgress.effectTag |= Update;
  }
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function markRef(current$$1, workInProgress) {
  var ref = workInProgress.ref;
  if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionalComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  var nextChildren = void 0;
  prepareToReadContext(workInProgress, renderExpirationTime);
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    nextChildren = Component(nextProps, context);
    setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.
  var hasContext = void 0;
  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }
  prepareToReadContext(workInProgress, renderExpirationTime);

  var shouldUpdate = void 0;
  if (current$$1 === null) {
    if (workInProgress.stateNode === null) {
      // In the initial pass we might need to construct the instance.
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      shouldUpdate = true;
    } else {
      // In a resume, we'll already have an instance we can reuse.
      shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    }
  } else {
    shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
  }
  return finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
}

function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current$$1, workInProgress);

  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode;

  // Rerender
  ReactCurrentOwner$3.current = workInProgress;
  var nextChildren = void 0;
  if (didCaptureError && (!enableGetDerivedStateFromCatch || typeof Component.getDerivedStateFromCatch !== 'function')) {
    // If we captured an error, but getDerivedStateFrom catch is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    if (enableProfilerTimer) {
      stopProfilerTimerIfRunning(workInProgress);
    }
  } else {
    {
      setCurrentPhase('render');
      nextChildren = instance.render();
      if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
        instance.render();
      }
      setCurrentPhase(null);
    }
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  if (current$$1 !== null && didCaptureError) {
    // If we're recovering from an error, reconcile twice: first to delete
    // all the existing children.
    reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
    workInProgress.child = null;
    // Now we can continue reconciling like normal. This has the effect of
    // remounting all children regardless of whether their their
    // identity matches.
  }
  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  // Memoize props and state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.
  memoizeState(workInProgress, instance.state);
  memoizeProps(workInProgress, instance.props);

  // The context might have changed so we need to recalculate it.
  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;
  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }
  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;
  !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  var nextChildren = nextState.element;
  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }
  var root = workInProgress.stateNode;
  if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.

    // This is a bit of a hack. We track the host root as a placement to
    // know that we're currently in a mounting state. That way isMounted
    // works as expected. We must reset this before committing.
    // TODO: Delete this when we delete isMounted and findDOMNode.
    workInProgress.effectTag |= Placement;

    // Ensure that children mount into this root without tracking
    // side-effects. This ensures that we don't store Placement effects on
    // nodes that will be hydrated.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }
  return workInProgress.child;
}

function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;

  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also have access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current$$1, workInProgress);

  // Check the host config to see if the children are offscreen/hidden.
  if (renderExpirationTime !== Never && workInProgress.mode & AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {
    // Schedule this fiber to re-render at offscreen priority. Then bailout.
    workInProgress.expirationTime = Never;
    workInProgress.memoizedProps = nextProps;
    return null;
  }

  reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
  memoizeProps(workInProgress, nextProps);
  return workInProgress.child;
}

function updateHostText(current$$1, workInProgress) {
  if (current$$1 === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }
  var nextProps = workInProgress.pendingProps;
  memoizeProps(workInProgress, nextProps);
  // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.
  return null;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);
    var defaultProps = Component.defaultProps;
    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
    return props;
  }
  return baseProps;
}

function mountIndeterminateComponent(current$$1, workInProgress, Component, renderExpirationTime) {
  !(current$$1 === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  var props = workInProgress.pendingProps;
  if (typeof Component === 'object' && Component !== null && typeof Component.then === 'function') {
    Component = readLazyComponentType(Component);
    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(workInProgress, Component);
    var resolvedProps = resolveDefaultProps(Component, props);
    switch (resolvedTag) {
      case FunctionalComponentLazy:
        {
          return updateFunctionalComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      case ClassComponentLazy:
        {
          return updateClassComponent(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      case ForwardRefLazy:
        {
          return updateForwardRef(current$$1, workInProgress, Component, resolvedProps, renderExpirationTime);
        }
      default:
        {
          // This message intentionally doesn't metion ForwardRef because the
          // fact that it's a separate type of work is an implementation detail.
          invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.', Component);
        }
    }
  }

  var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
  var context = getMaskedContext(workInProgress, unmaskedContext);

  prepareToReadContext(workInProgress, renderExpirationTime);

  var value = void 0;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    ReactCurrentOwner$3.current = workInProgress;
    value = Component(props, context);
  }
  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    // Proceed under the assumption that this is a class instance
    workInProgress.tag = ClassComponent;

    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.
    var hasContext = false;
    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;

    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(current$$1, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a functional component
    workInProgress.tag = FunctionalComponent;
    {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
      }
      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;
        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }
        if (!didWarnAboutStatelessRefs[warningKey]) {
          didWarnAboutStatelessRefs[warningKey] = true;
          warning$1(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {
          warningWithoutStack$1(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);
          didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;
        }
      }
    }
    reconcileChildren(current$$1, workInProgress, value, renderExpirationTime);
    memoizeProps(workInProgress, props);
    return workInProgress.child;
  }
}

function updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime) {
  if (enableSuspense) {
    var nextProps = workInProgress.pendingProps;

    // Check if we already attempted to render the normal state. If we did,
    // and we timed out, render the placeholder state.
    var alreadyCaptured = (workInProgress.effectTag & DidCapture) === NoEffect;

    var nextDidTimeout = void 0;
    if (current$$1 !== null && workInProgress.updateQueue !== null) {
      // We're outside strict mode. Something inside this Placeholder boundary
      // suspended during the last commit. Switch to the placholder.
      workInProgress.updateQueue = null;
      nextDidTimeout = true;
      // If we're recovering from an error, reconcile twice: first to delete
      // all the existing children.
      reconcileChildren(current$$1, workInProgress, null, renderExpirationTime);
      current$$1.child = null;
      // Now we can continue reconciling like normal. This has the effect of
      // remounting all children regardless of whether their their
      // identity matches.
    } else {
      nextDidTimeout = !alreadyCaptured;
    }

    if ((workInProgress.mode & StrictMode) !== NoEffect) {
      if (nextDidTimeout) {
        // If the timed-out view commits, schedule an update effect to record
        // the committed time.
        workInProgress.effectTag |= Update;
      } else {
        // The state node points to the time at which placeholder timed out.
        // We can clear it once we switch back to the normal children.
        workInProgress.stateNode = null;
      }
    }

    // If the `children` prop is a function, treat it like a render prop.
    // TODO: This is temporary until we finalize a lower level API.
    var children = nextProps.children;
    var nextChildren = void 0;
    if (typeof children === 'function') {
      nextChildren = children(nextDidTimeout);
    } else {
      nextChildren = nextDidTimeout ? nextProps.fallback : children;
    }

    workInProgress.memoizedProps = nextProps;
    workInProgress.memoizedState = nextDidTimeout;
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    return workInProgress.child;
  } else {
    return null;
  }
}

function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;
  if (current$$1 === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    memoizeProps(workInProgress, nextChildren);
  } else {
    reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
    memoizeProps(workInProgress, nextChildren);
  }
  return workInProgress.child;
}

function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;

  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;

  var newValue = newProps.value;
  workInProgress.memoizedProps = newProps;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);
    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
  var context = workInProgress.type;
  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren = void 0;
  {
    ReactCurrentOwner$3.current = workInProgress;
    setCurrentPhase('render');
    newChildren = render(newValue);
    setCurrentPhase(null);
  }

  // React DevTools reads this flag.
  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
  workInProgress.memoizedProps = newProps;
  return workInProgress.child;
}

/*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current$$1 !== null) {
    // Reuse previous context list
    workInProgress.firstContextDependency = current$$1.firstContextDependency;
  }

  if (enableProfilerTimer) {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning(workInProgress);
  }

  // Check if the children have any pending work.
  var childExpirationTime = workInProgress.childExpirationTime;
  if (childExpirationTime === NoWork || childExpirationTime > renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current$$1, workInProgress);
    return workInProgress.child;
  }
}

// TODO: Delete memoizeProps/State and move to reconcile/bailout instead
function memoizeProps(workInProgress, nextProps) {
  workInProgress.memoizedProps = nextProps;
}

function memoizeState(workInProgress, nextState) {
  workInProgress.memoizedState = nextState;
  // Don't reset the updateQueue, in case there are pending updates. Resetting
  // is handled by processUpdateQueue.
}

function beginWork(current$$1, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;
  if (!hasContextChanged() && (updateExpirationTime === NoWork || updateExpirationTime > renderExpirationTime)) {
    // This fiber does not have any pending work. Bailout without entering
    // the begin phase. There's still some bookkeeping we that needs to be done
    // in this optimized path, mostly pushing stuff onto the stack.
    switch (workInProgress.tag) {
      case HostRoot:
        pushHostRootContext(workInProgress);
        resetHydrationState();
        break;
      case HostComponent:
        pushHostContext(workInProgress);
        break;
      case ClassComponent:
        {
          var Component = workInProgress.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress);
          }
          break;
        }
      case ClassComponentLazy:
        {
          var thenable = workInProgress.type;
          var _Component = getResultFromResolvedThenable(thenable);
          if (isContextProvider(_Component)) {
            pushContextProvider(workInProgress);
          }
          break;
        }
      case HostPortal:
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        break;
      case ContextProvider:
        {
          var newValue = workInProgress.memoizedProps.value;
          pushProvider(workInProgress, newValue);
          break;
        }
      case Profiler:
        if (enableProfilerTimer) {
          workInProgress.effectTag |= Update;
        }
        break;
    }
    return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
  }

  // Before entering the begin phase, clear the expiration time.
  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        var _Component3 = workInProgress.type;
        return mountIndeterminateComponent(current$$1, workInProgress, _Component3, renderExpirationTime);
      }
    case FunctionalComponent:
      {
        var _Component4 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;
        return updateFunctionalComponent(current$$1, workInProgress, _Component4, _unresolvedProps, renderExpirationTime);
      }
    case FunctionalComponentLazy:
      {
        var _thenable2 = workInProgress.type;
        var _Component5 = getResultFromResolvedThenable(_thenable2);
        var _unresolvedProps2 = workInProgress.pendingProps;
        var _child = updateFunctionalComponent(current$$1, workInProgress, _Component5, resolveDefaultProps(_Component5, _unresolvedProps2), renderExpirationTime);
        workInProgress.memoizedProps = _unresolvedProps2;
        return _child;
      }
    case ClassComponent:
      {
        var _Component6 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps;
        return updateClassComponent(current$$1, workInProgress, _Component6, _unresolvedProps3, renderExpirationTime);
      }
    case ClassComponentLazy:
      {
        var _thenable3 = workInProgress.type;
        var _Component7 = getResultFromResolvedThenable(_thenable3);
        var _unresolvedProps4 = workInProgress.pendingProps;
        var _child2 = updateClassComponent(current$$1, workInProgress, _Component7, resolveDefaultProps(_Component7, _unresolvedProps4), renderExpirationTime);
        workInProgress.memoizedProps = _unresolvedProps4;
        return _child2;
      }
    case HostRoot:
      return updateHostRoot(current$$1, workInProgress, renderExpirationTime);
    case HostComponent:
      return updateHostComponent(current$$1, workInProgress, renderExpirationTime);
    case HostText:
      return updateHostText(current$$1, workInProgress);
    case PlaceholderComponent:
      return updatePlaceholderComponent(current$$1, workInProgress, renderExpirationTime);
    case HostPortal:
      return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);
    case ForwardRef:
      {
        var type = workInProgress.type;
        return updateForwardRef(current$$1, workInProgress, type, workInProgress.pendingProps, renderExpirationTime);
      }
    case ForwardRefLazy:
      var _thenable = workInProgress.type;
      var _Component2 = getResultFromResolvedThenable(_thenable);
      var unresolvedProps = workInProgress.pendingProps;
      var child = updateForwardRef(current$$1, workInProgress, _Component2, resolveDefaultProps(_Component2, unresolvedProps), renderExpirationTime);
      workInProgress.memoizedProps = unresolvedProps;
      return child;
    case Fragment:
      return updateFragment(current$$1, workInProgress, renderExpirationTime);
    case Mode:
      return updateMode(current$$1, workInProgress, renderExpirationTime);
    case Profiler:
      return updateProfiler(current$$1, workInProgress, renderExpirationTime);
    case ContextProvider:
      return updateContextProvider(current$$1, workInProgress, renderExpirationTime);
    case ContextConsumer:
      return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

function appendAllChildren(parent, workInProgress) {
  // We only have the top Fiber that was created but we need recurse down its
  // children to find all the terminal nodes.
  var node = workInProgress.child;
  while (node !== null) {
    if (node.tag === HostComponent || node.tag === HostText) {
      appendInitialChild(parent, node.stateNode);
    } else if (node.tag === HostPortal) {
      // If we have a portal child, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === workInProgress) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

var updateHostContainer = void 0;
var updateHostComponent$1 = void 0;
var updateHostText$1 = void 0;
if (supportsMutation) {
  // Mutation mode

  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;
    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    }

    // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.
    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.
    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    // TODO: Type this specific to this type of component.
    workInProgress.updateQueue = updatePayload;
    // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.
    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode

  // An unfortunate fork of appendAllChildren because we have two different parent types.
  var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;
    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendChildToContainerChildSet(containerChildSet, node.stateNode);
      } else if (node.tag === HostPortal) {
        // If we have a portal child, then we don't want to traverse
        // down its children. Instead, we'll get insertions from each child in
        // the portal directly.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
      if (node === workInProgress) {
        return;
      }
      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  };
  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged) {
      // No changes, just reuse the existing instance.
    } else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container);
      // If children might have changed, we have to add them all to the set.
      appendAllChildrenToContainer(newChildSet, workInProgress);
      portalOrRoot.pendingChildren = newChildSet;
      // Schedule an update on the container to swap out the container.
      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps;
    // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.
    var childrenUnchanged = workInProgress.firstEffect === null;
    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;
    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }
    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }
    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }
    workInProgress.stateNode = newInstance;
    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress);
    }
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
      // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.
      markUpdate(workInProgress);
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {
    // Noop
  };
  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // Noop
  };
  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // Noop
  };
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case FunctionalComponent:
    case FunctionalComponentLazy:
      break;
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case ClassComponentLazy:
      {
        var _Component = getResultFromResolvedThenable(workInProgress.type);
        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;
        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }
        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          popHydrationState(workInProgress);
          // This resets the hacky state to fix isMounted before committing.
          // TODO: Delete this when we delete isMounted and findDOMNode.
          workInProgress.effectTag &= ~Placement;
        }
        updateHostContainer(workInProgress);
        break;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;
        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
            break;
          }

          var currentHostContext = getHostContext();
          // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on we want to add then top->down or
          // bottom->up. Top->down is faster in IE11.
          var wasHydrated = popHydrationState(workInProgress);
          if (wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node needs to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);

            appendAllChildren(instance, workInProgress);

            // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.
            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
            workInProgress.stateNode = instance;
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }
        break;
      }
    case HostText:
      {
        var newText = newProps;
        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps;
          // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.
          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            // This can happen when we abort work.
          }
          var _rootContainerInstance = getRootHostContainer();
          var _currentHostContext = getHostContext();
          var _wasHydrated = popHydrationState(workInProgress);
          if (_wasHydrated) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }
        break;
      }
    case ForwardRef:
    case ForwardRefLazy:
      break;
    case PlaceholderComponent:
      break;
    case Fragment:
      break;
    case Mode:
      break;
    case Profiler:
      break;
    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      break;
    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      break;
    case ContextConsumer:
      break;
    // Error cases
    case IndeterminateComponent:
      invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
    // eslint-disable-next-line no-fallthrough
    default:
      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
  }

  return null;
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError) {
  return true;
}

function logCapturedError(capturedError) {
  var logError = showErrorDialog(capturedError);

  // Allow injected showErrorDialog() to prevent default console.error logging.
  // This enables renderers like ReactNative to better manage redbox behavior.
  if (logError === false) {
    return;
  }

  var error = capturedError.error;
  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry;

    // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      }
      // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.
      console.error(error);
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

    var errorBoundaryMessage = void 0;
    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
      } else {
        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }
    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

    // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
    console.error(combinedMessage);
  }
}

var emptyObject = {};

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;
  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current$$1, instance) {
  startPhaseTimer(current$$1, 'componentWillUnmount');
  instance.props = current$$1.memoizedProps;
  instance.state = current$$1.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
};

// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);
    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current$$1, unmountError);
    }
  }
}

function safelyDetachRef(current$$1) {
  var ref = current$$1.ref;
  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);
        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current$$1, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current$$1 !== null) {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode;
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            var snapshot = instance.getSnapshotBeforeUpdate(prevProps, prevState);
            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);
                warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }
            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }
        return;
      }
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
      // Nothing to do for these component types
      return;
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        var instance = finishedWork.stateNode;
        if (finishedWork.effectTag & Update) {
          if (current$$1 === null) {
            startPhaseTimer(finishedWork, 'componentDidMount');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = current$$1.memoizedProps;
            var prevState = current$$1.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate');
            instance.props = finishedWork.memoizedProps;
            instance.state = finishedWork.memoizedState;
            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }
        var updateQueue = finishedWork.updateQueue;
        if (updateQueue !== null) {
          instance.props = finishedWork.memoizedProps;
          instance.state = finishedWork.memoizedState;
          commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
        }
        return;
      }
    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;
        if (_updateQueue !== null) {
          var _instance = null;
          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;
              case ClassComponent:
              case ClassComponentLazy:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }
          commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
        }
        return;
      }
    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode;

        // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.
        if (current$$1 === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }
    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }
    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }
    case Profiler:
      {
        if (enableProfilerTimer) {
          var onRender = finishedWork.memoizedProps.onRender;

          if (enableSchedulerTracing) {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
          } else {
            onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
          }
        }
        return;
      }
    case PlaceholderComponent:
      {
        if (enableSuspense) {
          if ((finishedWork.mode & StrictMode) === NoEffect) {
            // In loose mode, a placeholder times out by scheduling a synchronous
            // update in the commit phase. Use `updateQueue` field to signal that
            // the Timeout needs to switch to the placeholder. We don't need an
            // entire queue. Any non-null value works.
            // $FlowFixMe - Intentionally using a value other than an UpdateQueue.
            finishedWork.updateQueue = emptyObject;
            scheduleWork(finishedWork, Sync);
          } else {
            // In strict mode, the Update effect is used to record the time at
            // which the placeholder timed out.
            var currentTime = requestCurrentTime();
            finishedWork.stateNode = { timedOutAt: currentTime };
          }
        }
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;
  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse = void 0;
    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;
      default:
        instanceToUse = instance;
    }
    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current$$1) {
  var currentRef = current$$1.ref;
  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
}

// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1) {
  onCommitUnmount(current$$1);

  switch (current$$1.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        safelyDetachRef(current$$1);
        var instance = current$$1.stateNode;
        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current$$1, instance);
        }
        return;
      }
    case HostComponent:
      {
        safelyDetachRef(current$$1);
        return;
      }
    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(current$$1);
        } else if (supportsPersistence) {
          emptyPortalContainer(current$$1);
        }
        return;
      }
  }
}

function commitNestedUnmounts(root) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  var node = root;
  while (true) {
    commitUnmount(node);
    // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.
    if (node.child !== null && (
    // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current$$1) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  current$$1.return = null;
  current$$1.child = null;
  if (current$$1.alternate) {
    current$$1.alternate.child = null;
    current$$1.alternate.return = null;
  }
}

function emptyPortalContainer(current$$1) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current$$1.stateNode;
  var containerInfo = portal.containerInfo;

  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        return;
      }
    case HostComponent:
      {
        return;
      }
    case HostText:
      {
        return;
      }
    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            _pendingChildren = portalOrRoot.pendingChildren;

        replaceContainerChildren(containerInfo, _pendingChildren);
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;
  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }
    parent = parent.return;
  }
  invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  var node = fiber;
  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
    while (node.tag !== HostComponent && node.tag !== HostText) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      }
      // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.
      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    }
    // Check if this host node is stable or about to be placed.
    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  }

  // Recursively insert all host nodes into the parent.
  var parentFiber = getHostParentFiber(finishedWork);

  // Note: these two variables *must* always be updated together.
  var parent = void 0;
  var isContainer = void 0;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentFiber.stateNode;
      isContainer = false;
      break;
    case HostRoot:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    case HostPortal:
      parent = parentFiber.stateNode.containerInfo;
      isContainer = true;
      break;
    default:
      invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
  }
  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent);
    // Clear ContentReset from the effect tag
    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork);
  // We only have the top Fiber that was inserted but we need recurse down its
  // children to find all the terminal nodes.
  var node = finishedWork;
  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      if (before) {
        if (isContainer) {
          insertInContainerBefore(parent, node.stateNode, before);
        } else {
          insertBefore(parent, node.stateNode, before);
        }
      } else {
        if (isContainer) {
          appendChildToContainer(parent, node.stateNode);
        } else {
          appendChild(parent, node.stateNode);
        }
      }
    } else if (node.tag === HostPortal) {
      // If the insertion itself is a portal, then we don't want to traverse
      // down its children. Instead, we'll get insertions from each child in
      // the portal directly.
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === finishedWork) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === finishedWork) {
        return;
      }
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function unmountHostComponents(current$$1) {
  // We only have the top Fiber that was deleted but we need recurse down its
  var node = current$$1;

  // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.
  var currentParentIsValid = false;

  // Note: these two variables *must* always be updated together.
  var currentParent = void 0;
  var currentParentIsContainer = void 0;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;
      findParent: while (true) {
        !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        switch (parent.tag) {
          case HostComponent:
            currentParent = parent.stateNode;
            currentParentIsContainer = false;
            break findParent;
          case HostRoot:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
          case HostPortal:
            currentParent = parent.stateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;
        }
        parent = parent.return;
      }
      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(node);
      // After all the children have unmounted, it is now safe to remove the
      // node from the tree.
      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      }
      // Don't visit children because we already visited them.
    } else if (node.tag === HostPortal) {
      // When we go into a portal, it becomes the parent to remove from.
      // We will reassign it back when we pop the portal on the way up.
      currentParent = node.stateNode.containerInfo;
      currentParentIsContainer = true;
      // Visit children because portals might contain host components.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(node);
      // Visit children because we may find more host components below.
      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }
    if (node === current$$1) {
      return;
    }
    while (node.sibling === null) {
      if (node.return === null || node.return === current$$1) {
        return;
      }
      node = node.return;
      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(current$$1) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(current$$1);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(current$$1);
  }
  detachFiber(current$$1);
}

function commitWork(current$$1, finishedWork) {
  if (!supportsMutation) {
    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case ClassComponentLazy:
      {
        return;
      }
    case HostComponent:
      {
        var instance = finishedWork.stateNode;
        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps;
          // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.
          var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
          var type = finishedWork.type;
          // TODO: Type the updateQueue to be specific to host components.
          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;
          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }
        }
        return;
      }
    case HostText:
      {
        !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps;
        // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.
        var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }
    case HostRoot:
      {
        return;
      }
    case Profiler:
      {
        return;
      }
    case PlaceholderComponent:
      {
        return;
      }
    default:
      {
        invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
      }
  }
}

function commitResetTextContent(current$$1) {
  if (!supportsMutation) {
    return;
  }
  resetTextContent(current$$1.stateNode);
}

function NoopComponent() {
  return null;
}

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  // Unmount the root by rendering null.
  update.tag = CaptureUpdate;
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: null };
  var error = errorInfo.value;
  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };
  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime);
  update.tag = CaptureUpdate;
  var getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;
  if (enableGetDerivedStateFromCatch && typeof getDerivedStateFromCatch === 'function') {
    var error = errorInfo.value;
    update.payload = function () {
      return getDerivedStateFromCatch(error);
    };
  }

  var inst = fiber.stateNode;
  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      if (!enableGetDerivedStateFromCatch || getDerivedStateFromCatch !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromCatch is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this);
      }
      var error = errorInfo.value;
      var stack = errorInfo.stack;
      logError(fiber, errorInfo);
      this.componentDidCatch(error, {
        componentStack: stack !== null ? stack : ''
      });
    };
  }
  return update;
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete;
  // Its effect list is no longer valid.
  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (enableSuspense && value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    // Find the earliest timeout threshold of all the placeholders in the
    // ancestor path. We could avoid this traversal by storing the thresholds on
    // the stack, but we choose not to because we only hit this path if we're
    // IO-bound (i.e. if something suspends). Whereas the stack is used even in
    // the non-IO- bound case.
    var _workInProgress = returnFiber;
    var earliestTimeoutMs = -1;
    var startTimeMs = -1;
    do {
      if (_workInProgress.tag === PlaceholderComponent) {
        var current = _workInProgress.alternate;
        if (current !== null && current.memoizedState === true && current.stateNode !== null) {
          // Reached a placeholder that already timed out. Each timed out
          // placeholder acts as the root of a new suspense boundary.

          // Use the time at which the placeholder timed out as the start time
          // for the current render.
          var timedOutAt = current.stateNode.timedOutAt;
          startTimeMs = expirationTimeToMs(timedOutAt);

          // Do not search any further.
          break;
        }
        var timeoutPropMs = _workInProgress.pendingProps.delayMs;
        if (typeof timeoutPropMs === 'number') {
          if (timeoutPropMs <= 0) {
            earliestTimeoutMs = 0;
          } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
            earliestTimeoutMs = timeoutPropMs;
          }
        }
      }
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);

    // Schedule the nearest Placeholder to re-render the timed out view.
    _workInProgress = returnFiber;
    do {
      if (_workInProgress.tag === PlaceholderComponent) {
        var didTimeout = _workInProgress.memoizedState;
        if (!didTimeout) {
          // Found the nearest boundary.

          // If the boundary is not in async mode, we should not suspend, and
          // likewise, when the promise resolves, we should ping synchronously.
          var pingTime = (_workInProgress.mode & AsyncMode) === NoEffect ? Sync : renderExpirationTime;

          // Attach a listener to the promise to "ping" the root and retry.
          var onResolveOrReject = retrySuspendedRoot.bind(null, root, _workInProgress, pingTime);
          thenable.then(onResolveOrReject, onResolveOrReject);

          // If the boundary is outside of strict mode, we should *not* suspend
          // the commit. Pretend as if the suspended component rendered null and
          // keep rendering. In the commit phase, we'll schedule a subsequent
          // synchronous update to re-render the Placeholder.
          //
          // Note: It doesn't matter whether the component that suspended was
          // inside a strict mode tree. If the Placeholder is outside of it, we
          // should *not* suspend the commit.
          if ((_workInProgress.mode & StrictMode) === NoEffect) {
            _workInProgress.effectTag |= Update;

            // Unmount the source fiber's children
            var nextChildren = null;
            reconcileChildren(sourceFiber.alternate, sourceFiber, nextChildren, renderExpirationTime);
            sourceFiber.effectTag &= ~Incomplete;
            if (sourceFiber.tag === IndeterminateComponent) {
              // Let's just assume it's a functional component. This fiber will
              // be unmounted in the immediate next commit, anyway.
              sourceFiber.tag = FunctionalComponent;
            }

            if (sourceFiber.tag === ClassComponent || sourceFiber.tag === ClassComponentLazy) {
              // We're going to commit this fiber even though it didn't
              // complete. But we shouldn't call any lifecycle methods or
              // callbacks. Remove all lifecycle effect tags.
              sourceFiber.effectTag &= ~LifecycleEffectMask;
              if (sourceFiber.alternate === null) {
                // We're about to mount a class component that doesn't have an
                // instance. Turn this into a dummy functional component instead,
                // to prevent type errors. This is a bit weird but it's an edge
                // case and we're about to synchronously delete this
                // component, anyway.
                sourceFiber.tag = FunctionalComponent;
                sourceFiber.type = NoopComponent;
              }
            }

            // Exit without suspending.
            return;
          }

          // Confirmed that the boundary is in a strict mode tree. Continue with
          // the normal suspend path.

          var absoluteTimeoutMs = void 0;
          if (earliestTimeoutMs === -1) {
            // If no explicit threshold is given, default to an abitrarily large
            // value. The actual size doesn't matter because the threshold for the
            // whole tree will be clamped to the expiration time.
            absoluteTimeoutMs = maxSigned31BitInt;
          } else {
            if (startTimeMs === -1) {
              // This suspend happened outside of any already timed-out
              // placeholders. We don't know exactly when the update was scheduled,
              // but we can infer an approximate start time from the expiration
              // time. First, find the earliest uncommitted expiration time in the
              // tree, including work that is suspended. Then subtract the offset
              // used to compute an async update's expiration time. This will cause
              // high priority (interactive) work to expire earlier than necessary,
              // but we can account for this by adjusting for the Just Noticeable
              // Difference.
              var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
              var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
              startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
            }
            absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
          }

          // Mark the earliest timeout in the suspended fiber's ancestor path.
          // After completing the root, we'll take the largest of all the
          // suspended fiber's timeouts and use it to compute a timeout for the
          // whole tree.
          renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);

          _workInProgress.effectTag |= ShouldCapture;
          _workInProgress.expirationTime = renderExpirationTime;
          return;
        }
        // This boundary already captured during this render. Continue to the
        // next boundary.
      }
      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null);
    // No boundary was found. Fallthrough to error mode.
    value = new Error('An update was suspended, but no placeholder UI was provided.');
  }

  // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.
  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;
  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          var update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, update);
          return;
        }
      case ClassComponent:
      case ClassComponentLazy:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;
        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && enableGetDerivedStateFromCatch || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;
          // Schedule the error boundary to re-render using updated state
          var _update = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);
          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }
        break;
      default:
        break;
    }
    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;
        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }
        var effectTag = workInProgress.effectTag;
        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case ClassComponentLazy:
      {
        var _Component = workInProgress.type._reactResult;
        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }
        var _effectTag = workInProgress.effectTag;
        if (_effectTag & ShouldCapture) {
          workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag2 = workInProgress.effectTag;
        !((_effectTag2 & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
        workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
        return workInProgress;
      }
    case HostComponent:
      {
        popHostContext(workInProgress);
        return null;
      }
    case PlaceholderComponent:
      {
        var _effectTag3 = workInProgress.effectTag;
        if (_effectTag3 & ShouldCapture) {
          workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture;
          return workInProgress;
        }
        return null;
      }
    case HostPortal:
      popHostContainer(workInProgress);
      return null;
    case ContextProvider:
      popProvider(workInProgress);
      return null;
    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;
        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }
        break;
      }
    case ClassComponentLazy:
      {
        var _childContextTypes = interruptedWork.type._reactResult.childContextTypes;
        if (_childContextTypes !== null && _childContextTypes !== undefined) {
          popContext(interruptedWork);
        }
        break;
      }
    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }
    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }
    case HostPortal:
      popHostContainer(interruptedWork);
      break;
    case ContextProvider:
      popProvider(interruptedWork);
      break;
    default:
      break;
  }
}

var Dispatcher = {
  readContext: readContext
};

var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;


var didWarnAboutStateTransition = void 0;
var didWarnSetStateChildContext = void 0;
var warnAboutUpdateOnUnmounted = void 0;
var warnAboutInvalidUpdates = void 0;

if (enableSchedulerTracing) {
  // Provide explicit error message when production+profiling bundle of e.g. react-dom
  // is used with production (non-profiling) bundle of schedule/tracing
  !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `schedule/tracing` module with `schedule/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
}

{
  didWarnAboutStateTransition = false;
  didWarnSetStateChildContext = false;
  var didWarnStateUpdateForUnmountedComponent = {};

  warnAboutUpdateOnUnmounted = function (fiber) {
    // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.
    var componentName = getComponentName(fiber.type) || 'ReactClass';
    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
      return;
    }
    warningWithoutStack$1(false, "Can't call setState (or forceUpdate) on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', getStackByFiberInDevAndProd(fiber));
    didWarnStateUpdateForUnmountedComponent[componentName] = true;
  };

  warnAboutInvalidUpdates = function (instance) {
    switch (phase) {
      case 'getChildContext':
        if (didWarnSetStateChildContext) {
          return;
        }
        warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
        didWarnSetStateChildContext = true;
        break;
      case 'render':
        if (didWarnAboutStateTransition) {
          return;
        }
        warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
        didWarnAboutStateTransition = true;
        break;
    }
  };
}

// Used to ensure computeUniqueAsyncExpiration is monotonically increasing.
var lastUniqueAsyncExpiration = 0;

// Represents the expiration time that incoming updates should use. (If this
// is NoWork, use the default strategy: async updates in async mode, sync
// updates in sync mode.)
var expirationContext = NoWork;

var isWorking = false;

// The next work in progress fiber that we're currently working on.
var nextUnitOfWork = null;
var nextRoot = null;
// The time at which we're currently rendering work.
var nextRenderExpirationTime = NoWork;
var nextLatestAbsoluteTimeoutMs = -1;
var nextRenderDidError = false;

// The next fiber with an effect that we're currently committing.
var nextEffect = null;

var isCommitting$1 = false;

var legacyErrorBoundariesThatAlreadyFailed = null;

// Used for performance tracking.
var interruptedBy = null;

// Do not decrement interaction counts in the event of suspense timeouts.
// This would lead to prematurely calling the interaction-complete hook.
var suspenseDidTimeout = false;

var stashedWorkInProgressProperties = void 0;
var replayUnitOfWork = void 0;
var isReplayingFailedUnitOfWork = void 0;
var originalReplayError = void 0;
var rethrowOriginalError = void 0;
if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
  stashedWorkInProgressProperties = null;
  isReplayingFailedUnitOfWork = false;
  originalReplayError = null;
  replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
      // Don't replay promises. Treat everything else like an error.
      // TODO: Need to figure out a different strategy if/when we add
      // support for catching other types.
      return;
    }

    // Restore the original state of the work-in-progress
    if (stashedWorkInProgressProperties === null) {
      // This should never happen. Don't throw because this code is DEV-only.
      warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
      return;
    }
    assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

    switch (failedUnitOfWork.tag) {
      case HostRoot:
        popHostContainer(failedUnitOfWork);
        popTopLevelContextObject(failedUnitOfWork);
        break;
      case HostComponent:
        popHostContext(failedUnitOfWork);
        break;
      case ClassComponent:
        {
          var Component = failedUnitOfWork.type;
          if (isContextProvider(Component)) {
            popContext(failedUnitOfWork);
          }
          break;
        }
      case ClassComponentLazy:
        {
          var _Component = getResultFromResolvedThenable(failedUnitOfWork.type);
          if (isContextProvider(_Component)) {
            popContext(failedUnitOfWork);
          }
          break;
        }
      case HostPortal:
        popHostContainer(failedUnitOfWork);
        break;
      case ContextProvider:
        popProvider(failedUnitOfWork);
        break;
    }
    // Replay the begin phase.
    isReplayingFailedUnitOfWork = true;
    originalReplayError = thrownValue;
    invokeGuardedCallback(null, workLoop, null, isYieldy);
    isReplayingFailedUnitOfWork = false;
    originalReplayError = null;
    if (hasCaughtError()) {
      var replayError = clearCaughtError();
      if (replayError != null && thrownValue != null) {
        try {
          // Reading the expando property is intentionally
          // inside `try` because it might be a getter or Proxy.
          if (replayError._suppressLogging) {
            // Also suppress logging for the original error.
            thrownValue._suppressLogging = true;
          }
        } catch (inner) {
          // Ignore.
        }
      }
    } else {
      // If the begin phase did not fail the second time, set this pointer
      // back to the original value.
      nextUnitOfWork = failedUnitOfWork;
    }
  };
  rethrowOriginalError = function () {
    throw originalReplayError;
  };
}

function resetStack() {
  if (nextUnitOfWork !== null) {
    var interruptedWork = nextUnitOfWork.return;
    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
    checkThatStackIsEmpty();
  }

  nextRoot = null;
  nextRenderExpirationTime = NoWork;
  nextLatestAbsoluteTimeoutMs = -1;
  nextRenderDidError = false;
  nextUnitOfWork = null;
}

function commitAllHostEffects() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }
    recordEffect();

    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current$$1 = nextEffect.alternate;
      if (current$$1 !== null) {
        commitDetachRef(current$$1);
      }
    }

    // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every
    // possible bitmap value, we remove the secondary effects from the
    // effect tag and switch on that value.
    var primaryEffectTag = effectTag & (Placement | Update | Deletion);
    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted
          // does and isMounted is deprecated anyway so we should be able
          // to kill this.
          nextEffect.effectTag &= ~Placement;
          break;
        }
      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect);
          // Clear the "placement" from effect tag so that we know that this is inserted, before
          // any life-cycles like componentDidMount gets called.
          nextEffect.effectTag &= ~Placement;

          // Update
          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }
      case Update:
        {
          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }
      case Deletion:
        {
          commitDeletion(nextEffect);
          break;
        }
    }
    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitBeforeMutationLifecycles() {
  while (nextEffect !== null) {
    {
      setCurrentFiber(nextEffect);
    }

    var effectTag = nextEffect.effectTag;
    if (effectTag & Snapshot) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current$$1, nextEffect);
    }

    // Don't cleanup effects yet;
    // This will be done by commitAllLifeCycles()
    nextEffect = nextEffect.nextEffect;
  }

  {
    resetCurrentFiber();
  }
}

function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
  {
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();

    if (warnAboutDeprecatedLifecycles) {
      ReactStrictModeWarnings.flushPendingDeprecationWarnings();
    }

    if (warnAboutLegacyContextAPI) {
      ReactStrictModeWarnings.flushLegacyContextWarning();
    }
  }
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current$$1 = nextEffect.alternate;
      commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    var next = nextEffect.nextEffect;
    // Ensure that we clean these up so that we don't accidentally keep them.
    // I'm not actually sure this matters because we can't reset firstEffect
    // and lastEffect since they're on every node, not just the effectful
    // ones. So we have to clean everything as we reuse nodes anyway.
    nextEffect.nextEffect = null;
    // Ensure that we reset the effectTag here so that we can rely on effect
    // tags to reason about the current life-cycle.
    nextEffect = next;
  }
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}

function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function commitRoot(root, finishedWork) {
  isWorking = true;
  isCommitting$1 = true;
  startCommitTimer();

  !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  var committedExpirationTime = root.pendingCommitExpirationTime;
  !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  root.pendingCommitExpirationTime = NoWork;

  // Update the pending priority levels to account for the work that we are
  // about to commit. This needs to happen before calling the lifecycles, since
  // they may schedule additional updates.
  var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
  var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeBeforeCommit = updateExpirationTimeBeforeCommit === NoWork || childExpirationTimeBeforeCommit !== NoWork && childExpirationTimeBeforeCommit < updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
  markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);

  var prevInteractions = null;
  var committedInteractions = enableSchedulerTracing ? [] : null;
  if (enableSchedulerTracing) {
    // Restore any pending interactions at this point,
    // So that cascading work triggered during the render phase will be accounted for.
    prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;

    // We are potentially finished with the current batch of interactions.
    // So we should clear them out of the pending interaction map.
    // We do this at the start of commit in case cascading work is scheduled by commit phase lifecycles.
    // In that event, interaction data may be added back into the pending map for a future commit.
    // We also store the interactions we are about to commit so that we can notify subscribers after we're done.
    // These are stored as an Array rather than a Set,
    // Because the same interaction may be pending for multiple expiration times,
    // In which case it's important that we decrement the count the right number of times after finishing.
    root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      if (scheduledExpirationTime <= committedExpirationTime) {
        committedInteractions.push.apply(committedInteractions, Array.from(scheduledInteractions));
        root.pendingInteractionMap.delete(scheduledExpirationTime);
      }
    });
  }

  // Reset this to null before calling lifecycles
  ReactCurrentOwner$2.current = null;

  var firstEffect = void 0;
  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if
    // it had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  prepareForCommit(root.containerInfo);

  // Invoke instances of getSnapshotBeforeUpdate before mutation.
  nextEffect = firstEffect;
  startCommitSnapshotEffectsTimer();
  while (nextEffect !== null) {
    var didError = false;
    var error = void 0;
    {
      invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);
      if (hasCaughtError()) {
        didError = true;
        error = clearCaughtError();
      }
    }
    if (didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitSnapshotEffectsTimer();

  if (enableProfilerTimer) {
    // Mark the current commit time to be shared by all Profilers in this batch.
    // This enables them to be grouped later.
    recordCommitTime();
  }

  // Commit all the side-effects within a tree. We'll do this in two passes.
  // The first pass performs all the host insertions, updates, deletions and
  // ref unmounts.
  nextEffect = firstEffect;
  startCommitHostEffectsTimer();
  while (nextEffect !== null) {
    var _didError = false;
    var _error = void 0;
    {
      invokeGuardedCallback(null, commitAllHostEffects, null);
      if (hasCaughtError()) {
        _didError = true;
        _error = clearCaughtError();
      }
    }
    if (_didError) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error);
      // Clean-up
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }
  stopCommitHostEffectsTimer();

  resetAfterCommit(root.containerInfo);

  // The work-in-progress tree is now the current tree. This must come after
  // the first pass of the commit phase, so that the previous tree is still
  // current during componentWillUnmount, but before the second pass, so that
  // the finished work is current during componentDidMount/Update.
  root.current = finishedWork;

  // In the second pass we'll perform all life-cycles and ref callbacks.
  // Life-cycles happen as a separate pass so that all placements, updates,
  // and deletions in the entire tree have already been invoked.
  // This pass also triggers any renderer-specific initial effects.
  nextEffect = firstEffect;
  startCommitLifeCyclesTimer();
  while (nextEffect !== null) {
    var _didError2 = false;
    var _error2 = void 0;
    {
      invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);
      if (hasCaughtError()) {
        _didError2 = true;
        _error2 = clearCaughtError();
      }
    }
    if (_didError2) {
      !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      captureCommitPhaseError(nextEffect, _error2);
      if (nextEffect !== null) {
        nextEffect = nextEffect.nextEffect;
      }
    }
  }

  isCommitting$1 = false;
  isWorking = false;
  stopCommitLifeCyclesTimer();
  stopCommitTimer();
  onCommitRoot(finishedWork.stateNode);
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
  }

  var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
  var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
  var earliestRemainingTimeAfterCommit = updateExpirationTimeAfterCommit === NoWork || childExpirationTimeAfterCommit !== NoWork && childExpirationTimeAfterCommit < updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;
  if (earliestRemainingTimeAfterCommit === NoWork) {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }
  onCommit(root, earliestRemainingTimeAfterCommit);

  if (enableSchedulerTracing) {
    tracing.__interactionsRef.current = prevInteractions;

    var subscriber = void 0;

    try {
      subscriber = tracing.__subscriberRef.current;
      if (subscriber !== null && root.memoizedInteractions.size > 0) {
        var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
      }
    } catch (error) {
      // It's not safe for commitRoot() to throw.
      // Store the error for now and we'll re-throw in finishRendering().
      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } finally {
      // Don't update interaction counts if we're frozen due to suspense.
      // In this case, we can skip the completed-work check entirely.
      if (!suspenseDidTimeout) {
        // Now that we're done, check the completed batch of interactions.
        // If no more work is outstanding for a given interaction,
        // We need to notify the subscribers that it's finished.
        committedInteractions.forEach(function (interaction) {
          interaction.__count--;
          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // It's not safe for commitRoot() to throw.
              // Store the error for now and we'll re-throw in finishRendering().
              if (!hasUnhandledError) {
                hasUnhandledError = true;
                unhandledError = error;
              }
            }
          }
        });
      }
    }
  }
}

function resetChildExpirationTime(workInProgress, renderTime) {
  if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork;

  // Bubble up the earliest expiration time.
  if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
    // We're in profiling mode.
    // Let's use this same traversal to update the render durations.
    var actualDuration = workInProgress.actualDuration;
    var treeBaseDuration = workInProgress.selfBaseDuration;

    // When a fiber is cloned, its actualDuration is reset to 0.
    // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration.
    // If the fiber has not been cloned though, (meaning no work was done),
    // Then this value will reflect the amount of time spent working on a previous render.
    // In that case it should not bubble.
    // We determine whether it was cloned by comparing the child pointer.
    var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;

    var child = workInProgress.child;
    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;
      if (newChildExpirationTime === NoWork || childUpdateExpirationTime !== NoWork && childUpdateExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }
      if (newChildExpirationTime === NoWork || childChildExpirationTime !== NoWork && childChildExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }
      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }
      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }
    workInProgress.actualDuration = actualDuration;
    workInProgress.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = workInProgress.child;
    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;
      if (newChildExpirationTime === NoWork || _childUpdateExpirationTime !== NoWork && _childUpdateExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }
      if (newChildExpirationTime === NoWork || _childChildExpirationTime !== NoWork && _childChildExpirationTime < newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }
      _child = _child.sibling;
    }
  }

  workInProgress.childExpirationTime = newChildExpirationTime;
}

function completeUnitOfWork(workInProgress) {
  // Attempt to complete the current unit of work, then move to the
  // next sibling. If there are no more siblings, return to the
  // parent fiber.
  while (true) {
    // The current, flushed, state of this fiber is the alternate.
    // Ideally nothing should rely on this, but relying on it here
    // means that we don't need an additional field on the work in
    // progress.
    var current$$1 = workInProgress.alternate;
    {
      setCurrentFiber(workInProgress);
    }

    var returnFiber = workInProgress.return;
    var siblingFiber = workInProgress.sibling;

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      // This fiber completed.
      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

        if (workInProgress.mode & ProfileMode) {
          // Update render duration assuming we didn't error.
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
        }
      } else {
        nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
      }
      var next = nextUnitOfWork;
      stopWorkTimer(workInProgress);
      resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
      {
        resetCurrentFiber();
      }

      if (next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        return next;
      }

      if (returnFiber !== null &&
      // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }
        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }
          returnFiber.lastEffect = workInProgress.lastEffect;
        }

        // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if
        // needed, by doing multiple passes over the effect list. We don't want
        // to schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.
        var effectTag = workInProgress.effectTag;
        // Skip both NoWork and PerformedWork tags when creating the effect list.
        // PerformedWork effect is read by React DevTools but shouldn't be committed.
        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }
          returnFiber.lastEffect = workInProgress;
        }
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        // We've reached the root.
        return null;
      }
    } else {
      if (workInProgress.mode & ProfileMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress, nextRenderExpirationTime);
      // Because this fiber did not complete, don't reset its expiration time.
      if (workInProgress.effectTag & DidCapture) {
        // Restarting an error boundary
        stopFailedWorkTimer(workInProgress);
      } else {
        stopWorkTimer(workInProgress);
      }

      {
        resetCurrentFiber();
      }

      if (_next !== null) {
        stopWorkTimer(workInProgress);
        if (true && ReactFiberInstrumentation_1.debugTool) {
          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
        }

        if (enableProfilerTimer) {
          // Include the time spent working on failed children before continuing.
          if (_next.mode & ProfileMode) {
            var actualDuration = _next.actualDuration;
            var child = _next.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            _next.actualDuration = actualDuration;
          }
        }

        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }

      if (true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
      }

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        return siblingFiber;
      } else if (returnFiber !== null) {
        // If there's no more work in this returnFiber. Complete the returnFiber.
        workInProgress = returnFiber;
        continue;
      } else {
        return null;
      }
    }
  }

  // Without this explicit null return Flow complains of invalid return type
  // TODO Remove the above while(true) loop
  // eslint-disable-next-line no-unreachable
  return null;
}

function performUnitOfWork(workInProgress) {
  // The current, flushed, state of this fiber is the alternate.
  // Ideally nothing should rely on this, but relying on it here
  // means that we don't need an additional field on the work in
  // progress.
  var current$$1 = workInProgress.alternate;

  // See if beginning this work spawns more work.
  startWorkTimer(workInProgress);
  {
    setCurrentFiber(workInProgress);
  }

  if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
    stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
  }

  var next = void 0;
  if (enableProfilerTimer) {
    if (workInProgress.mode & ProfileMode) {
      startProfilerTimer(workInProgress);
    }

    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);

    if (workInProgress.mode & ProfileMode) {
      // Record the render duration assuming we didn't bailout (or error).
      stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
    }
  } else {
    next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
  }

  {
    resetCurrentFiber();
    if (isReplayingFailedUnitOfWork) {
      // Currently replaying a failed unit of work. This should be unreachable,
      // because the render phase is meant to be idempotent, and it should
      // have thrown again. Since it didn't, rethrow the original error, so
      // React's internal stack is not misaligned.
      rethrowOriginalError();
    }
  }
  if (true && ReactFiberInstrumentation_1.debugTool) {
    ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
  }

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(workInProgress);
  }

  ReactCurrentOwner$2.current = null;

  return next;
}

function workLoop(isYieldy) {
  if (!isYieldy) {
    // Flush work without yielding
    while (nextUnitOfWork !== null) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  } else {
    // Flush asynchronous work until the deadline runs out of time.
    while (nextUnitOfWork !== null && !shouldYield()) {
      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    }
  }
}

function renderRoot(root, isYieldy, isExpired) {
  !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  isWorking = true;
  ReactCurrentOwner$2.currentDispatcher = Dispatcher;

  var expirationTime = root.nextExpirationTimeToWorkOn;

  var prevInteractions = null;
  if (enableSchedulerTracing) {
    // We're about to start new traced work.
    // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
    prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
  }

  // Check if we're starting from a fresh stack, or if we're resuming from
  // previously yielded work.
  if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
    // Reset the stack and start working from the root.
    resetStack();
    nextRoot = root;
    nextRenderExpirationTime = expirationTime;
    nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
    root.pendingCommitExpirationTime = NoWork;

    if (enableSchedulerTracing) {
      // Determine which interactions this batch of work currently includes,
      // So that we can accurately attribute time spent working on it,
      var interactions = new Set();
      root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
        if (scheduledExpirationTime <= expirationTime) {
          scheduledInteractions.forEach(function (interaction) {
            return interactions.add(interaction);
          });
        }
      });

      // Store the current set of interactions on the FiberRoot for a few reasons:
      // We can re-use it in hot functions like renderRoot() without having to recalculate it.
      // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
      // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
      root.memoizedInteractions = interactions;

      if (interactions.size > 0) {
        var subscriber = tracing.__subscriberRef.current;
        if (subscriber !== null) {
          var threadID = computeThreadID(expirationTime, root.interactionThreadID);
          try {
            subscriber.onWorkStarted(interactions, threadID);
          } catch (error) {
            // Work thrown by an interaction tracing subscriber should be rethrown,
            // But only once it's safe (to avoid leaveing the scheduler in an invalid state).
            // Store the error for now and we'll re-throw in finishRendering().
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }
    }
  }

  var didFatal = false;

  startWorkLoopTimer(nextUnitOfWork);

  do {
    try {
      workLoop(isYieldy);
    } catch (thrownValue) {
      if (nextUnitOfWork === null) {
        // This is a fatal error.
        didFatal = true;
        onUncaughtError(thrownValue);
      } else {
        {
          // Reset global debug state
          // We assume this is defined in DEV
          resetCurrentlyProcessingQueue();
        }

        var failedUnitOfWork = nextUnitOfWork;
        if (true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
          replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
        }

        // TODO: we already know this isn't true in some cases.
        // At least this shows a nicer error message until we figure out the cause.
        // https://github.com/facebook/react/issues/12449#issuecomment-386727431
        !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;

        var sourceFiber = nextUnitOfWork;
        var returnFiber = sourceFiber.return;
        if (returnFiber === null) {
          // This is the root. The root could capture its own errors. However,
          // we don't know if it errors before or after we pushed the host
          // context. This information is needed to avoid a stack mismatch.
          // Because we're not sure, treat this as a fatal error. We could track
          // which phase it fails in, but doesn't seem worth it. At least
          // for now.
          didFatal = true;
          onUncaughtError(thrownValue);
        } else {
          throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
          nextUnitOfWork = completeUnitOfWork(sourceFiber);
          continue;
        }
      }
    }
    break;
  } while (true);

  if (enableSchedulerTracing) {
    // Traced work is done for now; restore the previous interactions.
    tracing.__interactionsRef.current = prevInteractions;
  }

  // We're done performing work. Time to clean up.
  isWorking = false;
  ReactCurrentOwner$2.currentDispatcher = null;
  resetContextDependences();

  // Yield back to main thread.
  if (didFatal) {
    var _didCompleteRoot = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
    interruptedBy = null;
    // There was a fatal error.
    {
      resetStackAfterFatalErrorInDev();
    }
    // `nextRoot` points to the in-progress root. A non-null value indicates
    // that we're in the middle of an async render. Set it to null to indicate
    // there's no more work to be done in the current batch.
    nextRoot = null;
    onFatal(root);
    return;
  }

  if (nextUnitOfWork !== null) {
    // There's still remaining async work in this tree, but we ran out of time
    // in the current frame. Yield back to the renderer. Unless we're
    // interrupted by a higher priority update, we'll continue later from where
    // we left off.
    var _didCompleteRoot2 = false;
    stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
    interruptedBy = null;
    onYield(root);
    return;
  }

  // We completed the whole tree.
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  var rootWorkInProgress = root.current.alternate;
  !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  // `nextRoot` points to the in-progress root. A non-null value indicates
  // that we're in the middle of an async render. Set it to null to indicate
  // there's no more work to be done in the current batch.
  nextRoot = null;
  interruptedBy = null;

  if (nextRenderDidError) {
    // There was an error
    if (hasLowerPriorityWork(root, expirationTime)) {
      // There's lower priority work. If so, it may have the effect of fixing
      // the exception that was just thrown. Exit without committing. This is
      // similar to a suspend, but without a timeout because we're not waiting
      // for a promise to resolve. React will restart at the lower
      // priority level.
      markSuspendedPriorityLevel(root, expirationTime);
      var suspendedExpirationTime = expirationTime;
      var rootExpirationTime = root.expirationTime;
      onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    } else if (
    // There's no lower priority work, but we're rendering asynchronously.
    // Synchronsouly attempt to render the same level one more time. This is
    // similar to a suspend, but without a timeout because we're not waiting
    // for a promise to resolve.
    !root.didError && !isExpired) {
      root.didError = true;
      var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;
      var _rootExpirationTime = root.expirationTime = Sync;
      onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
      );
      return;
    }
  }

  if (enableSuspense && !isExpired && nextLatestAbsoluteTimeoutMs !== -1) {
    // The tree was suspended.
    var _suspendedExpirationTime2 = expirationTime;
    markSuspendedPriorityLevel(root, _suspendedExpirationTime2);

    // Find the earliest uncommitted expiration time in the tree, including
    // work that is suspended. The timeout threshold cannot be longer than
    // the overall expiration.
    var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
    var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
    if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
      nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
    }

    // Subtract the current time from the absolute timeout to get the number
    // of milliseconds until the timeout. In other words, convert an absolute
    // timestamp to a relative time. This is the value that is passed
    // to `setTimeout`.
    var currentTimeMs = expirationTimeToMs(requestCurrentTime());
    var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
    msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout;

    // TODO: Account for the Just Noticeable Difference

    var _rootExpirationTime2 = root.expirationTime;
    onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
    return;
  }

  // Ready to commit.
  onComplete(root, rootWorkInProgress, expirationTime);
}

function dispatch(sourceFiber, value, expirationTime) {
  !(!isWorking || isCommitting$1) ? invariant(false, 'dispatch: Cannot dispatch during the render phase.') : void 0;

  var fiber = sourceFiber.return;
  while (fiber !== null) {
    switch (fiber.tag) {
      case ClassComponent:
      case ClassComponentLazy:
        var ctor = fiber.type;
        var instance = fiber.stateNode;
        if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(value, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
          enqueueUpdate(fiber, update);
          scheduleWork(fiber, expirationTime);
          return;
        }
        break;
      case HostRoot:
        {
          var _errorInfo = createCapturedValue(value, sourceFiber);
          var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);
          enqueueUpdate(fiber, _update);
          scheduleWork(fiber, expirationTime);
          return;
        }
    }
    fiber = fiber.return;
  }

  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    var rootFiber = sourceFiber;
    var _errorInfo2 = createCapturedValue(value, rootFiber);
    var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);
    enqueueUpdate(rootFiber, _update2);
    scheduleWork(rootFiber, expirationTime);
  }
}

function captureCommitPhaseError(fiber, error) {
  return dispatch(fiber, error, Sync);
}

function computeThreadID(expirationTime, interactionThreadID) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + interactionThreadID;
}

// Creates a unique async expiration time.
function computeUniqueAsyncExpiration() {
  var currentTime = requestCurrentTime();
  var result = computeAsyncExpiration(currentTime);
  if (result <= lastUniqueAsyncExpiration) {
    // Since we assume the current time monotonically increases, we only hit
    // this branch when computeUniqueAsyncExpiration is fired multiple times
    // within a 200ms window (or whatever the async bucket size is).
    result = lastUniqueAsyncExpiration + 1;
  }
  lastUniqueAsyncExpiration = result;
  return lastUniqueAsyncExpiration;
}

function computeExpirationForFiber(currentTime, fiber) {
  var expirationTime = void 0;
  if (expirationContext !== NoWork) {
    // An explicit expiration context was set;
    expirationTime = expirationContext;
  } else if (isWorking) {
    if (isCommitting$1) {
      // Updates that occur during the commit phase should have sync priority
      // by default.
      expirationTime = Sync;
    } else {
      // Updates during the render phase should expire at the same time as
      // the work that is being rendered.
      expirationTime = nextRenderExpirationTime;
    }
  } else {
    // No explicit expiration context was set, and we're not currently
    // performing work. Calculate a new expiration time.
    if (fiber.mode & AsyncMode) {
      if (isBatchingInteractiveUpdates) {
        // This is an interactive update
        expirationTime = computeInteractiveExpiration(currentTime);
      } else {
        // This is an async update
        expirationTime = computeAsyncExpiration(currentTime);
      }
      // If we're in the middle of rendering a tree, do not update at the same
      // expiration time that is already rendering.
      if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
        expirationTime += 1;
      }
    } else {
      // This is a sync update
      expirationTime = Sync;
    }
  }
  if (isBatchingInteractiveUpdates) {
    // This is an interactive update. Keep track of the lowest pending
    // interactive expiration time. This allows us to synchronously flush
    // all interactive updates when needed.
    if (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime > lowestPriorityPendingInteractiveExpirationTime) {
      lowestPriorityPendingInteractiveExpirationTime = expirationTime;
    }
  }
  return expirationTime;
}

function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
  // Schedule the timeout.
  if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
    nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
  }
}

function renderDidError() {
  nextRenderDidError = true;
}

function retrySuspendedRoot(root, fiber, suspendedTime) {
  if (enableSuspense) {
    var retryTime = void 0;

    if (isPriorityLevelSuspended(root, suspendedTime)) {
      // Ping at the original level
      retryTime = suspendedTime;
      markPingedPriorityLevel(root, retryTime);
    } else {
      // Placeholder already timed out. Compute a new expiration time
      var currentTime = requestCurrentTime();
      retryTime = computeExpirationForFiber(currentTime, fiber);
      markPendingPriorityLevel(root, retryTime);
    }

    scheduleWorkToRoot(fiber, retryTime);
    var rootExpirationTime = root.expirationTime;
    if (rootExpirationTime !== NoWork) {
      if (enableSchedulerTracing) {
        // Restore previous interactions so that new work is associated with them.
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
        // Because suspense timeouts do not decrement the interaction count,
        // Continued suspense work should also not increment the count.
        storeInteractionsForExpirationTime(root, rootExpirationTime, false);
        requestWork(root, rootExpirationTime);
        tracing.__interactionsRef.current = prevInteractions;
      } else {
        requestWork(root, rootExpirationTime);
      }
    }
  }
}

function scheduleWorkToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime === NoWork || fiber.expirationTime > expirationTime) {
    fiber.expirationTime = expirationTime;
  }
  var alternate = fiber.alternate;
  if (alternate !== null && (alternate.expirationTime === NoWork || alternate.expirationTime > expirationTime)) {
    alternate.expirationTime = expirationTime;
  }
  // Walk the parent path to the root and update the child expiration time.
  var node = fiber.return;
  if (node === null && fiber.tag === HostRoot) {
    return fiber.stateNode;
  }
  while (node !== null) {
    alternate = node.alternate;
    if (node.childExpirationTime === NoWork || node.childExpirationTime > expirationTime) {
      node.childExpirationTime = expirationTime;
      if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
        alternate.childExpirationTime = expirationTime;
      }
    } else if (alternate !== null && (alternate.childExpirationTime === NoWork || alternate.childExpirationTime > expirationTime)) {
      alternate.childExpirationTime = expirationTime;
    }
    if (node.return === null && node.tag === HostRoot) {
      return node.stateNode;
    }
    node = node.return;
  }
  return null;
}

function storeInteractionsForExpirationTime(root, expirationTime, updateInteractionCounts) {
  if (!enableSchedulerTracing) {
    return;
  }

  var interactions = tracing.__interactionsRef.current;
  if (interactions.size > 0) {
    var pendingInteractions = root.pendingInteractionMap.get(expirationTime);
    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (updateInteractionCounts && !pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      root.pendingInteractionMap.set(expirationTime, new Set(interactions));

      // Update the pending async work count for the current interactions.
      if (updateInteractionCounts) {
        interactions.forEach(function (interaction) {
          interaction.__count++;
        });
      }
    }

    var subscriber = tracing.__subscriberRef.current;
    if (subscriber !== null) {
      var threadID = computeThreadID(expirationTime, root.interactionThreadID);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function scheduleWork(fiber, expirationTime) {
  recordScheduleUpdate();

  {
    if (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy) {
      var instance = fiber.stateNode;
      warnAboutInvalidUpdates(instance);
    }
  }

  var root = scheduleWorkToRoot(fiber, expirationTime);
  if (root === null) {
    if (true && (fiber.tag === ClassComponent || fiber.tag === ClassComponentLazy)) {
      warnAboutUpdateOnUnmounted(fiber);
    }
    return;
  }

  if (enableSchedulerTracing) {
    storeInteractionsForExpirationTime(root, expirationTime, true);
  }

  if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime < nextRenderExpirationTime) {
    // This is an interruption. (Used for performance tracking.)
    interruptedBy = fiber;
    resetStack();
  }
  markPendingPriorityLevel(root, expirationTime);
  if (
  // If we're in the render phase, we don't need to schedule this root
  // for an update, because we'll do it before we exit...
  !isWorking || isCommitting$1 ||
  // ...unless this is a different root than the one we're rendering.
  nextRoot !== root) {
    var rootExpirationTime = root.expirationTime;
    requestWork(root, rootExpirationTime);
  }
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    // Reset this back to zero so subsequent updates don't throw.
    nestedUpdateCount = 0;
    invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
  }
}

function syncUpdates(fn, a, b, c, d) {
  var previousExpirationContext = expirationContext;
  expirationContext = Sync;
  try {
    return fn(a, b, c, d);
  } finally {
    expirationContext = previousExpirationContext;
  }
}

// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.

// Linked-list of roots
var firstScheduledRoot = null;
var lastScheduledRoot = null;

var callbackExpirationTime = NoWork;
var callbackID = void 0;
var isRendering = false;
var nextFlushedRoot = null;
var nextFlushedExpirationTime = NoWork;
var lowestPriorityPendingInteractiveExpirationTime = NoWork;
var deadlineDidExpire = false;
var hasUnhandledError = false;
var unhandledError = null;
var deadline = null;

var isBatchingUpdates = false;
var isUnbatchingUpdates = false;
var isBatchingInteractiveUpdates = false;

var completedBatches = null;

var originalStartTimeMs = schedule.unstable_now();
var currentRendererTime = msToExpirationTime(originalStartTimeMs);
var currentSchedulerTime = currentRendererTime;

// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var lastCommittedRootDuringThisBatch = null;

var timeHeuristicForUnitOfWork = 1;

function recomputeCurrentRendererTime() {
  var currentTimeMs = schedule.unstable_now() - originalStartTimeMs;
  currentRendererTime = msToExpirationTime(currentTimeMs);
}

function scheduleCallbackWithExpirationTime(root, expirationTime) {
  if (callbackExpirationTime !== NoWork) {
    // A callback is already scheduled. Check its expiration time (timeout).
    if (expirationTime > callbackExpirationTime) {
      // Existing callback has sufficient timeout. Exit.
      return;
    } else {
      if (callbackID !== null) {
        // Existing callback has insufficient timeout. Cancel and schedule a
        // new one.
        schedule.unstable_cancelScheduledWork(callbackID);
      }
    }
    // The request callback timer is already running. Don't start a new one.
  } else {
    startRequestCallbackTimer();
  }

  callbackExpirationTime = expirationTime;
  var currentMs = schedule.unstable_now() - originalStartTimeMs;
  var expirationTimeMs = expirationTimeToMs(expirationTime);
  var timeout = expirationTimeMs - currentMs;
  callbackID = schedule.unstable_scheduleWork(performAsyncWork, { timeout: timeout });
}

// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root) {
  root.finishedWork = null;
}

function onComplete(root, finishedWork, expirationTime) {
  root.pendingCommitExpirationTime = expirationTime;
  root.finishedWork = finishedWork;
}

function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
  root.expirationTime = rootExpirationTime;
  if (enableSuspense && msUntilTimeout === 0 && !shouldYield()) {
    // Don't wait an additional tick. Commit the tree immediately.
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
  } else if (msUntilTimeout > 0) {
    // Wait `msUntilTimeout` milliseconds before committing.
    root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
  }
}

function onYield(root) {
  root.finishedWork = null;
}

function onTimeout(root, finishedWork, suspendedExpirationTime) {
  if (enableSuspense) {
    // The root timed out. Commit it.
    root.pendingCommitExpirationTime = suspendedExpirationTime;
    root.finishedWork = finishedWork;
    // Read the current time before entering the commit phase. We can be
    // certain this won't cause tearing related to batching of event updates
    // because we're at the top of a timer event.
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;

    if (enableSchedulerTracing) {
      // Don't update pending interaction counts for suspense timeouts,
      // Because we know we still need to do more work in this case.
      suspenseDidTimeout = true;
      flushRoot(root, suspendedExpirationTime);
      suspenseDidTimeout = false;
    } else {
      flushRoot(root, suspendedExpirationTime);
    }
  }
}

function onCommit(root, expirationTime) {
  root.expirationTime = expirationTime;
  root.finishedWork = null;
}

function requestCurrentTime() {
  // requestCurrentTime is called by the scheduler to compute an expiration
  // time.
  //
  // Expiration times are computed by adding to the current time (the start
  // time). However, if two updates are scheduled within the same event, we
  // should treat their start times as simultaneous, even if the actual clock
  // time has advanced between the first and second call.

  // In other words, because expiration times determine how updates are batched,
  // we want all updates of like priority that occur within the same event to
  // receive the same expiration time. Otherwise we get tearing.
  //
  // We keep track of two separate times: the current "renderer" time and the
  // current "scheduler" time. The renderer time can be updated whenever; it
  // only exists to minimize the calls performance.now.
  //
  // But the scheduler time can only be updated if there's no pending work, or
  // if we know for certain that we're not in the middle of an event.

  if (isRendering) {
    // We're already rendering. Return the most recently read time.
    return currentSchedulerTime;
  }
  // Check if there's pending work.
  findHighestPriorityRoot();
  if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
    // If there's no pending work, or if the pending work is offscreen, we can
    // read the current time without risk of tearing.
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;
    return currentSchedulerTime;
  }
  // There's already pending work. We might be in the middle of a browser
  // event. If we were to read the current time, it could cause multiple updates
  // within the same event to receive different expiration times, leading to
  // tearing. Return the last read time. During the next idle callback, the
  // time will be updated.
  return currentSchedulerTime;
}

// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root, expirationTime) {
  addRootToSchedule(root, expirationTime);
  if (isRendering) {
    // Prevent reentrancy. Remaining work will be scheduled at the end of
    // the currently rendering batch.
    return;
  }

  if (isBatchingUpdates) {
    // Flush work at the end of the batch.
    if (isUnbatchingUpdates) {
      // ...unless we're inside unbatchedUpdates, in which case we should
      // flush it now.
      nextFlushedRoot = root;
      nextFlushedExpirationTime = Sync;
      performWorkOnRoot(root, Sync, true);
    }
    return;
  }

  // TODO: Get rid of Sync and use current time?
  if (expirationTime === Sync) {
    performSyncWork();
  } else {
    scheduleCallbackWithExpirationTime(root, expirationTime);
  }
}

function addRootToSchedule(root, expirationTime) {
  // Add the root to the schedule.
  // Check if this root is already part of the schedule.
  if (root.nextScheduledRoot === null) {
    // This root is not already scheduled. Add it.
    root.expirationTime = expirationTime;
    if (lastScheduledRoot === null) {
      firstScheduledRoot = lastScheduledRoot = root;
      root.nextScheduledRoot = root;
    } else {
      lastScheduledRoot.nextScheduledRoot = root;
      lastScheduledRoot = root;
      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
    }
  } else {
    // This root is already scheduled, but its priority may have increased.
    var remainingExpirationTime = root.expirationTime;
    if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
      // Update the priority.
      root.expirationTime = expirationTime;
    }
  }
}

function findHighestPriorityRoot() {
  var highestPriorityWork = NoWork;
  var highestPriorityRoot = null;
  if (lastScheduledRoot !== null) {
    var previousScheduledRoot = lastScheduledRoot;
    var root = firstScheduledRoot;
    while (root !== null) {
      var remainingExpirationTime = root.expirationTime;
      if (remainingExpirationTime === NoWork) {
        // This root no longer has work. Remove it from the scheduler.

        // TODO: This check is redudant, but Flow is confused by the branch
        // below where we set lastScheduledRoot to null, even though we break
        // from the loop right after.
        !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        if (root === root.nextScheduledRoot) {
          // This is the only root in the list.
          root.nextScheduledRoot = null;
          firstScheduledRoot = lastScheduledRoot = null;
          break;
        } else if (root === firstScheduledRoot) {
          // This is the first root in the list.
          var next = root.nextScheduledRoot;
          firstScheduledRoot = next;
          lastScheduledRoot.nextScheduledRoot = next;
          root.nextScheduledRoot = null;
        } else if (root === lastScheduledRoot) {
          // This is the last root in the list.
          lastScheduledRoot = previousScheduledRoot;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
          root.nextScheduledRoot = null;
          break;
        } else {
          previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
          root.nextScheduledRoot = null;
        }
        root = previousScheduledRoot.nextScheduledRoot;
      } else {
        if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
          // Update the priority, if it's higher
          highestPriorityWork = remainingExpirationTime;
          highestPriorityRoot = root;
        }
        if (root === lastScheduledRoot) {
          break;
        }
        if (highestPriorityWork === Sync) {
          // Sync is highest priority by definition so
          // we can stop searching.
          break;
        }
        previousScheduledRoot = root;
        root = root.nextScheduledRoot;
      }
    }
  }

  nextFlushedRoot = highestPriorityRoot;
  nextFlushedExpirationTime = highestPriorityWork;
}

function performAsyncWork(dl) {
  if (dl.didTimeout) {
    // The callback timed out. That means at least one update has expired.
    // Iterate through the root schedule. If they contain expired work, set
    // the next render expiration time to the current time. This has the effect
    // of flushing all expired work in a single batch, instead of flushing each
    // level one at a time.
    if (firstScheduledRoot !== null) {
      recomputeCurrentRendererTime();
      var root = firstScheduledRoot;
      do {
        didExpireAtExpirationTime(root, currentRendererTime);
        // The root schedule is circular, so this is never null.
        root = root.nextScheduledRoot;
      } while (root !== firstScheduledRoot);
    }
  }
  performWork(NoWork, dl);
}

function performSyncWork() {
  performWork(Sync, null);
}

function performWork(minExpirationTime, dl) {
  deadline = dl;

  // Keep working on roots until there's no more work, or until we reach
  // the deadline.
  findHighestPriorityRoot();

  if (deadline !== null) {
    recomputeCurrentRendererTime();
    currentSchedulerTime = currentRendererTime;

    if (enableUserTimingAPI) {
      var didExpire = nextFlushedExpirationTime < currentRendererTime;
      var timeout = expirationTimeToMs(nextFlushedExpirationTime);
      stopRequestCallbackTimer(didExpire, timeout);
    }

    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || currentRendererTime >= nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime >= nextFlushedExpirationTime);
      findHighestPriorityRoot();
      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
    }
  } else {
    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || minExpirationTime >= nextFlushedExpirationTime)) {
      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, true);
      findHighestPriorityRoot();
    }
  }

  // We're done flushing work. Either we ran out of time in this callback,
  // or there's no more work left with sufficient priority.

  // If we're inside a callback, set this to false since we just completed it.
  if (deadline !== null) {
    callbackExpirationTime = NoWork;
    callbackID = null;
  }
  // If there's work left over, schedule a new callback.
  if (nextFlushedExpirationTime !== NoWork) {
    scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
  }

  // Clean-up.
  deadline = null;
  deadlineDidExpire = false;

  finishRendering();
}

function flushRoot(root, expirationTime) {
  !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0;
  // Perform work on root as if the given expiration time is the current time.
  // This has the effect of synchronously flushing all work up to and
  // including the given time.
  nextFlushedRoot = root;
  nextFlushedExpirationTime = expirationTime;
  performWorkOnRoot(root, expirationTime, true);
  // Flush any sync work that was scheduled by lifecycles
  performSyncWork();
}

function finishRendering() {
  nestedUpdateCount = 0;
  lastCommittedRootDuringThisBatch = null;

  if (completedBatches !== null) {
    var batches = completedBatches;
    completedBatches = null;
    for (var i = 0; i < batches.length; i++) {
      var batch = batches[i];
      try {
        batch._onComplete();
      } catch (error) {
        if (!hasUnhandledError) {
          hasUnhandledError = true;
          unhandledError = error;
        }
      }
    }
  }

  if (hasUnhandledError) {
    var error = unhandledError;
    unhandledError = null;
    hasUnhandledError = false;
    throw error;
  }
}

function performWorkOnRoot(root, expirationTime, isExpired) {
  !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

  isRendering = true;

  // Check if this is async work or sync/expired work.
  if (deadline === null || isExpired) {
    // Flush work without yielding.
    // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
    // may want to perform some work without yielding, but also without
    // requiring the root to complete (by triggering placeholders).

    var finishedWork = root.finishedWork;
    if (finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var timeoutHandle = root.timeoutHandle;
      if (enableSuspense && timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(timeoutHandle);
      }
      var isYieldy = false;
      renderRoot(root, isYieldy, isExpired);
      finishedWork = root.finishedWork;
      if (finishedWork !== null) {
        // We've completed the root. Commit it.
        completeRoot(root, finishedWork, expirationTime);
      }
    }
  } else {
    // Flush async work.
    var _finishedWork = root.finishedWork;
    if (_finishedWork !== null) {
      // This root is already complete. We can commit it.
      completeRoot(root, _finishedWork, expirationTime);
    } else {
      root.finishedWork = null;
      // If this root previously suspended, clear its existing timeout, since
      // we're about to try rendering again.
      var _timeoutHandle = root.timeoutHandle;
      if (enableSuspense && _timeoutHandle !== noTimeout) {
        root.timeoutHandle = noTimeout;
        // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
        cancelTimeout(_timeoutHandle);
      }
      var _isYieldy = true;
      renderRoot(root, _isYieldy, isExpired);
      _finishedWork = root.finishedWork;
      if (_finishedWork !== null) {
        // We've completed the root. Check the deadline one more time
        // before committing.
        if (!shouldYield()) {
          // Still time left. Commit the root.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          // There's no time left. Mark this root as complete. We'll come
          // back and commit it later.
          root.finishedWork = _finishedWork;
        }
      }
    }
  }

  isRendering = false;
}

function completeRoot(root, finishedWork, expirationTime) {
  // Check if there's a batch that matches this expiration time.
  var firstBatch = root.firstBatch;
  if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {
    if (completedBatches === null) {
      completedBatches = [firstBatch];
    } else {
      completedBatches.push(firstBatch);
    }
    if (firstBatch._defer) {
      // This root is blocked from committing by a batch. Unschedule it until
      // we receive another update.
      root.finishedWork = finishedWork;
      root.expirationTime = NoWork;
      return;
    }
  }

  // Commit the root.
  root.finishedWork = null;

  // Check if this is a nested update (a sync update scheduled during the
  // commit phase).
  if (root === lastCommittedRootDuringThisBatch) {
    // If the next root is the same as the previous root, this is a nested
    // update. To prevent an infinite loop, increment the nested update count.
    nestedUpdateCount++;
  } else {
    // Reset whenever we switch roots.
    lastCommittedRootDuringThisBatch = root;
    nestedUpdateCount = 0;
  }
  commitRoot(root, finishedWork);
}

// When working on async work, the reconciler asks the renderer if it should
// yield execution. For DOM, we implement this with requestIdleCallback.
function shouldYield() {
  if (deadlineDidExpire) {
    return true;
  }
  if (deadline === null || deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
    // Disregard deadline.didTimeout. Only expired work should be flushed
    // during a timeout. This path is only hit for non-expired work.
    return false;
  }
  deadlineDidExpire = true;
  return true;
}

function onUncaughtError(error) {
  !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
  // Unschedule this root so we don't work on it again until there's
  // another update.
  nextFlushedRoot.expirationTime = NoWork;
  if (!hasUnhandledError) {
    hasUnhandledError = true;
    unhandledError = error;
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn, a) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return fn(a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn, a) {
  if (isBatchingUpdates && !isUnbatchingUpdates) {
    isUnbatchingUpdates = true;
    try {
      return fn(a);
    } finally {
      isUnbatchingUpdates = false;
    }
  }
  return fn(a);
}

// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn, a) {
  !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    return syncUpdates(fn, a);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    performSyncWork();
  }
}

function interactiveUpdates$1(fn, a, b) {
  if (isBatchingInteractiveUpdates) {
    return fn(a, b);
  }
  // If there are any pending interactive updates, synchronously flush them.
  // This needs to happen before we read any handlers, because the effect of
  // the previous event may influence which handlers are called during
  // this event.
  if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, null);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
  var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingInteractiveUpdates = true;
  isBatchingUpdates = true;
  try {
    return fn(a, b);
  } finally {
    isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

function flushInteractiveUpdates$1() {
  if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
    // Synchronously flush pending interactive updates.
    performWork(lowestPriorityPendingInteractiveExpirationTime, null);
    lowestPriorityPendingInteractiveExpirationTime = NoWork;
  }
}

function flushControlled(fn) {
  var previousIsBatchingUpdates = isBatchingUpdates;
  isBatchingUpdates = true;
  try {
    syncUpdates(fn);
  } finally {
    isBatchingUpdates = previousIsBatchingUpdates;
    if (!isBatchingUpdates && !isRendering) {
      performSyncWork();
    }
  }
}

// 0 is PROD, 1 is DEV.
// Might add PROFILE later.


var didWarnAboutNestedUpdates = void 0;

{
  didWarnAboutNestedUpdates = false;
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;
    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  } else if (fiber.tag === ClassComponentLazy) {
    var _Component = getResultFromResolvedThenable(fiber.type);
    if (isContextProvider(_Component)) {
      return processChildContext(fiber, _Component, parentContext);
    }
  }

  return parentContext;
}

function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
  {
    if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;
      warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime);
  // Caution: React DevTools currently depends on this property
  // being called "element".
  update.payload = { element: element };

  callback = callback === undefined ? null : callback;
  if (callback !== null) {
    !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
    update.callback = callback;
  }
  enqueueUpdate(current$$1, update);

  scheduleWork(current$$1, expirationTime);
  return expirationTime;
}

function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
  // TODO: If this is a nested container, this won't be the root.
  var current$$1 = container.current;

  {
    if (ReactFiberInstrumentation_1.debugTool) {
      if (current$$1.alternate === null) {
        ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
      } else if (element === null) {
        ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
      } else {
        ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
      }
    }
  }

  var context = getContextForSubtree(parentComponent);
  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  return scheduleRootUpdate(current$$1, element, expirationTime, callback);
}

function findHostInstance(component) {
  var fiber = get(component);
  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      invariant(false, 'Unable to find node on an unmounted component.');
    } else {
      invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
    }
  }
  var hostFiber = findCurrentHostFiber(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function createContainer(containerInfo, isAsync, hydrate) {
  return createFiberRoot(containerInfo, isAsync, hydrate);
}

function updateContainer(element, container, parentComponent, callback) {
  var current$$1 = container.current;
  var currentTime = requestCurrentTime();
  var expirationTime = computeExpirationForFiber(currentTime, current$$1);
  return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
}

function getPublicRootInstance(container) {
  var containerFiber = container.current;
  if (!containerFiber.child) {
    return null;
  }
  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);
    default:
      return containerFiber.child.stateNode;
  }
}

function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
  if (hostFiber === null) {
    return null;
  }
  return hostFiber.stateNode;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

  return injectInternals(_assign({}, devToolsConfig, {
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }
      return findFiberByHostInstance(instance);
    }
  }));
}

// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.

function createPortal$1(children, containerInfo,
// TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.5.2';

// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;

var topLevelUpdateWarnings = void 0;
var warnOnInvalidCallback = void 0;
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' ||
  // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }

  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
      if (hostInstance) {
        !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

    !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
  };

  warnOnInvalidCallback = function (callback, callerName) {
    !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
  };
}

setRestoreImplementation(restoreControlledState$1);

/* eslint-disable no-use-before-define */

/* eslint-enable no-use-before-define */

function ReactBatch(root) {
  var expirationTime = computeUniqueAsyncExpiration();
  this._expirationTime = expirationTime;
  this._root = root;
  this._next = null;
  this._callbacks = null;
  this._didComplete = false;
  this._hasChildren = false;
  this._children = null;
  this._defer = true;
}
ReactBatch.prototype.render = function (children) {
  !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
  this._hasChildren = true;
  this._children = children;
  var internalRoot = this._root._internalRoot;
  var expirationTime = this._expirationTime;
  var work = new ReactWork();
  updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
  return work;
};
ReactBatch.prototype.then = function (onComplete) {
  if (this._didComplete) {
    onComplete();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onComplete);
};
ReactBatch.prototype.commit = function () {
  var internalRoot = this._root._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

  if (!this._hasChildren) {
    // This batch is empty. Return.
    this._next = null;
    this._defer = false;
    return;
  }

  var expirationTime = this._expirationTime;

  // Ensure this is the first batch in the list.
  if (firstBatch !== this) {
    // This batch is not the earliest batch. We need to move it to the front.
    // Update its expiration time to be the expiration time of the earliest
    // batch, so that we can flush it without flushing the other batches.
    if (this._hasChildren) {
      expirationTime = this._expirationTime = firstBatch._expirationTime;
      // Rendering this batch again ensures its children will be the final state
      // when we flush (updates are processed in insertion order: last
      // update wins).
      // TODO: This forces a restart. Should we print a warning?
      this.render(this._children);
    }

    // Remove the batch from the list.
    var previous = null;
    var batch = firstBatch;
    while (batch !== this) {
      previous = batch;
      batch = batch._next;
    }
    !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
    previous._next = batch._next;

    // Add it to the front.
    this._next = firstBatch;
    firstBatch = internalRoot.firstBatch = this;
  }

  // Synchronously flush all the work up to this batch's expiration time.
  this._defer = false;
  flushRoot(internalRoot, expirationTime);

  // Pop the batch from the list.
  var next = this._next;
  this._next = null;
  firstBatch = internalRoot.firstBatch = next;

  // Append the next earliest batch's children to the update queue.
  if (firstBatch !== null && firstBatch._hasChildren) {
    firstBatch.render(firstBatch._children);
  }
};
ReactBatch.prototype._onComplete = function () {
  if (this._didComplete) {
    return;
  }
  this._didComplete = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback = callbacks[i];
    _callback();
  }
};

function ReactWork() {
  this._callbacks = null;
  this._didCommit = false;
  // TODO: Avoid need to bind by replacing callbacks in the update queue with
  // list of Work objects.
  this._onCommit = this._onCommit.bind(this);
}
ReactWork.prototype.then = function (onCommit) {
  if (this._didCommit) {
    onCommit();
    return;
  }
  var callbacks = this._callbacks;
  if (callbacks === null) {
    callbacks = this._callbacks = [];
  }
  callbacks.push(onCommit);
};
ReactWork.prototype._onCommit = function () {
  if (this._didCommit) {
    return;
  }
  this._didCommit = true;
  var callbacks = this._callbacks;
  if (callbacks === null) {
    return;
  }
  // TODO: Error handling.
  for (var i = 0; i < callbacks.length; i++) {
    var _callback2 = callbacks[i];
    !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;
    _callback2();
  }
};

function ReactRoot(container, isAsync, hydrate) {
  var root = createContainer(container, isAsync, hydrate);
  this._internalRoot = root;
}
ReactRoot.prototype.render = function (children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.unmount = function (callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(null, root, null, work._onCommit);
  return work;
};
ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
  var root = this._internalRoot;
  var work = new ReactWork();
  callback = callback === undefined ? null : callback;
  {
    warnOnInvalidCallback(callback, 'render');
  }
  if (callback !== null) {
    work.then(callback);
  }
  updateContainer(children, root, parentComponent, work._onCommit);
  return work;
};
ReactRoot.prototype.createBatch = function () {
  var batch = new ReactBatch(this);
  var expirationTime = batch._expirationTime;

  var internalRoot = this._internalRoot;
  var firstBatch = internalRoot.firstBatch;
  if (firstBatch === null) {
    internalRoot.firstBatch = batch;
    batch._next = null;
  } else {
    // Insert sorted by expiration time then insertion order
    var insertAfter = null;
    var insertBefore = firstBatch;
    while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {
      insertAfter = insertBefore;
      insertBefore = insertBefore._next;
    }
    batch._next = insertBefore;
    if (insertAfter !== null) {
      insertAfter._next = batch;
    }
  }

  return batch;
};

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);

var warnedAboutHydrateAPI = false;

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
  // First clear any existing content.
  if (!shouldHydrate) {
    var warned = false;
    var rootSibling = void 0;
    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;
          warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }
      container.removeChild(rootSibling);
    }
  }
  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;
      lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }
  // Legacy roots are not async by default.
  var isAsync = false;
  return new ReactRoot(container, isAsync, shouldHydrate);
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  // TODO: Ensure all entry points contain this check
  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

  {
    topLevelUpdateWarnings(container);
  }

  // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.
  var root = container._reactRootContainer;
  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    if (typeof callback === 'function') {
      var originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        originalCallback.call(instance);
      };
    }
    // Initial mount should not be batched.
    unbatchedUpdates(function () {
      if (parentComponent != null) {
        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
      } else {
        root.render(children, callback);
      }
    });
  } else {
    if (typeof callback === 'function') {
      var _originalCallback = callback;
      callback = function () {
        var instance = getPublicRootInstance(root._internalRoot);
        _originalCallback.call(instance);
      };
    }
    // Update
    if (parentComponent != null) {
      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
    } else {
      root.render(children, callback);
    }
  }
  return getPublicRootInstance(root._internalRoot);
}

function createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
  // TODO: pass ReactDOM portal implementation as third argument
  return createPortal$1(children, container, null, key);
}

var ReactDOM = {
  createPortal: createPortal,

  findDOMNode: function (componentOrElement) {
    {
      var owner = ReactCurrentOwner.current;
      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
        !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }
    if (componentOrElement == null) {
      return null;
    }
    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    return findHostInstance(componentOrElement);
  },
  hydrate: function (element, container, callback) {
    // TODO: throw or warn if we couldn't hydrate?
    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  },
  render: function (element, container, callback) {
    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  },
  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  },
  unmountComponentAtNode: function (container) {
    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
        !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
      }

      // Unmount should not be batched.
      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          container._reactRootContainer = null;
        });
      });
      // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?
      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

        // Check if the container itself is a React root node.
        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
  },


  // Temporary alias since we already shipped React 16 RC with it.
  // TODO: remove in React 17.
  unstable_createPortal: function () {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;
      lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
    return createPortal.apply(undefined, arguments);
  },


  unstable_batchedUpdates: batchedUpdates$1,

  unstable_interactiveUpdates: interactiveUpdates$1,

  flushSync: flushSync,

  unstable_flushControlled: flushControlled,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    // Keep in sync with ReactDOMUnstableNativeDependencies.js
    // and ReactTestUtils.js. This is an array for better minification.
    Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
  }
};

ReactDOM.unstable_createRoot = function createRoot(container, options) {
  !isValidContainer(container) ? invariant(false, 'unstable_createRoot(...): Target container is not a DOM element.') : void 0;
  var hydrate = options != null && options.hydrate === true;
  return new ReactRoot(container, true, hydrate);
};

var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType: 1,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol;
      // Don't warn in exotic cases like chrome-extension://.
      if (/^(https?|file):$/.test(protocol)) {
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}



var ReactDOM$2 = Object.freeze({
	default: ReactDOM
});

var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom = ReactDOM$3.default || ReactDOM$3;

module.exports = reactDom;
  })();
}

}).call(this,require('_process'))
},{"_process":366,"object-assign":365,"prop-types/checkPropTypes":367,"react":378,"schedule":384,"schedule/tracing":385}],373:[function(require,module,exports){
/** @license React v16.5.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
'use strict';var aa=require("react"),n=require("object-assign"),ba=require("schedule");function ca(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[c,d,e,f,g,h],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
function t(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ca(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c)}aa?void 0:t("227");function da(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}
var ea=!1,fa=null,ha=!1,ia=null,ja={onError:function(a){ea=!0;fa=a}};function ka(a,b,c,d,e,f,g,h,k){ea=!1;fa=null;da.apply(ja,arguments)}function la(a,b,c,d,e,f,g,h,k){ka.apply(this,arguments);if(ea){if(ea){var l=fa;ea=!1;fa=null}else t("198"),l=void 0;ha||(ha=!0,ia=l)}}var ma=null,na={};
function oa(){if(ma)for(var a in na){var b=na[a],c=ma.indexOf(a);-1<c?void 0:t("96",a);if(!pa[c]){b.extractEvents?void 0:t("97",a);pa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.hasOwnProperty(h)?t("99",h):void 0;qa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:t("98",d,a)}}}}
function ra(a,b,c){sa[a]?t("100",a):void 0;sa[a]=b;ta[a]=b.eventTypes[c].dependencies}var pa=[],qa={},sa={},ta={},ua=null,va=null,wa=null;function xa(a,b,c,d){b=a.type||"unknown-event";a.currentTarget=wa(d);la(b,c,void 0,a);a.currentTarget=null}function ya(a,b){null==b?t("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
function za(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Aa=null;function Ba(a,b){if(a){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)xa(a,b,c[e],d[e]);else c&&xa(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function Ca(a){return Ba(a,!0)}function Da(a){return Ba(a,!1)}
var Ea={injectEventPluginOrder:function(a){ma?t("101"):void 0;ma=Array.prototype.slice.call(a);oa()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];na.hasOwnProperty(c)&&na[c]===d||(na[c]?t("102",c):void 0,na[c]=d,b=!0)}b&&oa()}};
function Fa(a,b){var c=a.stateNode;if(!c)return null;var d=ua(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;c&&"function"!==typeof c?t("231",b,typeof c):void 0;
return c}function Ga(a,b){null!==a&&(Aa=ya(Aa,a));a=Aa;Aa=null;if(a&&(b?za(a,Ca):za(a,Da),Aa?t("95"):void 0,ha))throw b=ia,ha=!1,ia=null,b;}var Ha=Math.random().toString(36).slice(2),Ia="__reactInternalInstance$"+Ha,Ja="__reactEventHandlers$"+Ha;function Ka(a){if(a[Ia])return a[Ia];for(;!a[Ia];)if(a.parentNode)a=a.parentNode;else return null;a=a[Ia];return 7===a.tag||8===a.tag?a:null}function La(a){a=a[Ia];return!a||7!==a.tag&&8!==a.tag?null:a}
function Ma(a){if(7===a.tag||8===a.tag)return a.stateNode;t("33")}function Na(a){return a[Ja]||null}function Oa(a){do a=a.return;while(a&&7!==a.tag);return a?a:null}function Pa(a,b,c){if(b=Fa(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a)}
function Qa(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Oa(b);for(b=c.length;0<b--;)Pa(c[b],"captured",a);for(b=0;b<c.length;b++)Pa(c[b],"bubbled",a)}}function Ra(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Fa(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a))}function Ta(a){a&&a.dispatchConfig.registrationName&&Ra(a._targetInst,null,a)}
function Ua(a){za(a,Qa)}var Va=!("undefined"===typeof window||!window.document||!window.document.createElement);function Wa(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ya={animationend:Wa("Animation","AnimationEnd"),animationiteration:Wa("Animation","AnimationIteration"),animationstart:Wa("Animation","AnimationStart"),transitionend:Wa("Transition","TransitionEnd")},Za={},$a={};
Va&&($a=document.createElement("div").style,"AnimationEvent"in window||(delete Ya.animationend.animation,delete Ya.animationiteration.animation,delete Ya.animationstart.animation),"TransitionEvent"in window||delete Ya.transitionend.transition);function ab(a){if(Za[a])return Za[a];if(!Ya[a])return a;var b=Ya[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in $a)return Za[a]=b[c];return a}
var bb=ab("animationend"),cb=ab("animationiteration"),db=ab("animationstart"),eb=ab("transitionend"),fb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),gb=null,hb=null,ib=null;
function jb(){if(ib)return ib;var a,b=hb,c=b.length,d,e="value"in gb?gb.value:gb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return ib=e.slice(a,1<d?1-d:void 0)}function kb(){return!0}function lb(){return!1}
function z(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?kb:lb;this.isPropagationStopped=lb;return this}
n(z.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=kb)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=kb)},persist:function(){this.isPersistent=kb},isPersistent:lb,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=lb;this._dispatchInstances=this._dispatchListeners=null}});z.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
z.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;mb(c);return c};mb(z);function nb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function ob(a){a instanceof this?void 0:t("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}
function mb(a){a.eventPool=[];a.getPooled=nb;a.release=ob}var pb=z.extend({data:null}),qb=z.extend({data:null}),rb=[9,13,27,32],sb=Va&&"CompositionEvent"in window,tb=null;Va&&"documentMode"in document&&(tb=document.documentMode);
var ub=Va&&"TextEvent"in window&&!tb,vb=Va&&(!sb||tb&&8<tb&&11>=tb),wb=String.fromCharCode(32),xb={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},yb=!1;
function zb(a,b){switch(a){case "keyup":return-1!==rb.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function Ab(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var Bb=!1;function Cb(a,b){switch(a){case "compositionend":return Ab(b);case "keypress":if(32!==b.which)return null;yb=!0;return wb;case "textInput":return a=b.data,a===wb&&yb?null:a;default:return null}}
function Db(a,b){if(Bb)return"compositionend"===a||!sb&&zb(a,b)?(a=jb(),ib=hb=gb=null,Bb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return vb&&"ko"!==b.locale?null:b.data;default:return null}}
var Eb={eventTypes:xb,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(sb)b:{switch(a){case "compositionstart":e=xb.compositionStart;break b;case "compositionend":e=xb.compositionEnd;break b;case "compositionupdate":e=xb.compositionUpdate;break b}e=void 0}else Bb?zb(a,c)&&(e=xb.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=xb.compositionStart);e?(vb&&"ko"!==c.locale&&(Bb||e!==xb.compositionStart?e===xb.compositionEnd&&Bb&&(f=jb()):(gb=d,hb="value"in gb?gb.value:gb.textContent,Bb=
!0)),e=pb.getPooled(e,b,c,d),f?e.data=f:(f=Ab(c),null!==f&&(e.data=f)),Ua(e),f=e):f=null;(a=ub?Cb(a,c):Db(a,c))?(b=qb.getPooled(xb.beforeInput,b,c,d),b.data=a,Ua(b)):b=null;return null===f?b:null===b?f:[f,b]}},Fb=null,Gb=null,Hb=null;function Ib(a){if(a=va(a)){"function"!==typeof Fb?t("280"):void 0;var b=ua(a.stateNode);Fb(a.stateNode,a.type,b)}}function Jb(a){Gb?Hb?Hb.push(a):Hb=[a]:Gb=a}function Kb(){if(Gb){var a=Gb,b=Hb;Hb=Gb=null;Ib(a);if(b)for(a=0;a<b.length;a++)Ib(b[a])}}
function Lb(a,b){return a(b)}function Mb(a,b,c){return a(b,c)}function Nb(){}var Ob=!1;function Pb(a,b){if(Ob)return a(b);Ob=!0;try{return Lb(a,b)}finally{if(Ob=!1,null!==Gb||null!==Hb)Nb(),Kb()}}var Qb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Rb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!Qb[a.type]:"textarea"===b?!0:!1}
function Sb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Tb(a){if(!Va)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Ub(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function Vb(a){var b=Ub(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function Wb(a){a._valueTracker||(a._valueTracker=Vb(a))}function Xb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ub(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
var Yb=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Zb=/^(.*)[\\\/]/,C="function"===typeof Symbol&&Symbol.for,$b=C?Symbol.for("react.element"):60103,ac=C?Symbol.for("react.portal"):60106,bc=C?Symbol.for("react.fragment"):60107,cc=C?Symbol.for("react.strict_mode"):60108,dc=C?Symbol.for("react.profiler"):60114,ec=C?Symbol.for("react.provider"):60109,fc=C?Symbol.for("react.context"):60110,gc=C?Symbol.for("react.async_mode"):60111,hc=C?Symbol.for("react.forward_ref"):60112,ic=C?Symbol.for("react.placeholder"):
60113,jc="function"===typeof Symbol&&Symbol.iterator;function kc(a){if(null===a||"object"!==typeof a)return null;a=jc&&a[jc]||a["@@iterator"];return"function"===typeof a?a:null}
function lc(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case gc:return"AsyncMode";case bc:return"Fragment";case ac:return"Portal";case dc:return"Profiler";case cc:return"StrictMode";case ic:return"Placeholder"}if("object"===typeof a){switch(a.$$typeof){case fc:return"Context.Consumer";case ec:return"Context.Provider";case hc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef")}if("function"===typeof a.then&&(a=1===a._reactStatus?a._reactResult:null))return lc(a)}return null}function mc(a){var b="";do{a:switch(a.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var c=a._debugOwner,d=a._debugSource,e=lc(a.type);var f=null;c&&(f=lc(c.type));c=e;e="";d?e=" (at "+d.fileName.replace(Zb,"")+":"+d.lineNumber+")":f&&(e=" (created by "+f+")");f="\n    in "+(c||"Unknown")+e;break a;default:f=""}b+=f;a=a.return}while(a);return b}
var nc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pc=Object.prototype.hasOwnProperty,qc={},rc={};
function sc(a){if(pc.call(rc,a))return!0;if(pc.call(qc,a))return!1;if(nc.test(a))return rc[a]=!0;qc[a]=!0;return!1}function tc(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function uc(a,b,c,d){if(null===b||"undefined"===typeof b||tc(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function D(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b}var E={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){E[a]=new D(a,0,!1,a,null)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];E[b]=new D(b,1,!1,a[1],null)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){E[a]=new D(a,2,!1,a.toLowerCase(),null)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){E[a]=new D(a,2,!1,a,null)});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){E[a]=new D(a,3,!1,a.toLowerCase(),null)});["checked","multiple","muted","selected"].forEach(function(a){E[a]=new D(a,3,!0,a,null)});
["capture","download"].forEach(function(a){E[a]=new D(a,4,!1,a,null)});["cols","rows","size","span"].forEach(function(a){E[a]=new D(a,6,!1,a,null)});["rowSpan","start"].forEach(function(a){E[a]=new D(a,5,!1,a.toLowerCase(),null)});var vc=/[\-:]([a-z])/g;function wc(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(vc,
wc);E[b]=new D(b,1,!1,a,null)});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(vc,wc);E[b]=new D(b,1,!1,a,"http://www.w3.org/1999/xlink")});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(vc,wc);E[b]=new D(b,1,!1,a,"http://www.w3.org/XML/1998/namespace")});E.tabIndex=new D("tabIndex",1,!1,"tabindex",null);
function xc(a,b,c,d){var e=E.hasOwnProperty(b)?E[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(uc(b,c,e,d)&&(c=null),d||null===e?sc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
function yc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function zc(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Bc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=yc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Cc(a,b){b=b.checked;null!=b&&xc(a,"checked",b,!1)}
function Dc(a,b){Cc(a,b);var c=yc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ec(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ec(a,b.type,yc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Fc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Ec(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}var Gc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Hc(a,b,c){a=z.getPooled(Gc.change,a,b,c);a.type="change";Jb(c);Ua(a);return a}var Ic=null,Jc=null;function Kc(a){Ga(a,!1)}
function Lc(a){var b=Ma(a);if(Xb(b))return a}function Mc(a,b){if("change"===a)return b}var Nc=!1;Va&&(Nc=Tb("input")&&(!document.documentMode||9<document.documentMode));function Oc(){Ic&&(Ic.detachEvent("onpropertychange",Pc),Jc=Ic=null)}function Pc(a){"value"===a.propertyName&&Lc(Jc)&&(a=Hc(Jc,a,Sb(a)),Pb(Kc,a))}function Qc(a,b,c){"focus"===a?(Oc(),Ic=b,Jc=c,Ic.attachEvent("onpropertychange",Pc)):"blur"===a&&Oc()}function Rc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Lc(Jc)}
function Sc(a,b){if("click"===a)return Lc(b)}function Tc(a,b){if("input"===a||"change"===a)return Lc(b)}
var Uc={eventTypes:Gc,_isInputEventSupported:Nc,extractEvents:function(a,b,c,d){var e=b?Ma(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Mc:Rb(e)?Nc?f=Tc:(f=Rc,g=Qc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Sc);if(f&&(f=f(a,b)))return Hc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ec(e,"number",e.value)}},Vc=z.extend({view:null,detail:null}),Wc={Alt:"altKey",
Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Xc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Wc[a])?!!b[a]:!1}function Yc(){return Xc}
var Zc=0,$c=0,ad=!1,bd=!1,cd=Vc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Zc;Zc=a.screenX;return ad?"mousemove"===a.type?a.screenX-b:0:(ad=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=$c;$c=a.screenY;return bd?"mousemove"===a.type?a.screenY-b:0:(bd=!0,0)}}),dd=cd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),ed={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},fd={eventTypes:ed,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ka(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,l=void 0;if("mouseout"===a||"mouseover"===a)g=cd,h=ed.mouseLeave,k=ed.mouseEnter,l="mouse";
else if("pointerout"===a||"pointerover"===a)g=dd,h=ed.pointerLeave,k=ed.pointerEnter,l="pointer";var m=null==f?e:Ma(f);e=null==b?e:Ma(b);a=g.getPooled(h,f,c,d);a.type=l+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=l+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;l=0;for(g=b;g;g=Oa(g))l++;g=0;for(k=e;k;k=Oa(k))g++;for(;0<l-g;)b=Oa(b),l--;for(;0<g-l;)e=Oa(e),g--;for(;l--;){if(b===e||b===e.alternate)break a;b=Oa(b);e=Oa(e)}b=null}else b=null;e=b;for(b=[];f&&f!==e;){l=
f.alternate;if(null!==l&&l===e)break;b.push(f);f=Oa(f)}for(f=[];d&&d!==e;){l=d.alternate;if(null!==l&&l===e)break;f.push(d);d=Oa(d)}for(d=0;d<b.length;d++)Ra(b[d],"bubbled",a);for(d=f.length;0<d--;)Ra(f[d],"captured",c);return[a,c]}},gd=Object.prototype.hasOwnProperty;function hd(a,b){return a===b?0!==a||0!==b||1/a===1/b:a!==a&&b!==b}
function id(a,b){if(hd(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!gd.call(b,c[d])||!hd(a[c[d]],b[c[d]]))return!1;return!0}function jd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 5===b.tag?2:3}function kd(a){2!==jd(a)?t("188"):void 0}
function ld(a){var b=a.alternate;if(!b)return b=jd(a),3===b?t("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return kd(e),a;if(g===d)return kd(e),b;g=g.sibling}t("188")}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?
void 0:t("189")}}c.alternate!==d?t("190"):void 0}5!==c.tag?t("188"):void 0;return c.stateNode.current===c?a:b}function md(a){a=ld(a);if(!a)return null;for(var b=a;;){if(7===b.tag||8===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
var nd=z.extend({animationName:null,elapsedTime:null,pseudoElement:null}),od=z.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),pd=Vc.extend({relatedTarget:null});function qd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var rd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},td=Vc.extend({key:function(a){if(a.key){var b=rd[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=qd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?sd[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yc,charCode:function(a){return"keypress"===
a.type?qd(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?qd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),ud=cd.extend({dataTransfer:null}),vd=Vc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yc}),wd=z.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),xd=cd.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),yd=[["abort","abort"],[bb,"animationEnd"],[cb,"animationIteration"],[db,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[eb,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],zd={},Ad={};function Bd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};zd[a]=b;Ad[c]=b}
[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Bd(a,!0)});yd.forEach(function(a){Bd(a,!1)});
var Cd={eventTypes:zd,isInteractiveTopLevelEventType:function(a){a=Ad[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Ad[a];if(!e)return null;switch(a){case "keypress":if(0===qd(c))return null;case "keydown":case "keyup":a=td;break;case "blur":case "focus":a=pd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=cd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
ud;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=vd;break;case bb:case cb:case db:a=nd;break;case eb:a=wd;break;case "scroll":a=Vc;break;case "wheel":a=xd;break;case "copy":case "cut":case "paste":a=od;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=dd;break;default:a=z}b=a.getPooled(e,b,c,d);Ua(b);return b}},Dd=Cd.isInteractiveTopLevelEventType,
Ed=[];function Fd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=5!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ka(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Sb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<pa.length;h++){var k=pa[h];k&&(k=k.extractEvents(d,b,f,e))&&(g=ya(g,k))}Ga(g,!1)}}var Gd=!0;
function F(a,b){if(!b)return null;var c=(Dd(a)?Hd:Id).bind(null,a);b.addEventListener(a,c,!1)}function Jd(a,b){if(!b)return null;var c=(Dd(a)?Hd:Id).bind(null,a);b.addEventListener(a,c,!0)}function Hd(a,b){Mb(Id,a,b)}
function Id(a,b){if(Gd){var c=Sb(b);c=Ka(c);null===c||"number"!==typeof c.tag||2===jd(c)||(c=null);if(Ed.length){var d=Ed.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Pb(Fd,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Ed.length&&Ed.push(a)}}}var Kd={},Ld=0,Md="_reactListenersID"+(""+Math.random()).slice(2);
function Nd(a){Object.prototype.hasOwnProperty.call(a,Md)||(a[Md]=Ld++,Kd[a[Md]]={});return Kd[a[Md]]}function Od(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Qd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Rd(a,b){var c=Qd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Qd(c)}}function Sd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Sd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
function Td(){for(var a=window,b=Od();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView}catch(c){break}b=Od(a.document)}return b}function Ud(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
var Vd=Va&&"documentMode"in document&&11>=document.documentMode,Wd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xd=null,Yd=null,Zd=null,$d=!1;
function ae(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if($d||null==Xd||Xd!==Od(c))return null;c=Xd;"selectionStart"in c&&Ud(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Zd&&id(Zd,c)?null:(Zd=c,a=z.getPooled(Wd.select,Yd,a,b),a.type="select",a.target=Xd,Ua(a),a)}
var be={eventTypes:Wd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Nd(e);f=ta.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0}f=!e}if(f)return null;e=b?Ma(b):window;switch(a){case "focus":if(Rb(e)||"true"===e.contentEditable)Xd=e,Yd=b,Zd=null;break;case "blur":Zd=Yd=Xd=null;break;case "mousedown":$d=!0;break;case "contextmenu":case "mouseup":case "dragend":return $d=!1,ae(c,d);case "selectionchange":if(Vd)break;
case "keydown":case "keyup":return ae(c,d)}return null}};Ea.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ua=Na;va=La;wa=Ma;Ea.injectEventPluginsByName({SimpleEventPlugin:Cd,EnterLeaveEventPlugin:fd,ChangeEventPlugin:Uc,SelectEventPlugin:be,BeforeInputEventPlugin:Eb});function ce(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}
function de(a,b){a=n({children:void 0},b);if(b=ce(b.children))a.children=b;return a}function ee(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+yc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function fe(a,b){null!=b.dangerouslySetInnerHTML?t("91"):void 0;return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function ge(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?t("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:t("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:yc(c)}}
function he(a,b){var c=yc(b.value),d=yc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function ie(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)}var je={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function ke(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?ke(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var me=void 0,ne=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==je.svg||"innerHTML"in a)a.innerHTML=b;else{me=me||document.createElement("div");me.innerHTML="<svg>"+b+"</svg>";for(b=me.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function oe(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}
var pe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qe=["Webkit","ms","Moz","O"];Object.keys(pe).forEach(function(a){qe.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pe[b]=pe[a]})});
function re(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--");var e=c;var f=b[c];e=null==f||"boolean"===typeof f||""===f?"":d||"number"!==typeof f||0===f||pe.hasOwnProperty(e)&&pe[e]?(""+f).trim():f+"px";"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var se=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function te(a,b){b&&(se[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?t("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?t("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:t("61")),null!=b.style&&"object"!==typeof b.style?t("62",""):void 0)}
function ue(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}
function ve(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Nd(a);b=ta[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Jd("scroll",a);break;case "focus":case "blur":Jd("focus",a);Jd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Tb(e)&&Jd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===fb.indexOf(e)&&F(e,a)}c[e]=!0}}}function we(){}var xe=null,ye=null;
function ze(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}function Ae(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}function Be(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}
function Ce(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}new Set;var De=[],Ee=-1;function G(a){0>Ee||(a.current=De[Ee],De[Ee]=null,Ee--)}function H(a,b){Ee++;De[Ee]=a.current;a.current=b}var Fe={},I={current:Fe},J={current:!1},Ge=Fe;
function He(a,b){var c=a.type.contextTypes;if(!c)return Fe;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function K(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Ie(a){G(J,a);G(I,a)}function Je(a){G(J,a);G(I,a)}
function Ke(a,b,c){I.current!==Fe?t("168"):void 0;H(I,b,a);H(J,c,a)}function Le(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:t("108",lc(b)||"Unknown",e);return n({},c,d)}function Me(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Fe;Ge=I.current;H(I,b,a);H(J,J.current,a);return!0}
function Ne(a,b,c){var d=a.stateNode;d?void 0:t("169");c?(b=Le(a,b,Ge),d.__reactInternalMemoizedMergedChildContext=b,G(J,a),G(I,a),H(I,b,a)):G(J,a);H(J,c,a)}var Oe=null,Pe=null;function Qe(a){return function(b){try{return a(b)}catch(c){}}}
function Re(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Oe=Qe(function(a){return b.onCommitFiberRoot(c,a)});Pe=Qe(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0}
function Se(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=null;this.index=0;this.ref=null;this.pendingProps=b;this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Te(a){a=a.prototype;return!(!a||!a.isReactComponent)}
function Ue(a,b,c){var d=a.alternate;null===d?(d=new Se(a.tag,b,a.key,a.mode),d.type=a.type,d.stateNode=a.stateNode,d.alternate=a,a.alternate=d):(d.pendingProps=b,d.effectTag=0,d.nextEffect=null,d.firstEffect=null,d.lastEffect=null);d.childExpirationTime=a.childExpirationTime;d.expirationTime=b!==a.pendingProps?c:a.expirationTime;d.child=a.child;d.memoizedProps=a.memoizedProps;d.memoizedState=a.memoizedState;d.updateQueue=a.updateQueue;d.firstContextDependency=a.firstContextDependency;d.sibling=a.sibling;
d.index=a.index;d.ref=a.ref;return d}
function Ve(a,b,c){var d=a.type,e=a.key;a=a.props;var f=void 0;if("function"===typeof d)f=Te(d)?2:4;else if("string"===typeof d)f=7;else a:switch(d){case bc:return We(a.children,b,c,e);case gc:f=10;b|=3;break;case cc:f=10;b|=2;break;case dc:return d=new Se(15,a,e,b|4),d.type=dc,d.expirationTime=c,d;case ic:f=16;break;default:if("object"===typeof d&&null!==d)switch(d.$$typeof){case ec:f=12;break a;case fc:f=11;break a;case hc:f=13;break a;default:if("function"===typeof d.then){f=4;break a}}t("130",
null==d?d:typeof d,"")}b=new Se(f,a,e,b);b.type=d;b.expirationTime=c;return b}function We(a,b,c,d){a=new Se(9,a,d,b);a.expirationTime=c;return a}function Xe(a,b,c){a=new Se(8,a,null,b);a.expirationTime=c;return a}function Ye(a,b,c){b=new Se(6,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function Ze(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c>b?a.earliestPendingTime=b:a.latestPendingTime<b&&(a.latestPendingTime=b);$e(b,a)}function $e(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d>a)&&(e=d);a=e;0!==a&&0!==c&&c<a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a}var af=!1;
function bf(a){return{baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function cf(a){return{baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
function df(a){return{expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ef(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b)}
function ff(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=bf(a.memoizedState))}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=bf(a.memoizedState),e=c.updateQueue=bf(c.memoizedState)):d=a.updateQueue=cf(e):null===e&&(e=c.updateQueue=cf(d));null===e||d===e?ef(d,b):null===d.lastUpdate||null===e.lastUpdate?(ef(d,b),ef(e,b)):(ef(d,b),e.lastUpdate=b)}
function gf(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=bf(a.memoizedState):hf(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b)}function hf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=cf(b));return b}
function jf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-1025|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return n({},d,e);case 2:af=!0}return d}
function kf(a,b,c,d,e){af=!1;b=hf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;if(m>e){if(null===g&&(g=k,f=l),0===h||h>m)h=m}else l=jf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k));k=k.next}m=null;for(k=b.firstCapturedUpdate;null!==k;){var r=k.expirationTime;if(r>e){if(null===m&&(m=k,null===g&&(f=l)),0===h||h>r)h=r}else l=jf(a,b,k,l,c,d),
null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k));k=k.next}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=l}
function lf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);mf(b.firstEffect,c);b.firstEffect=b.lastEffect=null;mf(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null}function mf(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?t("191",c):void 0;c.call(d)}a=a.nextEffect}}
function nf(a,b){return{value:a,source:b,stack:mc(b)}}var of={current:null},pf=null,qf=null,rf=null;function sf(a,b){var c=a.type._context;H(of,c._currentValue,a);c._currentValue=b}function tf(a){var b=of.current;G(of,a);a.type._context._currentValue=b}function uf(a){pf=a;rf=qf=null;a.firstContextDependency=null}
function vf(a,b){if(rf!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)rf=a,b=1073741823;b={context:a,observedBits:b,next:null};null===qf?(null===pf?t("277"):void 0,pf.firstContextDependency=qf=b):qf=qf.next=b}return a._currentValue}var wf={},L={current:wf},xf={current:wf},yf={current:wf};function zf(a){a===wf?t("174"):void 0;return a}
function Af(a,b){H(yf,b,a);H(xf,a,a);H(L,wf,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:le(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=le(b,c)}G(L,a);H(L,b,a)}function Bf(a){G(L,a);G(xf,a);G(yf,a)}function Cf(a){zf(yf.current);var b=zf(L.current);var c=le(b,a.type);b!==c&&(H(xf,a,a),H(L,c,a))}function Df(a){xf.current===a&&(G(L,a),G(xf,a))}var Ef=(new aa.Component).refs;
function Ff(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c)}
var Jf={isMounted:function(a){return(a=a._reactInternalFiber)?2===jd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d=Hf(d,a);var e=df(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d=Hf(d,a);var e=df(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!==
b&&null!==b&&(d.callback=b);ff(a,d);If(a,c)}};function Kf(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!id(c,d)||!id(e,f):!0}function Lf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jf.enqueueReplaceState(b,b.state,null)}
function Mf(a,b,c,d){var e=a.stateNode,f=K(b)?Ge:I.current;e.props=c;e.state=a.memoizedState;e.refs=Ef;e.context=He(a,f);f=a.updateQueue;null!==f&&(kf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Ff(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&
e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(kf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Nf=Array.isArray;
function Of(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(2!==c.tag&&3!==c.tag?t("110"):void 0,d=c.stateNode);d?void 0:t("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Ef&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}"string"!==typeof a?t("284"):void 0;c._owner?void 0:t("254",a)}return a}
function Pf(a,b){"textarea"!==a.type&&t("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"")}
function Qf(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Ue(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||8!==b.tag)return b=Xe(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.type===c.type)return d=e(b,c.props,d),d.ref=Of(a,b,c),d.return=a,d;d=Ve(c,a.mode,d);d.ref=Of(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||6!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
Ye(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,f){if(null===b||9!==b.tag)return b=We(c,a.mode,d,f),b.return=a,b;b=e(b,c,d);b.return=a;return b}function r(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Xe(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case $b:return c=Ve(b,a.mode,c),c.ref=Of(a,null,b),c.return=a,c;case ac:return b=Ye(b,a.mode,c),b.return=a,b}if(Nf(b)||kc(b))return b=We(b,a.mode,c,null),b.return=
a,b;Pf(a,b)}return null}function A(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case $b:return c.key===e?c.type===bc?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case ac:return c.key===e?l(a,b,c,d):null}if(Nf(c)||kc(c))return null!==e?null:m(a,b,c,d,null);Pf(a,c)}return null}function S(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);
if("object"===typeof d&&null!==d){switch(d.$$typeof){case $b:return a=a.get(null===d.key?c:d.key)||null,d.type===bc?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case ac:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Nf(d)||kc(d))return a=a.get(c)||null,m(b,a,d,e,null);Pf(b,d)}return null}function B(e,g,h,k){for(var l=null,m=null,p=g,u=g=0,q=null;null!==p&&u<h.length;u++){p.index>u?(q=p,p=null):q=p.sibling;var v=A(e,p,h[u],k);if(null===v){null===p&&(p=q);break}a&&p&&null===v.alternate&&b(e,
p);g=f(v,g,u);null===m?l=v:m.sibling=v;m=v;p=q}if(u===h.length)return c(e,p),l;if(null===p){for(;u<h.length;u++)if(p=r(e,h[u],k))g=f(p,g,u),null===m?l=p:m.sibling=p,m=p;return l}for(p=d(e,p);u<h.length;u++)if(q=S(p,e,u,h[u],k))a&&null!==q.alternate&&p.delete(null===q.key?u:q.key),g=f(q,g,u),null===m?l=q:m.sibling=q,m=q;a&&p.forEach(function(a){return b(e,a)});return l}function P(e,g,h,k){var l=kc(h);"function"!==typeof l?t("150"):void 0;h=l.call(h);null==h?t("151"):void 0;for(var m=l=null,p=g,u=g=
0,q=null,v=h.next();null!==p&&!v.done;u++,v=h.next()){p.index>u?(q=p,p=null):q=p.sibling;var x=A(e,p,v.value,k);if(null===x){p||(p=q);break}a&&p&&null===x.alternate&&b(e,p);g=f(x,g,u);null===m?l=x:m.sibling=x;m=x;p=q}if(v.done)return c(e,p),l;if(null===p){for(;!v.done;u++,v=h.next())v=r(e,v.value,k),null!==v&&(g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);return l}for(p=d(e,p);!v.done;u++,v=h.next())v=S(p,e,u,v.value,k),null!==v&&(a&&null!==v.alternate&&p.delete(null===v.key?u:v.key),g=f(v,g,u),null===
m?l=v:m.sibling=v,m=v);a&&p.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===bc&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case $b:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(9===k.tag?f.type===bc:k.type===f.type){c(a,k.sibling);d=e(k,f.type===bc?f.props.children:f.props,h);d.ref=Of(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=k.sibling}f.type===bc?(d=We(f.props.children,
a.mode,h,f.key),d.return=a,a=d):(h=Ve(f,a.mode,h),h.ref=Of(a,d,f),h.return=a,a=h)}return g(a);case ac:a:{for(k=f.key;null!==d;){if(d.key===k)if(6===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Ye(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&8===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=
a,a=d):(c(a,d),d=Xe(f,a.mode,h),d.return=a,a=d),g(a);if(Nf(f))return B(a,d,f,h);if(kc(f))return P(a,d,f,h);l&&Pf(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 2:case 3:case 0:h=a.type,t("152",h.displayName||h.name||"Component")}return c(a,d)}}var Rf=Qf(!0),Sf=Qf(!1),Tf=null,Uf=null,Vf=!1;function Wf(a,b){var c=new Se(7,null,null,0);c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Xf(a,b){switch(a.tag){case 7:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 8:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return!1}}function Yf(a){if(Vf){var b=Uf;if(b){var c=b;if(!Xf(a,b)){b=Be(c);if(!b||!Xf(a,b)){a.effectTag|=2;Vf=!1;Tf=a;return}Wf(Tf,c)}Tf=a;Uf=Ce(b)}else a.effectTag|=2,Vf=!1,Tf=a}}
function Zf(a){for(a=a.return;null!==a&&7!==a.tag&&5!==a.tag;)a=a.return;Tf=a}function $f(a){if(a!==Tf)return!1;if(!Vf)return Zf(a),Vf=!0,!1;var b=a.type;if(7!==a.tag||"head"!==b&&"body"!==b&&!Ae(b,a.memoizedProps))for(b=Uf;b;)Wf(a,b),b=Be(b);Zf(a);Uf=Tf?Be(a.stateNode):null;return!0}function ag(){Uf=Tf=null;Vf=!1}
function bg(a){switch(a._reactStatus){case 1:return a._reactResult;case 2:throw a._reactResult;case 0:throw a;default:throw a._reactStatus=0,a.then(function(b){if(0===a._reactStatus){a._reactStatus=1;if("object"===typeof b&&null!==b){var c=b.default;b=void 0!==c&&null!==c?c:b}a._reactResult=b}},function(b){0===a._reactStatus&&(a._reactStatus=2,a._reactResult=b)}),a;}}var cg=Yb.ReactCurrentOwner;function M(a,b,c,d){b.child=null===a?Sf(b,null,c,d):Rf(b,a.child,c,d)}
function dg(a,b,c,d,e){c=c.render;var f=b.ref;if(!J.current&&b.memoizedProps===d&&f===(null!==a?a.ref:null))return eg(a,b,e);c=c(d,f);M(a,b,c,e);b.memoizedProps=d;return b.child}function fg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function gg(a,b,c,d,e){var f=K(c)?Ge:I.current;f=He(b,f);uf(b,e);c=c(d,f);b.effectTag|=1;M(a,b,c,e);b.memoizedProps=d;return b.child}
function hg(a,b,c,d,e){if(K(c)){var f=!0;Me(b)}else f=!1;uf(b,e);if(null===a)if(null===b.stateNode){var g=K(c)?Ge:I.current,h=c.contextTypes,k=null!==h&&void 0!==h;h=k?He(b,g):Fe;var l=new c(d,h);b.memoizedState=null!==l.state&&void 0!==l.state?l.state:null;l.updater=Jf;b.stateNode=l;l._reactInternalFiber=b;k&&(k=b.stateNode,k.__reactInternalMemoizedUnmaskedChildContext=g,k.__reactInternalMemoizedMaskedChildContext=h);Mf(b,c,d,e);d=!0}else{g=b.stateNode;h=b.memoizedProps;g.props=h;var m=g.context;
k=K(c)?Ge:I.current;k=He(b,k);var r=c.getDerivedStateFromProps;(l="function"===typeof r||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||m!==k)&&Lf(b,g,d,k);af=!1;var A=b.memoizedState;m=g.state=A;var S=b.updateQueue;null!==S&&(kf(b,S,d,g,e),m=b.memoizedState);h!==d||A!==m||J.current||af?("function"===typeof r&&(Ff(b,c,r,d),m=b.memoizedState),(h=af||Kf(b,c,h,d,A,m,k))?(l||"function"!==
typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=m),g.props=d,g.state=m,g.context=k,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,h=
b.memoizedProps,g.props=h,m=g.context,k=K(c)?Ge:I.current,k=He(b,k),r=c.getDerivedStateFromProps,(l="function"===typeof r||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||m!==k)&&Lf(b,g,d,k),af=!1,m=b.memoizedState,A=g.state=m,S=b.updateQueue,null!==S&&(kf(b,S,d,g,e),A=b.memoizedState),h!==d||m!==A||J.current||af?("function"===typeof r&&(Ff(b,c,r,d),A=b.memoizedState),(r=af||Kf(b,c,h,d,
m,A,k))?(l||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,A,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,A,k)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=4),"function"!==
typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=A),g.props=d,g.state=A,g.context=k,d=r):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&m===a.memoizedState||(b.effectTag|=256),d=!1);return ig(a,b,c,d,f,e)}
function ig(a,b,c,d,e,f){fg(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Ne(b,c,!1),eg(a,b,f);d=b.stateNode;cg.current=b;var h=g?null:d.render();b.effectTag|=1;null!==a&&g&&(M(a,b,null,f),b.child=null);M(a,b,h,f);b.memoizedState=d.state;b.memoizedProps=d.props;e&&Ne(b,c,!0);return b.child}function jg(a){var b=a.stateNode;b.pendingContext?Ke(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ke(a,b.context,!1);Af(a,b.containerInfo)}
function ng(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}
function og(a,b,c,d){null!==a?t("155"):void 0;var e=b.pendingProps;if("object"===typeof c&&null!==c&&"function"===typeof c.then){c=bg(c);var f=c;f="function"===typeof f?Te(f)?3:1:void 0!==f&&null!==f&&f.$$typeof?14:4;f=b.tag=f;var g=ng(c,e);switch(f){case 1:return gg(a,b,c,g,d);case 3:return hg(a,b,c,g,d);case 14:return dg(a,b,c,g,d);default:t("283",c)}}f=He(b,I.current);uf(b,d);f=c(e,f);b.effectTag|=1;if("object"===typeof f&&null!==f&&"function"===typeof f.render&&void 0===f.$$typeof){b.tag=2;K(c)?
(g=!0,Me(b)):g=!1;b.memoizedState=null!==f.state&&void 0!==f.state?f.state:null;var h=c.getDerivedStateFromProps;"function"===typeof h&&Ff(b,c,h,e);f.updater=Jf;b.stateNode=f;f._reactInternalFiber=b;Mf(b,c,e,d);return ig(a,b,c,!0,g,d)}b.tag=0;M(a,b,f,d);b.memoizedProps=e;return b.child}
function eg(a,b,c){null!==a&&(b.firstContextDependency=a.firstContextDependency);var d=b.childExpirationTime;if(0===d||d>c)return null;null!==a&&b.child!==a.child?t("153"):void 0;if(null!==b.child){a=b.child;c=Ue(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ue(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null}return b.child}
function pg(a,b,c){var d=b.expirationTime;if(!J.current&&(0===d||d>c)){switch(b.tag){case 5:jg(b);ag();break;case 7:Cf(b);break;case 2:K(b.type)&&Me(b);break;case 3:K(b.type._reactResult)&&Me(b);break;case 6:Af(b,b.stateNode.containerInfo);break;case 12:sf(b,b.memoizedProps.value)}return eg(a,b,c)}b.expirationTime=0;switch(b.tag){case 4:return og(a,b,b.type,c);case 0:return gg(a,b,b.type,b.pendingProps,c);case 1:var e=b.type._reactResult;d=b.pendingProps;a=gg(a,b,e,ng(e,d),c);b.memoizedProps=d;return a;
case 2:return hg(a,b,b.type,b.pendingProps,c);case 3:return e=b.type._reactResult,d=b.pendingProps,a=hg(a,b,e,ng(e,d),c),b.memoizedProps=d,a;case 5:jg(b);d=b.updateQueue;null===d?t("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;kf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)ag(),b=eg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)Uf=Ce(b.stateNode.containerInfo),Tf=b,e=Vf=!0;e?(b.effectTag|=2,b.child=Sf(b,null,d,c)):(M(a,b,d,c),ag());b=b.child}return b;
case 7:Cf(b);null===a&&Yf(b);d=b.type;e=b.pendingProps;var f=null!==a?a.memoizedProps:null,g=e.children;Ae(d,e)?g=null:null!==f&&Ae(d,f)&&(b.effectTag|=16);fg(a,b);1073741823!==c&&b.mode&1&&e.hidden?(b.expirationTime=1073741823,b.memoizedProps=e,b=null):(M(a,b,g,c),b.memoizedProps=e,b=b.child);return b;case 8:return null===a&&Yf(b),b.memoizedProps=b.pendingProps,null;case 16:return null;case 6:return Af(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Rf(b,null,d,c):M(a,b,d,c),b.memoizedProps=
d,b.child;case 13:return dg(a,b,b.type,b.pendingProps,c);case 14:return e=b.type._reactResult,d=b.pendingProps,a=dg(a,b,e,ng(e,d),c),b.memoizedProps=d,a;case 9:return d=b.pendingProps,M(a,b,d,c),b.memoizedProps=d,b.child;case 10:return d=b.pendingProps.children,M(a,b,d,c),b.memoizedProps=d,b.child;case 15:return d=b.pendingProps,M(a,b,d.children,c),b.memoizedProps=d,b.child;case 12:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;b.memoizedProps=e;sf(b,f);if(null!==g){var h=g.value;
f=h===f&&(0!==h||1/h===1/f)||h!==h&&f!==f?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!J.current){b=eg(a,b,c);break a}}else for(g=b.child,null!==g&&(g.return=b);null!==g;){h=g.firstContextDependency;if(null!==h){do{if(h.context===d&&0!==(h.observedBits&f)){if(2===g.tag||3===g.tag){var k=df(c);k.tag=2;ff(g,k)}if(0===g.expirationTime||g.expirationTime>c)g.expirationTime=c;k=g.alternate;null!==k&&(0===k.expirationTime||
k.expirationTime>c)&&(k.expirationTime=c);for(var l=g.return;null!==l;){k=l.alternate;if(0===l.childExpirationTime||l.childExpirationTime>c)l.childExpirationTime=c,null!==k&&(0===k.childExpirationTime||k.childExpirationTime>c)&&(k.childExpirationTime=c);else if(null!==k&&(0===k.childExpirationTime||k.childExpirationTime>c))k.childExpirationTime=c;else break;l=l.return}}k=g.child;h=h.next}while(null!==h)}else k=12===g.tag?g.type===b.type?null:g.child:g.child;if(null!==k)k.return=g;else for(k=g;null!==
k;){if(k===b){k=null;break}g=k.sibling;if(null!==g){g.return=k.return;k=g;break}k=k.return}g=k}}M(a,b,e.children,c);b=b.child}return b;case 11:return f=b.type,d=b.pendingProps,e=d.children,uf(b,c),f=vf(f,d.unstable_observedBits),e=e(f),b.effectTag|=1,M(a,b,e,c),b.memoizedProps=d,b.child;default:t("156")}}function qg(a){a.effectTag|=4}var rg=void 0,sg=void 0,tg=void 0;rg=function(){};
sg=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;zf(L.current);a=null;switch(c){case "input":f=zc(g,f);d=zc(g,d);a=[];break;case "option":f=de(g,f);d=de(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=fe(g,f);d=fe(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=we)}te(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
c){var k=f[c];for(g in k)k.hasOwnProperty(g)&&(h||(h={}),h[g]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(sa.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var l=d[c];k=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&l!==k&&(null!=l||null!=k))if("style"===c)if(k){for(g in k)!k.hasOwnProperty(g)||l&&l.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in l)l.hasOwnProperty(g)&&k[g]!==l[g]&&(h||
(h={}),h[g]=l[g])}else h||(a||(a=[]),a.push(c,h)),h=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,k=k?k.__html:void 0,null!=l&&k!==l&&(a=a||[]).push(c,""+l)):"children"===c?k===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(sa.hasOwnProperty(c)?(null!=l&&ve(e,c),a||k===l||(a=[])):(a=a||[]).push(c,l))}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&qg(b)}};tg=function(a,b,c,d){c!==d&&qg(b)};
function ug(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=mc(c));null!==c&&lc(c.type);b=b.value;null!==a&&2===a.tag&&lc(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function vg(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){wg(a,c)}else b.current=null}
function xg(a){"function"===typeof Pe&&Pe(a);switch(a.tag){case 2:case 3:vg(a);var b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){wg(a,c)}break;case 7:vg(a);break;case 6:yg(a)}}function zg(a){return 7===a.tag||5===a.tag||6===a.tag}
function Ag(a){a:{for(var b=a.return;null!==b;){if(zg(b)){var c=b;break a}b=b.return}t("160");c=void 0}var d=b=void 0;switch(c.tag){case 7:b=c.stateNode;d=!1;break;case 5:b=c.stateNode.containerInfo;d=!0;break;case 6:b=c.stateNode.containerInfo;d=!0;break;default:t("161")}c.effectTag&16&&(oe(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||zg(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;7!==c.tag&&8!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||6===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(7===e.tag||8===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h)}else b.insertBefore(e.stateNode,c);else d?(f=b,g=e.stateNode,8===f.nodeType?(h=f.parentNode,h.insertBefore(g,f)):(h=f,h.appendChild(g)),null===h.onclick&&(h.onclick=we)):b.appendChild(e.stateNode);else if(6!==e.tag&&null!==e.child){e.child.return=
e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return}e.sibling.return=e.return;e=e.sibling}}
function yg(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?t("160"):void 0;switch(c.tag){case 7:d=c.stateNode;e=!1;break a;case 5:d=c.stateNode.containerInfo;e=!0;break a;case 6:d=c.stateNode.containerInfo;e=!0;break a}c=c.return}c=!0}if(7===b.tag||8===b.tag){a:for(var f=b,g=f;;)if(xg(g),null!==g.child&&6!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return}g.sibling.return=g.return;g=g.sibling}e?
(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode)}else if(6===b.tag?(d=b.stateNode.containerInfo,e=!0):xg(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;6===b.tag&&(c=!1)}b.sibling.return=b.return;b=b.sibling}}
function Bg(a,b){switch(b.tag){case 2:case 3:break;case 7:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Ja]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cc(c,d);ue(a,e);b=ue(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?re(c,h):"dangerouslySetInnerHTML"===g?ne(c,h):"children"===g?oe(c,h):xc(c,g,h,b)}switch(a){case "input":Dc(c,d);break;case "textarea":he(c,d);break;case "select":a=c._wrapperState.wasMultiple,
c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?ee(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?ee(c,!!d.multiple,d.defaultValue,!0):ee(c,!!d.multiple,d.multiple?[]:"",!1))}}}break;case 8:null===b.stateNode?t("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 5:break;case 15:break;case 16:break;default:t("163")}}function Cg(a,b,c){c=df(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Dg(d);ug(a,b)};return c}
function Eg(a,b,c){c=df(c);c.tag=3;var d=a.stateNode;null!==d&&"function"===typeof d.componentDidCatch&&(c.callback=function(){null===Fg?Fg=new Set([this]):Fg.add(this);var c=b.value,d=b.stack;ug(a,b);this.componentDidCatch(c,{componentStack:null!==d?d:""})});return c}
function Gg(a){switch(a.tag){case 2:K(a.type)&&Ie(a);var b=a.effectTag;return b&1024?(a.effectTag=b&-1025|64,a):null;case 3:return K(a.type._reactResult)&&Ie(a),b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 5:return Bf(a),Je(a),b=a.effectTag,0!==(b&64)?t("285"):void 0,a.effectTag=b&-1025|64,a;case 7:return Df(a),null;case 16:return b=a.effectTag,b&1024?(a.effectTag=b&-1025|64,a):null;case 6:return Bf(a),null;case 12:return tf(a),null;default:return null}}
var Hg={readContext:vf},Ig=Yb.ReactCurrentOwner,Jg=0,Kg=0,Lg=!1,N=null,Mg=null,O=0,Ng=!1,Q=null,Og=!1,Fg=null;function Pg(){if(null!==N)for(var a=N.return;null!==a;){var b=a;switch(b.tag){case 2:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Ie(b);break;case 3:c=b.type._reactResult.childContextTypes;null!==c&&void 0!==c&&Ie(b);break;case 5:Bf(b);Je(b);break;case 7:Df(b);break;case 6:Bf(b);break;case 12:tf(b)}a=a.return}Mg=null;O=0;Ng=!1;N=null}
function Qg(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&512)){var e=b;b=a;var f=b.pendingProps;switch(b.tag){case 0:case 1:break;case 2:K(b.type)&&Ie(b);break;case 3:K(b.type._reactResult)&&Ie(b);break;case 5:Bf(b);Je(b);f=b.stateNode;f.pendingContext&&(f.context=f.pendingContext,f.pendingContext=null);if(null===e||null===e.child)$f(b),b.effectTag&=-3;rg(b);break;case 7:Df(b);var g=zf(yf.current),h=b.type;if(null!==e&&null!=b.stateNode)sg(e,b,h,f,g),e.ref!==b.ref&&(b.effectTag|=
128);else if(f){var k=zf(L.current);if($f(b)){f=b;e=f.stateNode;var l=f.type,m=f.memoizedProps,r=g;e[Ia]=f;e[Ja]=m;h=void 0;g=l;switch(g){case "iframe":case "object":F("load",e);break;case "video":case "audio":for(l=0;l<fb.length;l++)F(fb[l],e);break;case "source":F("error",e);break;case "img":case "image":case "link":F("error",e);F("load",e);break;case "form":F("reset",e);F("submit",e);break;case "details":F("toggle",e);break;case "input":Bc(e,m);F("invalid",e);ve(r,"onChange");break;case "select":e._wrapperState=
{wasMultiple:!!m.multiple};F("invalid",e);ve(r,"onChange");break;case "textarea":ge(e,m),F("invalid",e),ve(r,"onChange")}te(g,m);l=null;for(h in m)m.hasOwnProperty(h)&&(k=m[h],"children"===h?"string"===typeof k?e.textContent!==k&&(l=["children",k]):"number"===typeof k&&e.textContent!==""+k&&(l=["children",""+k]):sa.hasOwnProperty(h)&&null!=k&&ve(r,h));switch(g){case "input":Wb(e);Fc(e,m,!0);break;case "textarea":Wb(e);ie(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
(e.onclick=we)}h=l;f.updateQueue=h;f=null!==h?!0:!1;f&&qg(b)}else{m=b;e=h;r=f;l=9===g.nodeType?g:g.ownerDocument;k===je.html&&(k=ke(e));k===je.html?"script"===e?(e=l.createElement("div"),e.innerHTML="<script>\x3c/script>",l=e.removeChild(e.firstChild)):"string"===typeof r.is?l=l.createElement(e,{is:r.is}):(l=l.createElement(e),"select"===e&&r.multiple&&(l.multiple=!0)):l=l.createElementNS(k,e);e=l;e[Ia]=m;e[Ja]=f;a:for(m=e,r=b,l=r.child;null!==l;){if(7===l.tag||8===l.tag)m.appendChild(l.stateNode);
else if(6!==l.tag&&null!==l.child){l.child.return=l;l=l.child;continue}if(l===r)break;for(;null===l.sibling;){if(null===l.return||l.return===r)break a;l=l.return}l.sibling.return=l.return;l=l.sibling}r=e;l=h;m=f;var A=g,S=ue(l,m);switch(l){case "iframe":case "object":F("load",r);g=m;break;case "video":case "audio":for(g=0;g<fb.length;g++)F(fb[g],r);g=m;break;case "source":F("error",r);g=m;break;case "img":case "image":case "link":F("error",r);F("load",r);g=m;break;case "form":F("reset",r);F("submit",
r);g=m;break;case "details":F("toggle",r);g=m;break;case "input":Bc(r,m);g=zc(r,m);F("invalid",r);ve(A,"onChange");break;case "option":g=de(r,m);break;case "select":r._wrapperState={wasMultiple:!!m.multiple};g=n({},m,{value:void 0});F("invalid",r);ve(A,"onChange");break;case "textarea":ge(r,m);g=fe(r,m);F("invalid",r);ve(A,"onChange");break;default:g=m}te(l,g);k=void 0;var B=l,P=r,v=g;for(k in v)if(v.hasOwnProperty(k)){var p=v[k];"style"===k?re(P,p):"dangerouslySetInnerHTML"===k?(p=p?p.__html:void 0,
null!=p&&ne(P,p)):"children"===k?"string"===typeof p?("textarea"!==B||""!==p)&&oe(P,p):"number"===typeof p&&oe(P,""+p):"suppressContentEditableWarning"!==k&&"suppressHydrationWarning"!==k&&"autoFocus"!==k&&(sa.hasOwnProperty(k)?null!=p&&ve(A,k):null!=p&&xc(P,k,p,S))}switch(l){case "input":Wb(r);Fc(r,m,!1);break;case "textarea":Wb(r);ie(r,m);break;case "option":null!=m.value&&r.setAttribute("value",""+yc(m.value));break;case "select":g=r;g.multiple=!!m.multiple;r=m.value;null!=r?ee(g,!!m.multiple,
r,!1):null!=m.defaultValue&&ee(g,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof g.onClick&&(r.onclick=we)}(f=ze(h,f))&&qg(b);b.stateNode=e}null!==b.ref&&(b.effectTag|=128)}else null===b.stateNode?t("166"):void 0;break;case 8:e&&null!=b.stateNode?tg(e,b,e.memoizedProps,f):("string"!==typeof f&&(null===b.stateNode?t("166"):void 0),e=zf(yf.current),zf(L.current),$f(b)?(f=b,h=f.stateNode,e=f.memoizedProps,h[Ia]=f,(f=h.nodeValue!==e)&&qg(b)):(h=b,f=(9===e.nodeType?e:e.ownerDocument).createTextNode(f),
f[Ia]=h,b.stateNode=f));break;case 13:case 14:break;case 16:break;case 9:break;case 10:break;case 15:break;case 6:Bf(b);rg(b);break;case 12:tf(b);break;case 11:break;case 4:t("167");default:t("156")}b=N=null;f=a;if(1073741823===O||1073741823!==f.childExpirationTime){h=0;for(e=f.child;null!==e;){g=e.expirationTime;m=e.childExpirationTime;if(0===h||0!==g&&g<h)h=g;if(0===h||0!==m&&m<h)h=m;e=e.sibling}f.childExpirationTime=h}if(null!==b)return b;null!==c&&0===(c.effectTag&512)&&(null===c.firstEffect&&
(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a))}else{a=Gg(a,O);if(null!==a)return a.effectTag&=511,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=512)}if(null!==d)return d;if(null!==c)a=c;else break}return null}function Rg(a){var b=pg(a.alternate,a,O);null===b&&(b=Qg(a));Ig.current=null;return b}
function Sg(a,b,c){Lg?t("243"):void 0;Lg=!0;Ig.currentDispatcher=Hg;var d=a.nextExpirationTimeToWorkOn;if(d!==O||a!==Mg||null===N)Pg(),Mg=a,O=d,N=Ue(Mg.current,null,O),a.pendingCommitExpirationTime=0;var e=!1;do{try{if(b)for(;null!==N&&!Tg();)N=Rg(N);else for(;null!==N;)N=Rg(N)}catch(r){if(null===N)e=!0,Dg(r);else{null===N?t("271"):void 0;var f=N,g=f.return;if(null===g)e=!0,Dg(r);else{a:{var h=g,k=f,l=r;g=O;k.effectTag|=512;k.firstEffect=k.lastEffect=null;Ng=!0;l=nf(l,k);do{switch(h.tag){case 5:h.effectTag|=
1024;h.expirationTime=g;g=Cg(h,l,g);gf(h,g);break a;case 2:case 3:k=l;var m=h.stateNode;if(0===(h.effectTag&64)&&null!==m&&"function"===typeof m.componentDidCatch&&(null===Fg||!Fg.has(m))){h.effectTag|=1024;h.expirationTime=g;g=Eg(h,k,g);gf(h,g);break a}}h=h.return}while(null!==h)}N=Qg(f);continue}}}break}while(1);Lg=!1;rf=qf=pf=Ig.currentDispatcher=null;if(e)Mg=null,a.finishedWork=null;else if(null!==N)a.finishedWork=null;else{b=a.current.alternate;null===b?t("281"):void 0;Mg=null;if(Ng){e=a.latestPendingTime;
f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e>d||0!==f&&f>d||0!==g&&g>d){a.didError=!1;c=a.latestPingedTime;0!==c&&c<=d&&(a.latestPingedTime=0);c=a.earliestPendingTime;b=a.latestPendingTime;c===d?a.earliestPendingTime=b===d?a.latestPendingTime=0:b:b===d&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;b=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=d:c>d?a.earliestSuspendedTime=d:b<d&&(a.latestSuspendedTime=d);$e(d,a);a.expirationTime=a.expirationTime;return}if(!a.didError&&
!c){a.didError=!0;a.nextExpirationTimeToWorkOn=d;d=a.expirationTime=1;a.expirationTime=d;return}}a.pendingCommitExpirationTime=d;a.finishedWork=b}}
function wg(a,b){var c;a:{Lg&&!Og?t("263"):void 0;for(c=a.return;null!==c;){switch(c.tag){case 2:case 3:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromCatch||"function"===typeof d.componentDidCatch&&(null===Fg||!Fg.has(d))){a=nf(b,a);a=Eg(c,a,1);ff(c,a);If(c,1);c=void 0;break a}break;case 5:a=nf(b,a);a=Cg(c,a,1);ff(c,a);If(c,1);c=void 0;break a}c=c.return}5===a.tag&&(c=nf(b,a),c=Cg(a,c,1),ff(a,c),If(a,1));c=void 0}return c}
function Hf(a,b){0!==Kg?a=Kg:Lg?a=Og?1:O:b.mode&1?(a=Ug?2+10*(((a-2+15)/10|0)+1):2+25*(((a-2+500)/25|0)+1),null!==Mg&&a===O&&(a+=1)):a=1;Ug&&(0===Vg||a>Vg)&&(Vg=a);return a}
function If(a,b){a:{if(0===a.expirationTime||a.expirationTime>b)a.expirationTime=b;var c=a.alternate;null!==c&&(0===c.expirationTime||c.expirationTime>b)&&(c.expirationTime=b);var d=a.return;if(null===d&&5===a.tag)a=a.stateNode;else{for(;null!==d;){c=d.alternate;if(0===d.childExpirationTime||d.childExpirationTime>b)d.childExpirationTime=b;null!==c&&(0===c.childExpirationTime||c.childExpirationTime>b)&&(c.childExpirationTime=b);if(null===d.return&&5===d.tag){a=d.stateNode;break a}d=d.return}a=null}}if(null!==
a){!Lg&&0!==O&&b<O&&Pg();Ze(a,b);if(!Lg||Og||Mg!==a){b=a;a=a.expirationTime;if(null===b.nextScheduledRoot)b.expirationTime=a,null===T?(U=T=b,b.nextScheduledRoot=b):(T=T.nextScheduledRoot=b,T.nextScheduledRoot=U);else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t("185"))}}function bh(a,b,c,d,e){var f=Kg;Kg=1;try{return a(b,c,d,e)}finally{Kg=f}}
var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0)+2,lh=kh,ah=50,$g=0,mh=null,nh=1;function oh(){kh=((ba.unstable_now()-jh)/10|0)+2}function Zg(a,b){if(0!==ch){if(b>ch)return;null!==dh&&ba.unstable_cancelScheduledWork(dh)}ch=b;a=ba.unstable_now()-jh;dh=ba.unstable_scheduleWork(ph,{timeout:10*(b-2)-a})}function Gf(){if(V)return lh;qh();if(0===Z||1073741823===Z)oh(),lh=kh;return lh}
function qh(){var a=0,b=null;if(null!==T)for(var c=T,d=U;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===T?t("244"):void 0;if(d===d.nextScheduledRoot){U=T=d.nextScheduledRoot=null;break}else if(d===U)U=e=d.nextScheduledRoot,T.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===T){T=c;T.nextScheduledRoot=U;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot}else{if(0===a||e<a)a=e,b=d;if(d===T)break;if(1===a)break;
c=d;d=d.nextScheduledRoot}}Y=b;Z=a}function ph(a){if(a.didTimeout&&null!==U){oh();var b=U;do{var c=b.expirationTime;0!==c&&kh>=c&&(b.nextExpirationTimeToWorkOn=kh);b=b.nextScheduledRoot}while(b!==U)}Yg(0,a)}
function Yg(a,b){hh=b;qh();if(null!==hh)for(oh(),lh=kh;null!==Y&&0!==Z&&(0===a||a>=Z)&&(!eh||kh>=Z);)Xg(Y,Z,kh>=Z),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=null;if(null!==ih)for(a=ih,ih=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete()}catch(d){fh||(fh=!0,gh=d)}}if(fh)throw a=gh,gh=null,fh=!1,a;}
function Xg(a,b,c){V?t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh(a,d,b))}else d=a.finishedWork,null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!0,c),d=a.finishedWork,null!==d&&(Tg()?a.finishedWork=d:rh(a,d,b)));V=!1}
function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===mh?$g++:(mh=a,$g=0);Og=Lg=!0;a.current===b?t("177"):void 0;c=a.pendingCommitExpirationTime;0===c?t("261"):void 0;a.pendingCommitExpirationTime=0;d=b.expirationTime;var e=b.childExpirationTime;d=0===d||0!==e&&e<d?e:d;a.didError=!1;0===d?(a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=
0,a.latestPingedTime=0):(e=a.latestPendingTime,0!==e&&(e<d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime<d&&(a.earliestPendingTime=a.latestPendingTime)),e=a.earliestSuspendedTime,0===e?Ze(a,d):d>a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,Ze(a,d)):d<e&&Ze(a,d));$e(0,a);Ig.current=null;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;xe=Gd;e=Td();if(Ud(e)){if("selectionStart"in e)var f=
{start:e.selectionStart,end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g&&0!==g.rangeCount){f=g.anchorNode;var h=g.anchorOffset,k=g.focusNode;g=g.focusOffset;try{f.nodeType,k.nodeType}catch(Xa){f=null;break a}var l=0,m=-1,r=-1,A=0,S=0,B=e,P=null;b:for(;;){for(var v;;){B!==f||0!==h&&3!==B.nodeType||(m=l+h);B!==k||0!==g&&3!==B.nodeType||(r=l+g);3===B.nodeType&&(l+=B.nodeValue.length);if(null===(v=B.firstChild))break;P=B;B=v}for(;;){if(B===
e)break b;P===f&&++A===h&&(m=l);P===k&&++S===g&&(r=l);if(null!==(v=B.nextSibling))break;B=P;P=B.parentNode}B=v}f=-1===m||-1===r?null:{start:m,end:r}}else f=null}f=f||{start:0,end:0}}else f=null;ye={focusedElem:e,selectionRange:f};Gd=!1;for(Q=d;null!==Q;){e=!1;f=void 0;try{for(;null!==Q;){if(Q.effectTag&256){var p=Q.alternate;a:switch(h=Q,h.tag){case 2:case 3:if(h.effectTag&256&&null!==p){var u=p.memoizedProps,x=p.memoizedState,R=h.stateNode;R.props=h.memoizedProps;R.state=h.memoizedState;var yh=R.getSnapshotBeforeUpdate(u,
x);R.__reactInternalSnapshotBeforeUpdate=yh}break a;case 5:case 7:case 8:case 6:break a;default:t("163")}}Q=Q.nextEffect}}catch(Xa){e=!0,f=Xa}e&&(null===Q?t("178"):void 0,wg(Q,f),null!==Q&&(Q=Q.nextEffect))}for(Q=d;null!==Q;){p=!1;u=void 0;try{for(;null!==Q;){var w=Q.effectTag;w&16&&oe(Q.stateNode,"");if(w&128){var y=Q.alternate;if(null!==y){var q=y.ref;null!==q&&("function"===typeof q?q(null):q.current=null)}}switch(w&14){case 2:Ag(Q);Q.effectTag&=-3;break;case 6:Ag(Q);Q.effectTag&=-3;Bg(Q.alternate,
Q);break;case 4:Bg(Q.alternate,Q);break;case 8:x=Q,yg(x),x.return=null,x.child=null,x.alternate&&(x.alternate.child=null,x.alternate.return=null)}Q=Q.nextEffect}}catch(Xa){p=!0,u=Xa}p&&(null===Q?t("178"):void 0,wg(Q,u),null!==Q&&(Q=Q.nextEffect))}q=ye;y=Td();w=q.focusedElem;u=q.selectionRange;if(y!==w&&w&&w.ownerDocument&&Sd(w.ownerDocument.documentElement,w)){null!==u&&Ud(w)&&(y=u.start,q=u.end,void 0===q&&(q=y),"selectionStart"in w?(w.selectionStart=y,w.selectionEnd=Math.min(q,w.value.length)):
(p=w.ownerDocument||document,y=(p&&p.defaultView||window).getSelection(),x=w.textContent.length,q=Math.min(u.start,x),u=void 0===u.end?q:Math.min(u.end,x),!y.extend&&q>u&&(x=u,u=q,q=x),x=Rd(w,q),R=Rd(w,u),x&&R&&(1!==y.rangeCount||y.anchorNode!==x.node||y.anchorOffset!==x.offset||y.focusNode!==R.node||y.focusOffset!==R.offset)&&(p=p.createRange(),p.setStart(x.node,x.offset),y.removeAllRanges(),q>u?(y.addRange(p),y.extend(R.node,R.offset)):(p.setEnd(R.node,R.offset),y.addRange(p)))));y=[];for(q=w;q=
q.parentNode;)1===q.nodeType&&y.push({element:q,left:q.scrollLeft,top:q.scrollTop});"function"===typeof w.focus&&w.focus();for(w=0;w<y.length;w++)q=y[w],q.element.scrollLeft=q.left,q.element.scrollTop=q.top}ye=null;Gd=!!xe;xe=null;a.current=b;for(Q=d;null!==Q;){d=!1;w=void 0;try{for(y=c;null!==Q;){var Sa=Q.effectTag;if(Sa&36){var oc=Q.alternate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.componentDidMount();
else{var Ih=oc.memoizedProps,Jh=oc.memoizedState;X.props=q.memoizedProps;X.state=q.memoizedState;X.componentDidUpdate(Ih,Jh,X.__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;case 5:var lg=q.updateQueue;if(null!==lg){u=null;if(null!==q.child)switch(q.child.tag){case 7:u=q.child.stateNode;break;case 2:case 3:u=q.child.stateNode}lf(q,lg,u,p)}break;case 7:var Kh=q.stateNode;null===oc&&q.effectTag&4&&ze(q.type,q.memoizedProps)&&
Kh.focus();break;case 8:break;case 6:break;case 15:break;case 16:break;default:t("163")}}if(Sa&128){var Ac=Q.ref;if(null!==Ac){var mg=Q.stateNode;switch(Q.tag){case 7:var Pd=mg;break;default:Pd=mg}"function"===typeof Ac?Ac(Pd):Ac.current=Pd}}var Lh=Q.nextEffect;Q.nextEffect=null;Q=Lh}}catch(Xa){d=!0,w=Xa}d&&(null===Q?t("178"):void 0,wg(Q,w),null!==Q&&(Q=Q.nextEffect))}Lg=Og=!1;"function"===typeof Oe&&Oe(b.stateNode);Sa=b.expirationTime;b=b.childExpirationTime;b=0===Sa||0!==b&&b<Sa?b:Sa;0===b&&(Fg=
null);a.expirationTime=b;a.finishedWork=null}function Tg(){return eh?!0:null===hh||hh.timeRemaining()>nh?!1:eh=!0}function Dg(a){null===Y?t("246"):void 0;Y.expirationTime=0;fh||(fh=!0,gh=a)}function sh(a,b){var c=W;W=!0;try{return a(b)}finally{(W=c)||V||Yg(1,null)}}function th(a,b){if(W&&!Wg){Wg=!0;try{return a(b)}finally{Wg=!1}}return a(b)}function uh(a,b,c){if(Ug)return a(b,c);W||V||0===Vg||(Yg(Vg,null),Vg=0);var d=Ug,e=W;W=Ug=!0;try{return a(b,c)}finally{Ug=d,(W=e)||V||Yg(1,null)}}
function vh(a){if(!a)return Fe;a=a._reactInternalFiber;a:{2!==jd(a)||2!==a.tag&&3!==a.tag?t("170"):void 0;var b=a;do{switch(b.tag){case 5:b=b.stateNode.context;break a;case 2:if(K(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}break;case 3:if(K(b.type._reactResult)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);t("171");b=void 0}if(2===a.tag){var c=a.type;if(K(c))return Le(a,c,b)}else if(3===a.tag&&(c=a.type._reactResult,K(c)))return Le(a,
c,b);return b}function wh(a,b,c,d,e){var f=b.current;c=vh(c);null===b.context?b.context=c:b.pendingContext=c;b=e;e=df(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);ff(f,e);If(f,d);return d}function xh(a,b,c,d){var e=b.current,f=Gf();e=Hf(f,e);return wh(a,b,c,e,d)}function zh(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 7:return a.child.stateNode;default:return a.child.stateNode}}
function Ah(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ac,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
Fb=function(a,b,c){switch(b){case "input":Dc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Na(d);e?void 0:t("90");Xb(d);Dc(d,e)}}}break;case "textarea":he(a,c);break;case "select":b=c.value,null!=b&&ee(a,!!c.multiple,b,!1)}};
function Bh(a){var b=2+25*(((Gf()-2+500)/25|0)+1);b<=Jg&&(b=Jg+1);this._expirationTime=Jg=b;this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0}Bh.prototype.render=function(a){this._defer?void 0:t("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new Ch;wh(a,b,null,c,d._onCommit);return d};
Bh.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
Bh.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:t("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?t("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this}this._defer=!1;b=c;V?t("253"):void 0;Y=a;Z=b;Xg(a,b,!0);Yg(1,null);b=this._next;this._next=null;b=a.firstBatch=b;null!==
b&&b._hasChildren&&b.render(b._children)}else this._next=null,this._defer=!1};Bh.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0,a[b])()}};function Ch(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this)}Ch.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a)}};
Ch.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?t("191",c):void 0;c()}}};
function Dh(a,b,c){b=new Se(5,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:c,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null};this._internalRoot=b.stateNode=a}
Dh.prototype.render=function(a,b){var c=this._internalRoot,d=new Ch;b=void 0===b?null:b;null!==b&&d.then(b);xh(a,c,null,d._onCommit);return d};Dh.prototype.unmount=function(a){var b=this._internalRoot,c=new Ch;a=void 0===a?null:a;null!==a&&c.then(a);xh(null,b,null,c._onCommit);return c};Dh.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new Ch;c=void 0===c?null:c;null!==c&&e.then(c);xh(b,d,a,e._onCommit);return e};
Dh.prototype.createBatch=function(){var a=new Bh(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime<=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a)}return a};function Eh(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Lb=sh;Mb=uh;Nb=function(){V||0===Vg||(Yg(Vg,null),Vg=0)};
function Fh(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new Dh(a,!1,b)}
function Gh(a,b,c,d,e){Eh(c)?void 0:t("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=zh(f._internalRoot);g.call(a)}}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)}else{f=c._reactRootContainer=Fh(c,d);if("function"===typeof e){var h=e;e=function(){var a=zh(f._internalRoot);h.call(a)}}th(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e)})}return zh(f._internalRoot)}
function Hh(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Eh(b)?void 0:t("200");return Ah(a,b,null,c)}
var Mh={createPortal:Hh,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?t("188"):t("268",Object.keys(a)));a=md(b);a=null===a?null:a.stateNode;return a},hydrate:function(a,b,c){return Gh(null,a,b,!0,c)},render:function(a,b,c){return Gh(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?t("38"):void 0;return Gh(a,b,c,!1,d)},unmountComponentAtNode:function(a){Eh(a)?
void 0:t("40");return a._reactRootContainer?(th(function(){Gh(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},unstable_createPortal:function(){return Hh.apply(void 0,arguments)},unstable_batchedUpdates:sh,unstable_interactiveUpdates:uh,flushSync:function(a,b){V?t("187"):void 0;var c=W;W=!0;try{return bh(a,b)}finally{W=c,Yg(1,null)}},unstable_flushControlled:function(a){var b=W;W=!0;try{bh(a)}finally{(W=b)||V||Yg(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[La,
Ma,Na,Ea.injectEventPluginsByName,qa,Ua,function(a){za(a,Ta)},Jb,Kb,Id,Ga]},unstable_createRoot:function(a,b){Eh(a)?void 0:t("278");return new Dh(a,!0,null!=b&&!0===b.hydrate)}};(function(a){var b=a.findFiberByHostInstance;return Re(n({},a,{findHostInstanceByFiber:function(a){a=md(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ka,bundleType:0,version:"16.5.2",rendererPackageName:"react-dom"});
var Nh={default:Mh},Oh=Nh&&Mh||Nh;module.exports=Oh.default||Oh;

},{"object-assign":365,"react":378,"schedule":384}],374:[function(require,module,exports){
(function (process){
'use strict';

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = require('./cjs/react-dom.production.min.js');
} else {
  module.exports = require('./cjs/react-dom.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react-dom.development.js":372,"./cjs/react-dom.production.min.js":373,"_process":366}],375:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ScrollArea=t(require("react")):e.ScrollArea=t(e.React)}(this,function(e){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),i=o(r);t.default=i.default},function(t,n){t.exports=e},function(e,t,n){e.exports=n(17)()},function(e,t){"use strict";function n(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]="number"==typeof e[n]?e[n]:e[n].val);return t}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t,n){(function(t){(function(){var n,o,r;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-r)/1e6},o=t.hrtime,n=function(){var e;return e=o(),1e9*e[0]+e[1]},r=n()):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}).call(t,n(10))},function(e,t,n){(function(t){for(var o=n(21),r="undefined"==typeof window?t:window,i=["moz","webkit"],a="AnimationFrame",l=r["request"+a],s=r["cancel"+a]||r["cancelRequest"+a],u=0;!l&&u<i.length;u++)l=r[i[u]+"Request"+a],s=r[i[u]+"Cancel"+a]||r[i[u]+"CancelRequest"+a];if(!l||!s){var c=0,f=0,p=[],d=1e3/60;l=function(e){if(0===p.length){var t=o(),n=Math.max(0,d-(t-c));c=n+t,setTimeout(function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(c)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return p.push({handle:++f,callback:e,cancelled:!1}),f},s=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}e.exports=function(e){return l.call(r,e)},e.exports.cancel=function(){s.apply(r,arguments)},e.exports.polyfill=function(e){e||(e=r),e.requestAnimationFrame=l,e.cancelAnimationFrame=s}}).call(t,function(){return this}())},function(e,t){"use strict";function n(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=0);return t}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t){"use strict";function n(e,t,n){for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){if(0!==n[o])return!1;var r="number"==typeof t[o]?t[o]:t[o].val;if(e[o]!==r)return!1}return!0}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t){"use strict";function n(e,t,n,r,i,a,l){var s=-i*(t-r),u=-a*n,c=s+u,f=n+c*e,p=t+f*e;return Math.abs(f)<l&&Math.abs(p-r)<l?(o[0]=r,o[1]=0,o):(o[0]=p,o[1]=f,o)}t.__esModule=!0,t.default=n;var o=[0,0];e.exports=t.default},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e){return p?f.default.findDOMNode(e):e}function i(){d||p||(d=!0,console.error("With React 0.14 and later versions, you no longer need to wrap <ScrollArea> child into a function."))}function a(){!d&&p&&(d=!0,console.error("With React 0.13, you need to wrap <ScrollArea> child into a function."))}function l(e){return e<0?0:e}function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},n={};for(var o in e)e.hasOwnProperty(o)&&(n[o]=t(e[o]));return n}function u(e){var t=e.version;if("string"!=typeof t)return!0;var n=t.split("."),o=parseInt(n[0],10),r=parseInt(n[1],10);return 0===o&&13===r}Object.defineProperty(t,"__esModule",{value:!0}),t.findDOMNode=r,t.warnAboutFunctionChild=i,t.warnAboutElementChild=a,t.positiveOrZero=l,t.modifyObjValues=s,t.isReact13=u;var c=n(1),f=o(c),p=u(f.default),d=!1},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function r(e){if(c===setTimeout)return setTimeout(e,0);if((c===n||!c)&&setTimeout)return c=setTimeout,setTimeout(e,0);try{return c(e,0)}catch(t){try{return c.call(null,e,0)}catch(t){return c.call(this,e,0)}}}function i(e){if(f===clearTimeout)return clearTimeout(e);if((f===o||!f)&&clearTimeout)return f=clearTimeout,clearTimeout(e);try{return f(e)}catch(t){try{return f.call(null,e)}catch(t){return f.call(this,e)}}}function a(){y&&d&&(y=!1,d.length?h=d.concat(h):m=-1,h.length&&l())}function l(){if(!y){var e=r(a);y=!0;for(var t=h.length;t;){for(d=h,h=[];++m<t;)d&&d[m].run();m=-1,t=h.length}d=null,y=!1,i(e)}}function s(e,t){this.fun=e,this.array=t}function u(){}var c,f,p=e.exports={};!function(){try{c="function"==typeof setTimeout?setTimeout:n}catch(e){c=n}try{f="function"==typeof clearTimeout?clearTimeout:o}catch(e){f=o}}();var d,h=[],y=!1,m=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new s(e,t)),1!==h.length||y||r(l)},s.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=u,p.addListener=u,p.once=u,p.off=u,p.removeListener=u,p.removeAllListeners=u,p.emit=u,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},function(e,t){"use strict";t.__esModule=!0,t.default={noWobble:{stiffness:170,damping:26},gentle:{stiffness:120,damping:14},wobbly:{stiffness:180,damping:12},stiff:{stiffness:210,damping:20}},e.exports=t.default},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e.default:e}t.__esModule=!0;var r=n(22);t.Motion=o(r);var i=n(23);t.StaggeredMotion=o(i);var a=n(24);t.TransitionMotion=o(a);var l=n(27);t.spring=o(l);var s=n(11);t.presets=o(s);var u=n(3);t.stripStyle=o(u);var c=n(26);t.reorderKeys=o(c)},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),c=n(1),f=o(c),p=n(2),d=o(p),h=n(16),y=o(h),m=n(12),v=n(9),S=n(14),b=o(S),g={wheel:"wheel",api:"api",touch:"touch",touchEnd:"touchEnd",mousemove:"mousemove",keyPress:"keypress"},w=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={topPosition:0,leftPosition:0,realHeight:0,containerHeight:0,realWidth:0,containerWidth:0},n.scrollArea={refresh:function(){n.setSizesToState()},scrollTop:function(){n.scrollTop()},scrollBottom:function(){n.scrollBottom()},scrollYTo:function(e){n.scrollYTo(e)},scrollLeft:function(){n.scrollLeft()},scrollRight:function(){n.scrollRight()},scrollXTo:function(e){n.scrollXTo(e)}},n.evntsPreviousValues={clientX:0,clientY:0,deltaX:0,deltaY:0},n.bindedHandleWindowResize=n.handleWindowResize.bind(n),n}return a(t,e),u(t,[{key:"getChildContext",value:function(){return{scrollArea:this.scrollArea}}},{key:"componentDidMount",value:function(){this.props.contentWindow&&this.props.contentWindow.addEventListener("resize",this.bindedHandleWindowResize),this.lineHeightPx=(0,y.default)((0,v.findDOMNode)(this.content)),this.setSizesToState()}},{key:"componentWillUnmount",value:function(){this.props.contentWindow&&this.props.contentWindow.removeEventListener("resize",this.bindedHandleWindowResize)}},{key:"componentDidUpdate",value:function(){this.setSizesToState()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,o=t.className,r=t.contentClassName,i=t.ownerDocument,a=this.props.smoothScrolling&&(this.state.eventType===g.wheel||this.state.eventType===g.api||this.state.eventType===g.touchEnd||this.state.eventType===g.keyPress),l=this.canScrollY()?f.default.createElement(b.default,{ownerDocument:i,realSize:this.state.realHeight,containerSize:this.state.containerHeight,position:this.state.topPosition,onMove:this.handleScrollbarMove.bind(this),onPositionChange:this.handleScrollbarYPositionChange.bind(this),containerStyle:this.props.verticalContainerStyle,scrollbarStyle:this.props.verticalScrollbarStyle,smoothScrolling:a,minScrollSize:this.props.minScrollSize,onFocus:this.focusContent.bind(this),type:"vertical"}):null,u=this.canScrollX()?f.default.createElement(b.default,{ownerDocument:i,realSize:this.state.realWidth,containerSize:this.state.containerWidth,position:this.state.leftPosition,onMove:this.handleScrollbarMove.bind(this),onPositionChange:this.handleScrollbarXPositionChange.bind(this),containerStyle:this.props.horizontalContainerStyle,scrollbarStyle:this.props.horizontalScrollbarStyle,smoothScrolling:a,minScrollSize:this.props.minScrollSize,onFocus:this.focusContent.bind(this),type:"horizontal"}):null;"function"==typeof n?((0,v.warnAboutFunctionChild)(),n=n()):(0,v.warnAboutElementChild)();var c="scrollarea "+(o||""),p="scrollarea-content "+(r||""),d={marginTop:-this.state.topPosition,marginLeft:-this.state.leftPosition},h=a?(0,v.modifyObjValues)(d,function(e){return(0,m.spring)(e)}):d;return f.default.createElement(m.Motion,{style:h},function(t){return f.default.createElement("div",{ref:function(t){return e.wrapper=t},className:c,style:e.props.style,onWheel:e.handleWheel.bind(e)},f.default.createElement("div",{ref:function(t){return e.content=t},style:s({},e.props.contentStyle,t),className:p,onTouchStart:e.handleTouchStart.bind(e),onTouchMove:e.handleTouchMove.bind(e),onTouchEnd:e.handleTouchEnd.bind(e),onKeyDown:e.handleKeyDown.bind(e),tabIndex:e.props.focusableTabIndex},n),l,u)})}},{key:"setStateFromEvent",value:function(e,t){this.props.onScroll&&this.props.onScroll(e),this.setState(s({},e,{eventType:t}))}},{key:"handleTouchStart",value:function(e){var t=e.touches;if(1===t.length){var n=t[0],o=n.clientX,r=n.clientY;this.eventPreviousValues=s({},this.eventPreviousValues,{clientY:r,clientX:o,timestamp:Date.now()})}}},{key:"handleTouchMove",value:function(e){this.canScroll()&&(e.preventDefault(),e.stopPropagation());var t=e.touches;if(1===t.length){var n=t[0],o=n.clientX,r=n.clientY,i=this.eventPreviousValues.clientY-r,a=this.eventPreviousValues.clientX-o;this.eventPreviousValues=s({},this.eventPreviousValues,{deltaY:i,deltaX:a,clientY:r,clientX:o,timestamp:Date.now()}),this.setStateFromEvent(this.composeNewState(-a,-i))}}},{key:"handleTouchEnd",value:function(e){var t=this.eventPreviousValues,n=t.deltaX,o=t.deltaY,r=t.timestamp;"undefined"==typeof n&&(n=0),"undefined"==typeof o&&(o=0),Date.now()-r<200&&this.setStateFromEvent(this.composeNewState(10*-n,10*-o),g.touchEnd),this.eventPreviousValues=s({},this.eventPreviousValues,{deltaY:0,deltaX:0})}},{key:"handleScrollbarMove",value:function(e,t){this.setStateFromEvent(this.composeNewState(t,e))}},{key:"handleScrollbarXPositionChange",value:function(e){this.scrollXTo(e)}},{key:"handleScrollbarYPositionChange",value:function(e){this.scrollYTo(e)}},{key:"handleWheel",value:function(e){var t=e.deltaY,n=e.deltaX;if(this.props.swapWheelAxes){var o=[n,t];t=o[0],n=o[1]}1===e.deltaMode&&(t*=this.lineHeightPx,n*=this.lineHeightPx),t*=this.props.speed,n*=this.props.speed;var r=this.composeNewState(-n,-t);(r.topPosition&&this.state.topPosition!==r.topPosition||r.leftPosition&&this.state.leftPosition!==r.leftPosition||this.props.stopScrollPropagation)&&(e.preventDefault(),e.stopPropagation()),this.setStateFromEvent(r,g.wheel),this.focusContent()}},{key:"handleKeyDown",value:function(e){if("input"!==e.target.tagName.toLowerCase()&&"textarea"!==e.target.tagName.toLowerCase()&&!e.target.isContentEditable){var t=0,n=0,o=this.lineHeightPx?this.lineHeightPx:10;switch(e.keyCode){case 33:t=this.state.containerHeight-o;break;case 34:t=-this.state.containerHeight+o;break;case 37:n=o;break;case 38:t=o;break;case 39:n=-o;break;case 40:t=-o}if(0!==t||0!==n){var r=this.composeNewState(n,t);e.preventDefault(),e.stopPropagation(),this.setStateFromEvent(r,g.keyPress)}}}},{key:"handleWindowResize",value:function(){var e=this.computeSizes();e=this.getModifiedPositionsIfNeeded(e),this.setStateFromEvent(e)}},{key:"composeNewState",value:function(e,t){var n=this.computeSizes();return this.canScrollY(n)?n.topPosition=this.computeTopPosition(t,n):n.topPosition=0,this.canScrollX(n)&&(n.leftPosition=this.computeLeftPosition(e,n)),n}},{key:"computeTopPosition",value:function(e,t){var n=this.state.topPosition-e;return this.normalizeTopPosition(n,t)}},{key:"computeLeftPosition",value:function(e,t){var n=this.state.leftPosition-e;return this.normalizeLeftPosition(n,t)}},{key:"normalizeTopPosition",value:function(e,t){return e>t.realHeight-t.containerHeight&&(e=t.realHeight-t.containerHeight),e<0&&(e=0),e}},{key:"normalizeLeftPosition",value:function(e,t){return e>t.realWidth-t.containerWidth?e=t.realWidth-t.containerWidth:e<0&&(e=0),e}},{key:"computeSizes",value:function(){var e=this.content.offsetHeight,t=this.wrapper.offsetHeight,n=this.content.offsetWidth,o=this.wrapper.offsetWidth;return{realHeight:e,containerHeight:t,realWidth:n,containerWidth:o}}},{key:"setSizesToState",value:function(){var e=this.computeSizes();e.realHeight===this.state.realHeight&&e.realWidth===this.state.realWidth||this.setStateFromEvent(this.getModifiedPositionsIfNeeded(e))}},{key:"scrollTop",value:function(){this.scrollYTo(0)}},{key:"scrollBottom",value:function(){this.scrollYTo(this.state.realHeight-this.state.containerHeight)}},{key:"scrollLeft",value:function(){this.scrollXTo(0)}},{key:"scrollRight",value:function(){this.scrollXTo(this.state.realWidth-this.state.containerWidth)}},{key:"scrollYTo",value:function(e){if(this.canScrollY()){var t=this.normalizeTopPosition(e,this.computeSizes());this.setStateFromEvent({topPosition:t},g.api)}}},{key:"scrollXTo",value:function(e){if(this.canScrollX()){var t=this.normalizeLeftPosition(e,this.computeSizes());this.setStateFromEvent({leftPosition:t},g.api)}}},{key:"canScrollY",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.state,t=e.realHeight>e.containerHeight;return t&&this.props.vertical}},{key:"canScrollX",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.state,t=e.realWidth>e.containerWidth;return t&&this.props.horizontal}},{key:"canScroll",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.state;return this.canScrollY(e)||this.canScrollX(e)}},{key:"getModifiedPositionsIfNeeded",value:function(e){var t=e.realHeight-e.containerHeight;this.state.topPosition>=t&&(e.topPosition=this.canScrollY(e)?(0,v.positiveOrZero)(t):0);var n=e.realWidth-e.containerWidth;return this.state.leftPosition>=n&&(e.leftPosition=this.canScrollX(e)?(0,v.positiveOrZero)(n):0),e}},{key:"focusContent",value:function(){this.content&&(0,v.findDOMNode)(this.content).focus()}}]),t}(f.default.Component);t.default=w,w.childContextTypes={scrollArea:d.default.object},w.propTypes={className:d.default.string,style:d.default.object,speed:d.default.number,contentClassName:d.default.string,contentStyle:d.default.object,vertical:d.default.bool,verticalContainerStyle:d.default.object,verticalScrollbarStyle:d.default.object,horizontal:d.default.bool,horizontalContainerStyle:d.default.object,horizontalScrollbarStyle:d.default.object,onScroll:d.default.func,contentWindow:d.default.any,ownerDocument:d.default.any,smoothScrolling:d.default.bool,minScrollSize:d.default.number,swapWheelAxes:d.default.bool,stopScrollPropagation:d.default.bool,focusableTabIndex:d.default.number},w.defaultProps={speed:1,vertical:!0,horizontal:!0,smoothScrolling:!1,swapWheelAxes:!1,contentWindow:"object"===("undefined"==typeof window?"undefined":l(window))?window:void 0,ownerDocument:"object"===("undefined"==typeof document?"undefined":l(document))?document:void 0,focusableTabIndex:1}},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n(1),c=o(u),f=n(2),p=o(f),d=n(12),h=n(9),y=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)),o=n.calculateState(e);return n.state={position:o.position,scrollSize:o.scrollSize,isDragging:!1,lastClientPosition:0},"vertical"===e.type?n.bindedHandleMouseMove=n.handleMouseMoveForVertical.bind(n):n.bindedHandleMouseMove=n.handleMouseMoveForHorizontal.bind(n),n.bindedHandleMouseUp=n.handleMouseUp.bind(n),n}return a(t,e),s(t,[{key:"componentDidMount",value:function(){this.props.ownerDocument&&(this.props.ownerDocument.addEventListener("mousemove",this.bindedHandleMouseMove),this.props.ownerDocument.addEventListener("mouseup",this.bindedHandleMouseUp))}},{key:"componentWillReceiveProps",value:function(e){this.setState(this.calculateState(e))}},{key:"componentWillUnmount",value:function(){this.props.ownerDocument&&(this.props.ownerDocument.removeEventListener("mousemove",this.bindedHandleMouseMove),this.props.ownerDocument.removeEventListener("mouseup",this.bindedHandleMouseUp))}},{key:"calculateFractionalPosition",value:function(e,t,n){var o=e-t;return 1-(o-n)/o}},{key:"calculateState",value:function(e){var t=this.calculateFractionalPosition(e.realSize,e.containerSize,e.position),n=e.containerSize*e.containerSize/e.realSize,o=n<e.minScrollSize?e.minScrollSize:n,r=(e.containerSize-o)*t;return{scrollSize:o,position:Math.round(r)}}},{key:"render",value:function(){var e=this,t=this.props,n=t.smoothScrolling,o=t.isDragging,r=t.type,i=t.scrollbarStyle,a=t.containerStyle,s="horizontal"===r,u="vertical"===r,f=this.createScrollStyles(),p=n?(0,h.modifyObjValues)(f,function(e){return(0,d.spring)(e)}):f,y="scrollbar-container "+(o?"active":"")+" "+(s?"horizontal":"")+" "+(u?"vertical":"");return c.default.createElement(d.Motion,{style:p},function(t){return c.default.createElement("div",{className:y,style:a,onMouseDown:e.handleScrollBarContainerClick.bind(e),ref:function(t){return e.scrollbarContainer=t}},c.default.createElement("div",{className:"scrollbar",style:l({},i,t),onMouseDown:e.handleMouseDown.bind(e)}))})}},{key:"handleScrollBarContainerClick",value:function(e){e.preventDefault();var t=this.computeMultiplier(),n=this.isVertical()?e.clientY:e.clientX,o=this.scrollbarContainer.getBoundingClientRect(),r=o.top,i=o.left,a=this.isVertical()?r:i,l=n-a,s=this.props.containerSize*this.props.containerSize/this.props.realSize;this.setState({isDragging:!0,lastClientPosition:n}),this.props.onPositionChange((l-s/2)/t)}},{key:"handleMouseMoveForHorizontal",value:function(e){var t=this.computeMultiplier();if(this.state.isDragging){e.preventDefault();var n=this.state.lastClientPosition-e.clientX;this.setState({lastClientPosition:e.clientX}),this.props.onMove(0,n/t)}}},{key:"handleMouseMoveForVertical",value:function(e){var t=this.computeMultiplier();if(this.state.isDragging){e.preventDefault();var n=this.state.lastClientPosition-e.clientY;this.setState({lastClientPosition:e.clientY}),this.props.onMove(n/t,0)}}},{key:"handleMouseDown",value:function(e){e.preventDefault(),e.stopPropagation();var t=this.isVertical()?e.clientY:e.clientX;this.setState({isDragging:!0,lastClientPosition:t}),this.props.onFocus()}},{key:"handleMouseUp",value:function(e){this.state.isDragging&&(e.preventDefault(),this.setState({isDragging:!1}))}},{key:"createScrollStyles",value:function(){return"vertical"===this.props.type?{height:this.state.scrollSize,marginTop:this.state.position}:{width:this.state.scrollSize,marginLeft:this.state.position}}},{key:"computeMultiplier",value:function(){return this.props.containerSize/this.props.realSize}},{key:"isVertical",value:function(){return"vertical"===this.props.type}}]),t}(c.default.Component);y.propTypes={onMove:p.default.func,onPositionChange:p.default.func,onFocus:p.default.func,realSize:p.default.number,containerSize:p.default.number,position:p.default.number,containerStyle:p.default.object,scrollbarStyle:p.default.object,type:p.default.oneOf(["vertical","horizontal"]),ownerDocument:p.default.any,smoothScrolling:p.default.bool,minScrollSize:p.default.number},y.defaultProps={type:"vertical",smoothScrolling:!1},t.default=y},function(e,t){var n=function(e,t,n){return n=window.getComputedStyle,(n?n(e):e.currentStyle)[t.replace(/-(\w)/gi,function(e,t){return t.toUpperCase()})]};e.exports=n},function(e,t,n){function o(e){var t=r(e,"line-height"),n=parseFloat(t,10);if(t===n+""){var o=e.style.lineHeight;e.style.lineHeight=t+"em",t=r(e,"line-height"),n=parseFloat(t,10),o?e.style.lineHeight=o:delete e.style.lineHeight}if(t.indexOf("pt")!==-1?(n*=4,n/=3):t.indexOf("mm")!==-1?(n*=96,n/=25.4):t.indexOf("cm")!==-1?(n*=96,n/=2.54):t.indexOf("in")!==-1?n*=96:t.indexOf("pc")!==-1&&(n*=16),n=Math.round(n),"normal"===t){var i=e.nodeName,a=document.createElement(i);a.innerHTML="&nbsp;";var l=r(e,"font-size");a.style.fontSize=l;var s=document.body;s.appendChild(a);var u=a.offsetHeight;n=u,s.removeChild(a)}return n}var r=n(15);e.exports=o},function(e,t,n){"use strict";var o=n(19),r=n(20),i=n(18);e.exports=function(){function e(e,t,n,o,a,l){l!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t){"use strict";function n(e){return function(){return e}}var o=function(){};o.thatReturns=n,o.thatReturnsFalse=n(!1),o.thatReturnsTrue=n(!0),o.thatReturnsNull=n(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";function o(e,t,n,o,i,a,l,s){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,l,s],f=0;u=new Error(t.replace(/%s/g,function(){return c[f++]})),u.name="Invariant Violation"}throw u.framesToPop=1,u}}var r=function(e){};e.exports=o},function(e,t,n){(function(t){(function(){var n,o,r,i,a,l;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-a)/1e6},o=t.hrtime,n=function(){var e;return e=o(),1e9*e[0]+e[1]},i=n(),l=1e9*t.uptime(),a=i-l):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}).call(t,n(10))},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(6),u=o(s),c=n(3),f=o(c),p=n(8),d=o(p),h=n(4),y=o(h),m=n(5),v=o(m),S=n(7),b=o(S),g=n(1),w=o(g),P=n(2),T=o(P),O=1e3/60,k=function(e){function t(n){var o=this;r(this,t),e.call(this,n),this.wasAnimating=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyle=null,this.clearUnreadPropStyle=function(e){var t=!1,n=o.state,r=n.currentStyle,i=n.currentVelocity,l=n.lastIdealStyle,s=n.lastIdealVelocity;for(var u in e)if(Object.prototype.hasOwnProperty.call(e,u)){var c=e[u];"number"==typeof c&&(t||(t=!0,r=a({},r),i=a({},i),l=a({},l),s=a({},s)),r[u]=c,i[u]=0,l[u]=c,s[u]=0)}t&&o.setState({currentStyle:r,currentVelocity:i,lastIdealStyle:l,lastIdealVelocity:s})},this.startAnimationIfNecessary=function(){o.animationID=v.default(function(e){var t=o.props.style;if(b.default(o.state.currentStyle,t,o.state.currentVelocity))return o.wasAnimating&&o.props.onRest&&o.props.onRest(),o.animationID=null,o.wasAnimating=!1,void(o.accumulatedTime=0);o.wasAnimating=!0;var n=e||y.default(),r=n-o.prevTime;if(o.prevTime=n,o.accumulatedTime=o.accumulatedTime+r,o.accumulatedTime>10*O&&(o.accumulatedTime=0),0===o.accumulatedTime)return o.animationID=null,void o.startAnimationIfNecessary();var i=(o.accumulatedTime-Math.floor(o.accumulatedTime/O)*O)/O,a=Math.floor(o.accumulatedTime/O),l={},s={},u={},c={};for(var f in t)if(Object.prototype.hasOwnProperty.call(t,f)){var p=t[f];if("number"==typeof p)u[f]=p,c[f]=0,l[f]=p,s[f]=0;else{for(var h=o.state.lastIdealStyle[f],m=o.state.lastIdealVelocity[f],v=0;v<a;v++){var S=d.default(O/1e3,h,m,p.val,p.stiffness,p.damping,p.precision);h=S[0],m=S[1]}var g=d.default(O/1e3,h,m,p.val,p.stiffness,p.damping,p.precision),w=g[0],P=g[1];u[f]=h+(w-h)*i,c[f]=m+(P-m)*i,l[f]=h,s[f]=m}}o.animationID=null,o.accumulatedTime-=a*O,o.setState({currentStyle:u,currentVelocity:c,lastIdealStyle:l,lastIdealVelocity:s}),o.unreadPropStyle=null,o.startAnimationIfNecessary()})},this.state=this.defaultState()}return i(t,e),l(t,null,[{key:"propTypes",value:{defaultStyle:T.default.objectOf(T.default.number),style:T.default.objectOf(T.default.oneOfType([T.default.number,T.default.object])).isRequired,children:T.default.func.isRequired,onRest:T.default.func},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyle,n=e.style,o=t||f.default(n),r=u.default(o);return{currentStyle:o,currentVelocity:r,lastIdealStyle:o,lastIdealVelocity:r}},t.prototype.componentDidMount=function(){this.prevTime=y.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyle&&this.clearUnreadPropStyle(this.unreadPropStyle),this.unreadPropStyle=e.style,null==this.animationID&&(this.prevTime=y.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(v.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyle);return e&&w.default.Children.only(e)},t}(w.default.Component);t.default=k,e.exports=t.default},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t,n){for(var o=0;o<e.length;o++)if(!g.default(e[o],t[o],n[o]))return!1;return!0}t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n(6),c=o(u),f=n(3),p=o(f),d=n(8),h=o(d),y=n(4),m=o(y),v=n(5),S=o(v),b=n(7),g=o(b),w=n(1),P=o(w),T=n(2),O=o(T),k=1e3/60,M=function(e){function t(n){var o=this;r(this,t),e.call(this,n),this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=o.state,n=t.currentStyles,r=t.currentVelocities,i=t.lastIdealStyles,a=t.lastIdealVelocities,s=!1,u=0;u<e.length;u++){var c=e[u],f=!1;for(var p in c)if(Object.prototype.hasOwnProperty.call(c,p)){var d=c[p];"number"==typeof d&&(f||(f=!0,s=!0,n[u]=l({},n[u]),r[u]=l({},r[u]),i[u]=l({},i[u]),a[u]=l({},a[u])),n[u][p]=d,r[u][p]=0,i[u][p]=d,a[u][p]=0)}}s&&o.setState({currentStyles:n,currentVelocities:r,lastIdealStyles:i,lastIdealVelocities:a})},this.startAnimationIfNecessary=function(){o.animationID=S.default(function(e){var t=o.props.styles(o.state.lastIdealStyles);if(a(o.state.currentStyles,t,o.state.currentVelocities))return o.animationID=null,void(o.accumulatedTime=0);var n=e||m.default(),r=n-o.prevTime;if(o.prevTime=n,o.accumulatedTime=o.accumulatedTime+r,o.accumulatedTime>10*k&&(o.accumulatedTime=0),0===o.accumulatedTime)return o.animationID=null,void o.startAnimationIfNecessary();for(var i=(o.accumulatedTime-Math.floor(o.accumulatedTime/k)*k)/k,l=Math.floor(o.accumulatedTime/k),s=[],u=[],c=[],f=[],p=0;p<t.length;p++){var d=t[p],y={},v={},S={},b={};for(var g in d)if(Object.prototype.hasOwnProperty.call(d,g)){var w=d[g];if("number"==typeof w)y[g]=w,v[g]=0,S[g]=w,b[g]=0;else{for(var P=o.state.lastIdealStyles[p][g],T=o.state.lastIdealVelocities[p][g],O=0;O<l;O++){var M=h.default(k/1e3,P,T,w.val,w.stiffness,w.damping,w.precision);P=M[0],T=M[1]}var I=h.default(k/1e3,P,T,w.val,w.stiffness,w.damping,w.precision),D=I[0],_=I[1];y[g]=P+(D-P)*i,v[g]=T+(_-T)*i,S[g]=P,b[g]=T}}c[p]=y,f[p]=v,s[p]=S,u[p]=b}o.animationID=null,o.accumulatedTime-=l*k,o.setState({currentStyles:c,currentVelocities:f,lastIdealStyles:s,lastIdealVelocities:u}),o.unreadPropStyles=null,o.startAnimationIfNecessary()})},this.state=this.defaultState()}return i(t,e),s(t,null,[{key:"propTypes",value:{defaultStyles:O.default.arrayOf(O.default.objectOf(O.default.number)),styles:O.default.func.isRequired,
children:O.default.func.isRequired},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyles,n=e.styles,o=t||n().map(p.default),r=o.map(function(e){return c.default(e)});return{currentStyles:o,currentVelocities:r,lastIdealStyles:o,lastIdealVelocities:r}},t.prototype.componentDidMount=function(){this.prevTime=m.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){null!=this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles),this.unreadPropStyles=e.styles(this.state.lastIdealStyles),null==this.animationID&&(this.prevTime=m.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){null!=this.animationID&&(S.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=this.props.children(this.state.currentStyles);return e&&P.default.Children.only(e)},t}(P.default.Component);t.default=M,e.exports=t.default},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t,n){var o=t;return null==o?e.map(function(e,t){return{key:e.key,data:e.data,style:n[t]}}):e.map(function(e,t){for(var r=0;r<o.length;r++)if(o[r].key===e.key)return{key:o[r].key,data:o[r].data,style:n[t]};return{key:e.key,data:e.data,style:n[t]}})}function l(e,t,n,o){if(o.length!==t.length)return!1;for(var r=0;r<o.length;r++)if(o[r].key!==t[r].key)return!1;for(var r=0;r<o.length;r++)if(!O.default(e[r],t[r].style,n[r]))return!1;return!0}function s(e,t,n,o,r,i,a,l,s){for(var u=S.default(o,r,function(e,o){var r=t(o);return null==r?(n({key:o.key,data:o.data}),null):O.default(i[e],r,a[e])?(n({key:o.key,data:o.data}),null):{key:o.key,data:o.data,style:r}}),c=[],f=[],d=[],h=[],y=0;y<u.length;y++){for(var m=u[y],v=null,b=0;b<o.length;b++)if(o[b].key===m.key){v=b;break}if(null==v){var g=e(m);c[y]=g,d[y]=g;var w=p.default(m.style);f[y]=w,h[y]=w}else c[y]=i[v],d[y]=l[v],f[y]=a[v],h[y]=s[v]}return[u,c,f,d,h]}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),f=n(6),p=o(f),d=n(3),h=o(d),y=n(8),m=o(y),v=n(25),S=o(v),b=n(4),g=o(b),w=n(5),P=o(w),T=n(7),O=o(T),k=n(1),M=o(k),I=n(2),D=o(I),_=1e3/60,j=function(e){function t(n){var o=this;r(this,t),e.call(this,n),this.unmounting=!1,this.animationID=null,this.prevTime=0,this.accumulatedTime=0,this.unreadPropStyles=null,this.clearUnreadPropStyle=function(e){for(var t=s(o.props.willEnter,o.props.willLeave,o.props.didLeave,o.state.mergedPropsStyles,e,o.state.currentStyles,o.state.currentVelocities,o.state.lastIdealStyles,o.state.lastIdealVelocities),n=t[0],r=t[1],i=t[2],a=t[3],l=t[4],c=0;c<e.length;c++){var f=e[c].style,p=!1;for(var d in f)if(Object.prototype.hasOwnProperty.call(f,d)){var h=f[d];"number"==typeof h&&(p||(p=!0,r[c]=u({},r[c]),i[c]=u({},i[c]),a[c]=u({},a[c]),l[c]=u({},l[c]),n[c]={key:n[c].key,data:n[c].data,style:u({},n[c].style)}),r[c][d]=h,i[c][d]=0,a[c][d]=h,l[c][d]=0,n[c].style[d]=h)}}o.setState({currentStyles:r,currentVelocities:i,mergedPropsStyles:n,lastIdealStyles:a,lastIdealVelocities:l})},this.startAnimationIfNecessary=function(){o.unmounting||(o.animationID=P.default(function(e){if(!o.unmounting){var t=o.props.styles,n="function"==typeof t?t(a(o.state.mergedPropsStyles,o.unreadPropStyles,o.state.lastIdealStyles)):t;if(l(o.state.currentStyles,n,o.state.currentVelocities,o.state.mergedPropsStyles))return o.animationID=null,void(o.accumulatedTime=0);var r=e||g.default(),i=r-o.prevTime;if(o.prevTime=r,o.accumulatedTime=o.accumulatedTime+i,o.accumulatedTime>10*_&&(o.accumulatedTime=0),0===o.accumulatedTime)return o.animationID=null,void o.startAnimationIfNecessary();for(var u=(o.accumulatedTime-Math.floor(o.accumulatedTime/_)*_)/_,c=Math.floor(o.accumulatedTime/_),f=s(o.props.willEnter,o.props.willLeave,o.props.didLeave,o.state.mergedPropsStyles,n,o.state.currentStyles,o.state.currentVelocities,o.state.lastIdealStyles,o.state.lastIdealVelocities),p=f[0],d=f[1],h=f[2],y=f[3],v=f[4],S=0;S<p.length;S++){var b=p[S].style,w={},P={},T={},O={};for(var k in b)if(Object.prototype.hasOwnProperty.call(b,k)){var M=b[k];if("number"==typeof M)w[k]=M,P[k]=0,T[k]=M,O[k]=0;else{for(var I=y[S][k],D=v[S][k],j=0;j<c;j++){var x=m.default(_/1e3,I,D,M.val,M.stiffness,M.damping,M.precision);I=x[0],D=x[1]}var z=m.default(_/1e3,I,D,M.val,M.stiffness,M.damping,M.precision),C=z[0],E=z[1];w[k]=I+(C-I)*u,P[k]=D+(E-D)*u,T[k]=I,O[k]=D}}y[S]=T,v[S]=O,d[S]=w,h[S]=P}o.animationID=null,o.accumulatedTime-=c*_,o.setState({currentStyles:d,currentVelocities:h,lastIdealStyles:y,lastIdealVelocities:v,mergedPropsStyles:p}),o.unreadPropStyles=null,o.startAnimationIfNecessary()}}))},this.state=this.defaultState()}return i(t,e),c(t,null,[{key:"propTypes",value:{defaultStyles:D.default.arrayOf(D.default.shape({key:D.default.string.isRequired,data:D.default.any,style:D.default.objectOf(D.default.number).isRequired})),styles:D.default.oneOfType([D.default.func,D.default.arrayOf(D.default.shape({key:D.default.string.isRequired,data:D.default.any,style:D.default.objectOf(D.default.oneOfType([D.default.number,D.default.object])).isRequired}))]).isRequired,children:D.default.func.isRequired,willEnter:D.default.func,willLeave:D.default.func,didLeave:D.default.func},enumerable:!0},{key:"defaultProps",value:{willEnter:function(e){return h.default(e.style)},willLeave:function(){return null},didLeave:function(){}},enumerable:!0}]),t.prototype.defaultState=function(){var e=this.props,t=e.defaultStyles,n=e.styles,o=e.willEnter,r=e.willLeave,i=e.didLeave,a="function"==typeof n?n(t):n,l=void 0;l=null==t?a:t.map(function(e){for(var t=0;t<a.length;t++)if(a[t].key===e.key)return a[t];return e});var u=null==t?a.map(function(e){return h.default(e.style)}):t.map(function(e){return h.default(e.style)}),c=null==t?a.map(function(e){return p.default(e.style)}):t.map(function(e){return p.default(e.style)}),f=s(o,r,i,l,a,u,c,u,c),d=f[0],y=f[1],m=f[2],v=f[3],S=f[4];return{currentStyles:y,currentVelocities:m,lastIdealStyles:v,lastIdealVelocities:S,mergedPropsStyles:d}},t.prototype.componentDidMount=function(){this.prevTime=g.default(),this.startAnimationIfNecessary()},t.prototype.componentWillReceiveProps=function(e){this.unreadPropStyles&&this.clearUnreadPropStyle(this.unreadPropStyles);var t=e.styles;"function"==typeof t?this.unreadPropStyles=t(a(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.lastIdealStyles)):this.unreadPropStyles=t,null==this.animationID&&(this.prevTime=g.default(),this.startAnimationIfNecessary())},t.prototype.componentWillUnmount=function(){this.unmounting=!0,null!=this.animationID&&(P.default.cancel(this.animationID),this.animationID=null)},t.prototype.render=function(){var e=a(this.state.mergedPropsStyles,this.unreadPropStyles,this.state.currentStyles),t=this.props.children(e);return t&&M.default.Children.only(t)},t}(M.default.Component);t.default=j,e.exports=t.default},function(e,t){"use strict";function n(e,t,n){for(var o={},r=0;r<e.length;r++)o[e[r].key]=r;for(var i={},r=0;r<t.length;r++)i[t[r].key]=r;for(var a=[],r=0;r<t.length;r++)a[r]=t[r];for(var r=0;r<e.length;r++)if(!Object.prototype.hasOwnProperty.call(i,e[r].key)){var l=n(r,e[r]);null!=l&&a.push(l)}return a.sort(function(e,n){var r=i[e.key],a=i[n.key],l=o[e.key],s=o[n.key];if(null!=r&&null!=a)return i[e.key]-i[n.key];if(null!=l&&null!=s)return o[e.key]-o[n.key];if(null!=r){for(var u=0;u<t.length;u++){var c=t[u].key;if(Object.prototype.hasOwnProperty.call(o,c)){if(r<i[c]&&s>o[c])return-1;if(r>i[c]&&s<o[c])return 1}}return 1}for(var u=0;u<t.length;u++){var c=t[u].key;if(Object.prototype.hasOwnProperty.call(o,c)){if(a<i[c]&&l>o[c])return 1;if(a>i[c]&&l<o[c])return-1}}return-1})}t.__esModule=!0,t.default=n,e.exports=t.default},function(e,t,n){"use strict";function o(){}t.__esModule=!0,t.default=o;e.exports=t.default},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function r(e,t){return i({},s,t,{val:e})}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=r;var a=n(11),l=o(a),s=i({},l.default.noWobble,{precision:.01});e.exports=t.default}])});
},{"react":378}],376:[function(require,module,exports){
(function (process){
/** @license React v16.5.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = require('object-assign');
var checkPropTypes = require('prop-types/checkPropTypes');

// TODO: this is special because it gets imported during build.

var ReactVersion = '16.5.2';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;

var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_PLACEHOLDER_TYPE = hasSymbol ? Symbol.for('react.placeholder') : 0xead1;

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';

function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }
  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }
  return null;
}

// Exports ReactDOM.createRoot


// Experimental error-boundary API that can recover from errors within a single
// render phase

// Suspense
var enableSuspense = false;
// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:


// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.


// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


// Warn about legacy context API


// Gather advanced timing metrics for Profiler subtrees.


// Trace which interactions trigger each commit.


// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function () {};

{
  validateFormat = function (format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error = void 0;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

{
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

var lowPriorityWarning$1 = lowPriorityWarning;

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warningWithoutStack = function () {};

{
  warningWithoutStack = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (args.length > 8) {
      // Check before the condition to catch violations early.
      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
    }
    if (condition) {
      return;
    }
    if (typeof console !== 'undefined') {
      var _args$map = args.map(function (item) {
        return '' + item;
      }),
          a = _args$map[0],
          b = _args$map[1],
          c = _args$map[2],
          d = _args$map[3],
          e = _args$map[4],
          f = _args$map[5],
          g = _args$map[6],
          h = _args$map[7];

      var message = 'Warning: ' + format;

      // We intentionally don't use spread (or .apply) because it breaks IE9:
      // https://github.com/facebook/react/issues/13610
      switch (args.length) {
        case 0:
          console.error(message);
          break;
        case 1:
          console.error(message, a);
          break;
        case 2:
          console.error(message, a, b);
          break;
        case 3:
          console.error(message, a, b, c);
          break;
        case 4:
          console.error(message, a, b, c, d);
          break;
        case 5:
          console.error(message, a, b, c, d, e);
          break;
        case 6:
          console.error(message, a, b, c, d, e, f);
          break;
        case 7:
          console.error(message, a, b, c, d, e, f, g);
          break;
        case 8:
          console.error(message, a, b, c, d, e, f, g, h);
          break;
        default:
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
      }
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var _message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(_message);
    } catch (x) {}
  };
}

var warningWithoutStack$1 = warningWithoutStack;

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + '.' + callerName;
    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }
    warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};
{
  Object.freeze(emptyObject);
}

/**
 * Base class helpers for the updating state of a component.
 */
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  // If a component has string refs, we will assign a different object later.
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
        return undefined;
      }
    });
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}
ComponentDummy.prototype = Component.prototype;

/**
 * Convenience component with default shallow equality check for sCU.
 */
function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  // If a component has string refs, we will assign a different object later.
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent;
// Avoid an extra prototype jump for these methods.
_assign(pureComponentPrototype, Component.prototype);
pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };
  {
    Object.seal(refObject);
  }
  return refObject;
}

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null,
  currentDispatcher: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

var describeComponentFrame = function (name, source, ownerName) {
  var sourceInfo = '';
  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');
    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);
        if (match) {
          var pathBeforeSlash = match[1];
          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }
    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }
  return '\n    in ' + (name || 'Unknown') + sourceInfo;
};

var Resolved = 1;




function refineResolvedThenable(thenable) {
  return thenable._reactStatus === Resolved ? thenable._reactResult : null;
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }
  {
    if (typeof type.tag === 'number') {
      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }
  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }
  if (typeof type === 'string') {
    return type;
  }
  switch (type) {
    case REACT_ASYNC_MODE_TYPE:
      return 'AsyncMode';
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';
    case REACT_PORTAL_TYPE:
      return 'Portal';
    case REACT_PROFILER_TYPE:
      return 'Profiler';
    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';
    case REACT_PLACEHOLDER_TYPE:
      return 'Placeholder';
  }
  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';
      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';
      case REACT_FORWARD_REF_TYPE:
        var renderFn = type.render;
        var functionName = renderFn.displayName || renderFn.name || '';
        return type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    }
    if (typeof type.then === 'function') {
      var thenable = type;
      var resolvedThenable = refineResolvedThenable(thenable);
      if (resolvedThenable) {
        return getComponentName(resolvedThenable);
      }
    }
  }
  return null;
}

var ReactDebugCurrentFrame = {};

var currentlyValidatingElement = null;

function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = '';

    // Add an extra top frame while an element is being validated
    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    }

    // Delegate to the injected renderer-specific implementation
    var impl = ReactDebugCurrentFrame.getCurrentStack;
    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

var ReactSharedInternals = {
  ReactCurrentOwner: ReactCurrentOwner,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = warningWithoutStack$1;

{
  warning = function (condition, format) {
    if (condition) {
      return;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();
    // eslint-disable-next-line react-internal/warning-and-invariant-args

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
  };
}

var warning$1 = warning;

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown = void 0;
var specialPropRefWarningShown = void 0;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    });
    // self and source are DEV only properties.
    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    });
    // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.
    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */
function createElement(type, config, children) {
  var propName = void 0;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }
      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}

/**
 * Return a function that produces ReactElements of a given type.
 * See https://reactjs.org/docs/react-api.html#createfactory
 */


function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
}

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */
function cloneElement(element, config, children) {
  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;

  var propName = void 0;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps = void 0;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */
function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];
function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;
  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;
      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }
    }
  }

  if (invokeCallback) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child = void 0;
  var nextName = void 0;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (typeof iteratorFn === 'function') {
      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step = void 0;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

function readContext(context, observedBits) {
  var dispatcher = ReactCurrentOwner.currentDispatcher;
  !(dispatcher !== null) ? invariant(false, 'Context.unstable_read(): Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.') : void 0;
  return dispatcher.readContext(context, observedBits);
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // These are circular
    Provider: null,
    Consumer: null,
    unstable_read: null
  };

  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  context.Consumer = context;
  context.unstable_read = readContext.bind(null, context);

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var thenable = null;
  return {
    then: function (resolve, reject) {
      if (thenable === null) {
        // Lazily create thenable by wrapping in an extra thenable.
        thenable = ctor();
        ctor = null;
      }
      return thenable.then(resolve, reject);
    },

    // React uses these fields to store the result.
    _reactStatus: -1,
    _reactResult: null
  };
}

function forwardRef(render) {
  {
    if (typeof render !== 'function') {
      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      !(
      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
    }

    if (render != null) {
      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' ||
  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_ASYNC_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_PLACEHOLDER_TYPE || typeof type === 'object' && type !== null && (typeof type.then === 'function' || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
}

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

var propTypesMisspellWarningShown = void 0;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
  }

  setCurrentlyValidatingElement(element);
  {
    warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }
  setCurrentlyValidatingElement(null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step = void 0;
        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var type = element.type;
  var name = void 0,
      propTypes = void 0;
  if (typeof type === 'function') {
    // Class or functional component
    name = type.displayName || type.name;
    propTypes = type.propTypes;
  } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
    // ForwardRef
    var functionName = type.render.displayName || type.render.name || '';
    name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
    propTypes = type.propTypes;
  } else {
    return;
  }
  if (propTypes) {
    setCurrentlyValidatingElement(element);
    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
    setCurrentlyValidatingElement(null);
  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
    propTypesMisspellWarningShown = true;
    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
  }
  if (typeof type.getDefaultProps === 'function') {
    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */
function validateFragmentProps(fragment) {
  setCurrentlyValidatingElement(fragment);

  var keys = Object.keys(fragment.props);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (key !== 'children' && key !== 'key') {
      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
      break;
    }
  }

  if (fragment.ref !== null) {
    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
  }

  setCurrentlyValidatingElement(null);
}

function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type);

  // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.
  if (!validType) {
    var info = '';
    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendum(props);
    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString = void 0;
    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
  }

  var element = createElement.apply(this, arguments);

  // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.
  if (element == null) {
    return element;
  }

  // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)
  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}

function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;
  // Legacy hook: remove it
  {
    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}

function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);
  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }
  validatePropTypes(newElement);
  return newElement;
}

var React = {
  Children: {
    map: mapChildren,
    forEach: forEachChildren,
    count: countChildren,
    toArray: toArray,
    only: onlyChild
  },

  createRef: createRef,
  Component: Component,
  PureComponent: PureComponent,

  createContext: createContext,
  forwardRef: forwardRef,

  Fragment: REACT_FRAGMENT_TYPE,
  StrictMode: REACT_STRICT_MODE_TYPE,
  unstable_AsyncMode: REACT_ASYNC_MODE_TYPE,
  unstable_Profiler: REACT_PROFILER_TYPE,

  createElement: createElementWithValidation,
  cloneElement: cloneElementWithValidation,
  createFactory: createFactoryWithValidation,
  isValidElement: isValidElement,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
};

if (enableSuspense) {
  React.Placeholder = REACT_PLACEHOLDER_TYPE;
  React.lazy = lazy;
}



var React$2 = Object.freeze({
	default: React
});

var React$3 = ( React$2 && React ) || React$2;

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var react = React$3.default || React$3;

module.exports = react;
  })();
}

}).call(this,require('_process'))
},{"_process":366,"object-assign":365,"prop-types/checkPropTypes":367}],377:[function(require,module,exports){
/** @license React v16.5.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';var m=require("object-assign"),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.async_mode"):60111,y=n?Symbol.for("react.forward_ref"):60112;n&&Symbol.for("react.placeholder");
var z="function"===typeof Symbol&&Symbol.iterator;function A(a,b,d,c,e,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[d,c,e,g,h,f],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation"}a.framesToPop=1;throw a;}}
function B(a){for(var b=arguments.length-1,d="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)d+="&args[]="+encodeURIComponent(arguments[c+1]);A(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",d)}var C={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},D={};
function E(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}E.prototype.isReactComponent={};E.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};function F(){}F.prototype=E.prototype;function G(a,b,d){this.props=a;this.context=b;this.refs=D;this.updater=d||C}var H=G.prototype=new F;
H.constructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0,ref:!0,__self:!0,__source:!0};
function L(a,b,d){var c=void 0,e={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)J.call(b,c)&&!K.hasOwnProperty(c)&&(e[c]=b[c]);var f=arguments.length-2;if(1===f)e.children=d;else if(1<f){for(var k=Array(f),l=0;l<f;l++)k[l]=arguments[l+2];e.children=k}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===e[c]&&(e[c]=f[c]);return{$$typeof:p,type:a,key:g,ref:h,props:e,_owner:I.current}}
function M(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function N(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var O=/\/+/g,P=[];function Q(a,b,d,c){if(P.length){var e=P.pop();e.result=a;e.keyPrefix=b;e.func=d;e.context=c;e.count=0;return e}return{result:a,keyPrefix:b,func:d,context:c,count:0}}
function R(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>P.length&&P.push(a)}
function S(a,b,d,c){var e=typeof a;if("undefined"===e||"boolean"===e)a=null;var g=!1;if(null===a)g=!0;else switch(e){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return d(c,a,""===b?"."+T(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){e=a[h];var f=b+T(e,h);g+=S(e,f,d,c)}else if(null===a||"object"!==typeof a?f=null:(f=z&&a[z]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),h=
0;!(e=a.next()).done;)e=e.value,f=b+T(e,h++),g+=S(e,f,d,c);else"object"===e&&(d=""+a,B("31","[object Object]"===d?"object with keys {"+Object.keys(a).join(", ")+"}":d,""));return g}function U(a,b,d){return null==a?0:S(a,"",b,d)}function T(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function V(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,d){var c=a.result,e=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,d,function(a){return a}):null!=a&&(N(a)&&(a=M(a,e+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+d)),c.push(a))}function W(a,b,d,c,e){var g="";null!=d&&(g=(""+d).replace(O,"$&/")+"/");b=Q(b,g,c,e);U(a,aa,b);R(b)}function ba(a,b){var d=I.currentDispatcher;null===d?B("277"):void 0;return d.readContext(a,b)}
var X={Children:{map:function(a,b,d){if(null==a)return a;var c=[];W(a,c,null,b,d);return c},forEach:function(a,b,d){if(null==a)return a;b=Q(null,null,b,d);U(a,V,b);R(b)},count:function(a){return U(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){N(a)?void 0:B("143");return a}},createRef:function(){return{current:null}},Component:E,PureComponent:G,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
_currentValue:a,_currentValue2:a,Provider:null,Consumer:null,unstable_read:null};a.Provider={$$typeof:v,_context:a};a.Consumer=a;a.unstable_read=ba.bind(null,a);return a},forwardRef:function(a){return{$$typeof:y,render:a}},Fragment:r,StrictMode:t,unstable_AsyncMode:x,unstable_Profiler:u,createElement:L,cloneElement:function(a,b,d){null===a||void 0===a?B("267",a):void 0;var c=void 0,e=m({},a.props),g=a.key,h=a.ref,f=a._owner;if(null!=b){void 0!==b.ref&&(h=b.ref,f=I.current);void 0!==b.key&&(g=""+b.key);
var k=void 0;a.type&&a.type.defaultProps&&(k=a.type.defaultProps);for(c in b)J.call(b,c)&&!K.hasOwnProperty(c)&&(e[c]=void 0===b[c]&&void 0!==k?k[c]:b[c])}c=arguments.length-2;if(1===c)e.children=d;else if(1<c){k=Array(c);for(var l=0;l<c;l++)k[l]=arguments[l+2];e.children=k}return{$$typeof:p,type:a.type,key:g,ref:h,props:e,_owner:f}},createFactory:function(a){var b=L.bind(null,a);b.type=a;return b},isValidElement:N,version:"16.5.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:I,
assign:m}},Y={default:X},Z=Y&&X||Y;module.exports=Z.default||Z;

},{"object-assign":365}],378:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/react.production.min.js');
} else {
  module.exports = require('./cjs/react.development.js');
}

}).call(this,require('_process'))
},{"./cjs/react.development.js":376,"./cjs/react.production.min.js":377,"_process":366}],379:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);

},{}],380:[function(require,module,exports){
(function (process){
/** @license React v16.5.2
 * schedule-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// Exports ReactDOM.createRoot


// Experimental error-boundary API that can recover from errors within a single
// render phase

// Suspense

// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:


// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:


// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.


// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:


// Warn about legacy context API


// Gather advanced timing metrics for Profiler subtrees.


// Trace which interactions trigger each commit.
var enableSchedulerTracing = true;

// Only used in www builds.


// Only used in www builds.


// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

var DEFAULT_THREAD_ID = 0;

// Counters used to generate unique IDs.
var interactionIDCounter = 0;
var threadIDCounter = 0;

// Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.
exports.__interactionsRef = null;

// Listener(s) to notify when interactions begin and end.
exports.__subscriberRef = null;

if (enableSchedulerTracing) {
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}

function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return exports.__interactionsRef.current;
  }
}

function unstable_getThreadID() {
  return ++threadIDCounter;
}

function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };

  var prevInteractions = exports.__interactionsRef.current;

  // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.
  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;

  var subscriber = exports.__subscriberRef.current;
  var returnValue = void 0;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--;

          // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.
          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}

function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = exports.__interactionsRef.current;

  var subscriber = exports.__subscriberRef.current;
  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  }

  // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.
  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });

  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;

    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true;

        // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.
        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;
if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}

function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;

  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_trace = unstable_trace;
exports.unstable_wrap = unstable_wrap;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}

}).call(this,require('_process'))
},{"_process":366}],381:[function(require,module,exports){
/** @license React v16.5.2
 * schedule-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};

},{}],382:[function(require,module,exports){
(function (process){
/** @license React v16.5.2
 * schedule.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-disable no-var */

// TODO: Currently there's only a single priority level, Deferred. Will add
// additional priorities.
var DEFERRED_TIMEOUT = 5000;

// Callbacks are stored as a circular, doubly linked list.
var firstCallbackNode = null;

var isPerformingWork = false;

var isHostCallbackScheduled = false;

var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

var timeRemaining;
if (hasNativePerformanceNow) {
  timeRemaining = function () {
    // We assume that if we have a performance timer that the rAF callback
    // gets a performance timer value. Not sure if this is always true.
    var remaining = getFrameDeadline() - performance.now();
    return remaining > 0 ? remaining : 0;
  };
} else {
  timeRemaining = function () {
    // Fallback to Date.now()
    var remaining = getFrameDeadline() - Date.now();
    return remaining > 0 ? remaining : 0;
  };
}

var deadlineObject = {
  timeRemaining: timeRemaining,
  didTimeout: false
};

function ensureHostCallbackIsScheduled() {
  if (isPerformingWork) {
    // Don't schedule work yet; wait until the next time we yield.
    return;
  }
  // Schedule the host callback using the earliest timeout in the list.
  var timesOutAt = firstCallbackNode.timesOutAt;
  if (!isHostCallbackScheduled) {
    isHostCallbackScheduled = true;
  } else {
    // Cancel the existing host callback.
    cancelCallback();
  }
  requestCallback(flushWork, timesOutAt);
}

function flushFirstCallback(node) {
  var flushedNode = firstCallbackNode;

  // Remove the node from the list before calling the callback. That way the
  // list is in a consistent state even if the callback throws.
  var next = firstCallbackNode.next;
  if (firstCallbackNode === next) {
    // This is the last callback in the list.
    firstCallbackNode = null;
    next = null;
  } else {
    var previous = firstCallbackNode.previous;
    firstCallbackNode = previous.next = next;
    next.previous = previous;
  }

  flushedNode.next = flushedNode.previous = null;

  // Now it's safe to call the callback.
  var callback = flushedNode.callback;
  callback(deadlineObject);
}

function flushWork(didTimeout) {
  isPerformingWork = true;
  deadlineObject.didTimeout = didTimeout;
  try {
    if (didTimeout) {
      // Flush all the timed out callbacks without yielding.
      while (firstCallbackNode !== null) {
        // Read the current time. Flush all the callbacks that expire at or
        // earlier than that time. Then read the current time again and repeat.
        // This optimizes for as few performance.now calls as possible.
        var currentTime = exports.unstable_now();
        if (firstCallbackNode.timesOutAt <= currentTime) {
          do {
            flushFirstCallback();
          } while (firstCallbackNode !== null && firstCallbackNode.timesOutAt <= currentTime);
          continue;
        }
        break;
      }
    } else {
      // Keep flushing callbacks until we run out of time in the frame.
      if (firstCallbackNode !== null) {
        do {
          flushFirstCallback();
        } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);
      }
    }
  } finally {
    isPerformingWork = false;
    if (firstCallbackNode !== null) {
      // There's still work remaining. Request another callback.
      ensureHostCallbackIsScheduled(firstCallbackNode);
    } else {
      isHostCallbackScheduled = false;
    }
  }
}

function unstable_scheduleWork(callback, options) {
  var currentTime = exports.unstable_now();

  var timesOutAt;
  if (options !== undefined && options !== null && options.timeout !== null && options.timeout !== undefined) {
    // Check for an explicit timeout
    timesOutAt = currentTime + options.timeout;
  } else {
    // Compute an absolute timeout using the default constant.
    timesOutAt = currentTime + DEFERRED_TIMEOUT;
  }

  var newNode = {
    callback: callback,
    timesOutAt: timesOutAt,
    next: null,
    previous: null
  };

  // Insert the new callback into the list, sorted by its timeout.
  if (firstCallbackNode === null) {
    // This is the first callback in the list.
    firstCallbackNode = newNode.next = newNode.previous = newNode;
    ensureHostCallbackIsScheduled(firstCallbackNode);
  } else {
    var next = null;
    var node = firstCallbackNode;
    do {
      if (node.timesOutAt > timesOutAt) {
        // The new callback times out before this one.
        next = node;
        break;
      }
      node = node.next;
    } while (node !== firstCallbackNode);

    if (next === null) {
      // No callback with a later timeout was found, which means the new
      // callback has the latest timeout in the list.
      next = firstCallbackNode;
    } else if (next === firstCallbackNode) {
      // The new callback has the earliest timeout in the entire list.
      firstCallbackNode = newNode;
      ensureHostCallbackIsScheduled(firstCallbackNode);
    }

    var previous = next.previous;
    previous.next = next.previous = newNode;
    newNode.next = next;
    newNode.previous = previous;
  }

  return newNode;
}

function unstable_cancelScheduledWork(callbackNode) {
  var next = callbackNode.next;
  if (next === null) {
    // Already cancelled.
    return;
  }

  if (next === callbackNode) {
    // This is the only scheduled callback. Clear the list.
    firstCallbackNode = null;
  } else {
    // Remove the callback from its position in the list.
    if (callbackNode === firstCallbackNode) {
      firstCallbackNode = next;
    }
    var previous = callbackNode.previous;
    previous.next = next;
    next.previous = previous;
  }

  callbackNode.next = callbackNode.previous = null;
}

// The remaining code is essentially a polyfill for requestIdleCallback. It
// works by scheduling a requestAnimationFrame, storing the time for the start
// of the frame, then scheduling a postMessage which gets scheduled after paint.
// Within the postMessage handler do as much work as possible until time + frame
// rate. By separating the idle call into a separate event tick we ensure that
// layout, paint and other browser work is counted against the available time.
// The frame rate is dynamically adjusted.

// We capture a local reference to any global, in case it gets polyfilled after
// this module is initially evaluated. We want to be using a
// consistent implementation.
var localDate = Date;

// This initialization code may run even on server environments if a component
// just imports ReactDOM (e.g. for findDOMNode). Some environments might not
// have setTimeout or clearTimeout. However, we always expect them to be defined
// on the client. https://github.com/facebook/react/pull/13088
var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;

// We don't expect either of these to necessarily be defined, but we will error
// later if they are missing on the client.
var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;

// requestAnimationFrame does not run when the tab is in the background. If
// we're backgrounded we prefer for that work to happen so that the page
// continues to load in the background. So we also schedule a 'setTimeout' as
// a fallback.
// TODO: Need a better heuristic for backgrounded work.
var ANIMATION_FRAME_TIMEOUT = 100;
var rAFID;
var rAFTimeoutID;
var requestAnimationFrameWithTimeout = function (callback) {
  // schedule rAF and also a setTimeout
  rAFID = localRequestAnimationFrame(function (timestamp) {
    // cancel the setTimeout
    localClearTimeout(rAFTimeoutID);
    callback(timestamp);
  });
  rAFTimeoutID = localSetTimeout(function () {
    // cancel the requestAnimationFrame
    localCancelAnimationFrame(rAFID);
    callback(exports.unstable_now());
  }, ANIMATION_FRAME_TIMEOUT);
};

if (hasNativePerformanceNow) {
  var Performance = performance;
  exports.unstable_now = function () {
    return Performance.now();
  };
} else {
  exports.unstable_now = function () {
    return localDate.now();
  };
}

var requestCallback;
var cancelCallback;
var getFrameDeadline;

if (typeof window === 'undefined') {
  // If this accidentally gets imported in a non-browser environment, fallback
  // to a naive implementation.
  var timeoutID = -1;
  requestCallback = function (callback, absoluteTimeout) {
    timeoutID = setTimeout(callback, 0, true);
  };
  cancelCallback = function () {
    clearTimeout(timeoutID);
  };
  getFrameDeadline = function () {
    return 0;
  };
} else if (window._schedMock) {
  // Dynamic injection, only for testing purposes.
  var impl = window._schedMock;
  requestCallback = impl[0];
  cancelCallback = impl[1];
  getFrameDeadline = impl[2];
} else {
  if (typeof console !== 'undefined') {
    if (typeof localRequestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
    if (typeof localCancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  var scheduledCallback = null;
  var isIdleScheduled = false;
  var timeoutTime = -1;

  var isAnimationFrameScheduled = false;

  var isPerformingIdleWork = false;

  var frameDeadline = 0;
  // We start out assuming that we run at 30fps but then the heuristic tracking
  // will adjust this value to a faster fps if we get more frequent animation
  // frames.
  var previousFrameTime = 33;
  var activeFrameTime = 33;

  getFrameDeadline = function () {
    return frameDeadline;
  };

  // We use the postMessage trick to defer idle work until after the repaint.
  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
  var idleTick = function (event) {
    if (event.source !== window || event.data !== messageKey) {
      return;
    }

    isIdleScheduled = false;

    var currentTime = exports.unstable_now();

    var didTimeout = false;
    if (frameDeadline - currentTime <= 0) {
      // There's no time left in this idle period. Check if the callback has
      // a timeout and whether it's been exceeded.
      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
        // Exceeded the timeout. Invoke the callback even though there's no
        // time left.
        didTimeout = true;
      } else {
        // No timeout.
        if (!isAnimationFrameScheduled) {
          // Schedule another animation callback so we retry later.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
        // Exit without invoking the callback.
        return;
      }
    }

    timeoutTime = -1;
    var callback = scheduledCallback;
    scheduledCallback = null;
    if (callback !== null) {
      isPerformingIdleWork = true;
      try {
        callback(didTimeout);
      } finally {
        isPerformingIdleWork = false;
      }
    }
  };
  // Assumes that we have addEventListener in this environment. Might need
  // something better for old IE.
  window.addEventListener('message', idleTick, false);

  var animationTick = function (rafTime) {
    isAnimationFrameScheduled = false;
    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
      if (nextFrameTime < 8) {
        // Defensive coding. We don't support higher frame rates than 120hz.
        // If we get lower than that, it is probably a bug.
        nextFrameTime = 8;
      }
      // If one frame goes long, then the next one can be short to catch up.
      // If two frames are short in a row, then that's an indication that we
      // actually have a higher frame rate than what we're currently optimizing.
      // We adjust our heuristic dynamically accordingly. For example, if we're
      // running on 120hz display or 90hz VR display.
      // Take the max of the two in case one of them was an anomaly due to
      // missed frame deadlines.
      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
    } else {
      previousFrameTime = nextFrameTime;
    }
    frameDeadline = rafTime + activeFrameTime;
    if (!isIdleScheduled) {
      isIdleScheduled = true;
      window.postMessage(messageKey, '*');
    }
  };

  requestCallback = function (callback, absoluteTimeout) {
    scheduledCallback = callback;
    timeoutTime = absoluteTimeout;
    if (isPerformingIdleWork) {
      // If we're already performing idle work, an error must have been thrown.
      // Don't wait for the next frame. Continue working ASAP, in a new event.
      window.postMessage(messageKey, '*');
    } else if (!isAnimationFrameScheduled) {
      // If rAF didn't already schedule one, we need to schedule a frame.
      // TODO: If this rAF doesn't materialize because the browser throttles, we
      // might want to still have setTimeout trigger rIC as a backup to ensure
      // that we keep performing work.
      isAnimationFrameScheduled = true;
      requestAnimationFrameWithTimeout(animationTick);
    }
  };

  cancelCallback = function () {
    scheduledCallback = null;
    isIdleScheduled = false;
    timeoutTime = -1;
  };
}

exports.unstable_scheduleWork = unstable_scheduleWork;
exports.unstable_cancelScheduledWork = unstable_cancelScheduledWork;
  })();
}

}).call(this,require('_process'))
},{"_process":366}],383:[function(require,module,exports){
/** @license React v16.5.2
 * schedule.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var c=null,e=!1,f=!1,g="object"===typeof performance&&"function"===typeof performance.now,l={timeRemaining:g?function(){var a=h()-performance.now();return 0<a?a:0}:function(){var a=h()-Date.now();return 0<a?a:0},didTimeout:!1};function m(){if(!e){var a=c.timesOutAt;f?n():f=!0;p(q,a)}}function r(){var a=c,b=c.next;if(c===b)c=null;else{var d=c.previous;c=d.next=b;b.previous=d}a.next=a.previous=null;a=a.callback;a(l)}
function q(a){e=!0;l.didTimeout=a;try{if(a)for(;null!==c;){var b=exports.unstable_now();if(c.timesOutAt<=b){do r();while(null!==c&&c.timesOutAt<=b)}else break}else if(null!==c){do r();while(null!==c&&0<h()-exports.unstable_now())}}finally{e=!1,null!==c?m(c):f=!1}}
var t=Date,u="function"===typeof setTimeout?setTimeout:void 0,v="function"===typeof clearTimeout?clearTimeout:void 0,w="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,x="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,y,z;function A(a){y=w(function(b){v(z);a(b)});z=u(function(){x(y);a(exports.unstable_now())},100)}if(g){var B=performance;exports.unstable_now=function(){return B.now()}}else exports.unstable_now=function(){return t.now()};var p,n,h;
if("undefined"===typeof window){var C=-1;p=function(a){C=setTimeout(a,0,!0)};n=function(){clearTimeout(C)};h=function(){return 0}}else if(window._schedMock){var D=window._schedMock;p=D[0];n=D[1];h=D[2]}else{"undefined"!==typeof console&&("function"!==typeof w&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof x&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
var E=null,F=!1,G=-1,H=!1,I=!1,J=0,K=33,L=33;h=function(){return J};var M="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(a){if(a.source===window&&a.data===M){F=!1;var b=exports.unstable_now();a=!1;if(0>=J-b)if(-1!==G&&G<=b)a=!0;else{H||(H=!0,A(N));return}G=-1;b=E;E=null;if(null!==b){I=!0;try{b(a)}finally{I=!1}}}},!1);var N=function(a){H=!1;var b=a-J+L;b<L&&K<L?(8>b&&(b=8),L=b<K?K:b):K=b;J=a+L;F||(F=!0,window.postMessage(M,"*"))};p=function(a,
b){E=a;G=b;I?window.postMessage(M,"*"):H||(H=!0,A(N))};n=function(){E=null;F=!1;G=-1}}exports.unstable_scheduleWork=function(a,b){var d=exports.unstable_now();b=void 0!==b&&null!==b&&null!==b.timeout&&void 0!==b.timeout?d+b.timeout:d+5E3;a={callback:a,timesOutAt:b,next:null,previous:null};if(null===c)c=a.next=a.previous=a,m(c);else{d=null;var k=c;do{if(k.timesOutAt>b){d=k;break}k=k.next}while(k!==c);null===d?d=c:d===c&&(c=a,m(c));b=d.previous;b.next=d.previous=a;a.next=d;a.previous=b}return a};
exports.unstable_cancelScheduledWork=function(a){var b=a.next;if(null!==b){if(b===a)c=null;else{a===c&&(c=b);var d=a.previous;d.next=b;b.previous=d}a.next=a.previous=null}};

},{}],384:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/schedule.production.min.js');
} else {
  module.exports = require('./cjs/schedule.development.js');
}

}).call(this,require('_process'))
},{"./cjs/schedule.development.js":382,"./cjs/schedule.production.min.js":383,"_process":366}],385:[function(require,module,exports){
(function (process){
'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./cjs/schedule-tracing.production.min.js');
} else {
  module.exports = require('./cjs/schedule-tracing.development.js');
}

}).call(this,require('_process'))
},{"./cjs/schedule-tracing.development.js":380,"./cjs/schedule-tracing.production.min.js":381,"_process":366}],386:[function(require,module,exports){
/*!
* screenfull
* v3.3.3 - 2018-09-04
* (c) Sindre Sorhus; MIT License
*/
(function () {
	'use strict';

	var document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};
	var isCommonjs = typeof module !== 'undefined' && module.exports;
	var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

	var fn = (function () {
		var val;

		var fnMap = [
			[
				'requestFullscreen',
				'exitFullscreen',
				'fullscreenElement',
				'fullscreenEnabled',
				'fullscreenchange',
				'fullscreenerror'
			],
			// New WebKit
			[
				'webkitRequestFullscreen',
				'webkitExitFullscreen',
				'webkitFullscreenElement',
				'webkitFullscreenEnabled',
				'webkitfullscreenchange',
				'webkitfullscreenerror'

			],
			// Old WebKit (Safari 5.1)
			[
				'webkitRequestFullScreen',
				'webkitCancelFullScreen',
				'webkitCurrentFullScreenElement',
				'webkitCancelFullScreen',
				'webkitfullscreenchange',
				'webkitfullscreenerror'

			],
			[
				'mozRequestFullScreen',
				'mozCancelFullScreen',
				'mozFullScreenElement',
				'mozFullScreenEnabled',
				'mozfullscreenchange',
				'mozfullscreenerror'
			],
			[
				'msRequestFullscreen',
				'msExitFullscreen',
				'msFullscreenElement',
				'msFullscreenEnabled',
				'MSFullscreenChange',
				'MSFullscreenError'
			]
		];

		var i = 0;
		var l = fnMap.length;
		var ret = {};

		for (; i < l; i++) {
			val = fnMap[i];
			if (val && val[1] in document) {
				for (i = 0; i < val.length; i++) {
					ret[fnMap[0][i]] = val[i];
				}
				return ret;
			}
		}

		return false;
	})();

	var eventNameMap = {
		change: fn.fullscreenchange,
		error: fn.fullscreenerror
	};

	var screenfull = {
		request: function (elem) {
			var request = fn.requestFullscreen;

			elem = elem || document.documentElement;

			// Work around Safari 5.1 bug: reports support for
			// keyboard in fullscreen even though it doesn't.
			// Browser sniffing, since the alternative with
			// setTimeout is even worse.
			if (/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)) {
				elem[request]();
			} else {
				elem[request](keyboardAllowed ? Element.ALLOW_KEYBOARD_INPUT : {});
			}
		},
		exit: function () {
			document[fn.exitFullscreen]();
		},
		toggle: function (elem) {
			if (this.isFullscreen) {
				this.exit();
			} else {
				this.request(elem);
			}
		},
		onchange: function (callback) {
			this.on('change', callback);
		},
		onerror: function (callback) {
			this.on('error', callback);
		},
		on: function (event, callback) {
			var eventName = eventNameMap[event];
			if (eventName) {
				document.addEventListener(eventName, callback, false);
			}
		},
		off: function (event, callback) {
			var eventName = eventNameMap[event];
			if (eventName) {
				document.removeEventListener(eventName, callback, false);
			}
		},
		raw: fn
	};

	if (!fn) {
		if (isCommonjs) {
			module.exports = false;
		} else {
			window.screenfull = false;
		}

		return;
	}

	Object.defineProperties(screenfull, {
		isFullscreen: {
			get: function () {
				return Boolean(document[fn.fullscreenElement]);
			}
		},
		element: {
			enumerable: true,
			get: function () {
				return document[fn.fullscreenElement];
			}
		},
		enabled: {
			enumerable: true,
			get: function () {
				// Coerce to boolean in case of old WebKit
				return Boolean(document[fn.fullscreenEnabled]);
			}
		}
	});

	if (isCommonjs) {
		module.exports = screenfull;
	} else {
		window.screenfull = screenfull;
	}
})();

},{}],387:[function(require,module,exports){
(function (global){
//     Underscore.js 1.9.1
//     http://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.1';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[72]);
